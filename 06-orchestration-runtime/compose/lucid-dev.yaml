# Compose for Lucid (dev profile). Host editing in VS Code; runtime on Pi.
# .env required keys: ONION, COOKIE, HEX. Optional: BLOCK_ONION.

name: lucid-dev

x-default-env: &default-env
  LUCID_ENV: dev
  MONGO_URL: ${MONGO_URL:-mongodb://lucid:lucid@lucid_mongo:27017/lucid?authSource=admin&retryWrites=false}
  ONION: ${ONION:-}
  BLOCK_ONION: ${BLOCK_ONION:-}
  TOR_CONTROL_PASSWORD: ${TOR_CONTROL_PASSWORD:-}

networks:
  lucid_net:
    name: lucid-dev_lucid_net
    driver: bridge
    attachable: true

volumes:
  tor_data:
    name: lucid-dev_onion_state
    external: true
  mongo_data: {}
  onion_state: {}

services:
  devcontainer:
    container_name: lucid_devcontainer
    build:
      context: ../..
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - type: bind
        source: ../..
        target: /workspaces/Lucid
    networks:
      - lucid_net
    command: sleep infinity
    profiles: [dev]
    
  tor-proxy:
    profiles: [dev]
    container_name: lucid_tor
    build:
      context: ../../02-network-security/tor
      dockerfile: Dockerfile
    env_file: [./.env]
    environment:
      <<: *default-env
    expose: ["9050", "9051"]
    volumes:
      - tor_data:/var/lib/tor
      - onion_state:/run/lucid/onion
      - ../../02-network-security/tor/torrc:/etc/tor/torrc:ro
      - ../../02-network-security/tor/tor-health.sh:/usr/local/bin/tor-health:ro
      - ../../02-network-security/tor/tor-show-onion.sh:/usr/local/bin/tor-show-onion:ro
      - ../../02-network-security/tor/scripts/create_ephemeral_onion.sh:/usr/local/bin/create-ephemeral-onion:ro
    networks:
      lucid_net:
        aliases: [lucid_net, tor-proxy, tor]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "sh /usr/local/bin/tor-health"]
      interval: 10s
      timeout: 6s
      retries: 18
      start_period: 25s
    security_opt:
      - no-new-privileges:true

  lucid_mongo:
    profiles: [dev]
    container_name: lucid_mongo
    image: mongo:7
    command: ["mongod", "--auth", "--bind_ip_all"]
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: lucid
      MONGO_INITDB_ROOT_PASSWORD: lucid
      MONGO_INITDB_DATABASE: lucid
    volumes:
      - mongo_data:/data/db
    networks: [lucid_net]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval \"db.runCommand({ ping: 1 }).ok\" | grep -q 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 15s
    security_opt:
      - no-new-privileges:true

  lucid_api:
    profiles: [dev]
    build:
      context: ../../open-api/api
      dockerfile: Dockerfile.api
    container_name: lucid_api
    command: >
      python -m uvicorn app.main:app
      --host 0.0.0.0
      --port 8081
      --proxy-headers
    ports:
      - "8081:8081"
    networks: [lucid_net]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8081/health || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s

  api-gateway:
    profiles: [dev]
    build:
      context: ../../03-api-gateways/gateway
      dockerfile: Dockerfile.gateway
    container_name: lucid_api_gateway
    environment:
      API_UPSTREAM: "lucid_api:8081"
      GATEWAY_PORT: "8080"
    depends_on:
      lucid_api:
        condition: service_started
    ports:
      - "8080:8080"
    networks: [lucid_net]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8080/health || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s

  tunnel-tools:
    profiles: [dev]
    container_name: lucid_tunnel_tools
    build:
      context: ../../02-network-security/tunnels
      dockerfile: Dockerfile
    env_file: [./.env]
    environment:
      <<: *default-env
    depends_on:
      tor-proxy:
        condition: service_healthy
      lucid_api:
        condition: service_started
    expose: ["7000"]
    networks: [lucid_net]
    volumes:
      - onion_state:/run/lucid/onion
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  server-tools:
    profiles: [dev]
    container_name: lucid_server_tools
    image: alpine:3.22.1
    env_file: [./.env]
    environment:
      <<: *default-env
    networks: [lucid_net]
    depends_on:
      tor-proxy:
        condition: service_healthy
      lucid_mongo:
        condition: service_healthy
      lucid_api:
        condition: service_started
    command:
      - /bin/sh
      - -lc
      - |
        set -e
        apk add --no-cache bash curl jq bind-tools netcat-openbsd socat openssl || true
        echo "[server-tools] Ready. Utilities installed (or already present)."
        exec tail -f /dev/null
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
