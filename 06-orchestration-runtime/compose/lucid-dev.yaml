# Compose for Lucid (dev profile). Host editing in VS Code; runtime on Pi.
# .env required keys: ONION, COOKIE, HEX. Optional: BLOCK_ONION.

name: lucid-dev

x-default-env: &default-env
  LUCID_ENV: dev
  # Standalone-safe Mongo URI
  MONGO_URL: ${MONGO_URL:-mongodb://lucid:lucid@lucid_mongo:27017/lucid?authSource=admin&retryWrites=false}
  # Onion values (auto-import from /run/lucid/onion/*.txt if empty)
  ONION: ${ONION:-}
  BLOCK_ONION: ${BLOCK_ONION:-}
  # Optional: if you later switch Tor to password auth
  TOR_CONTROL_PASSWORD: ${TOR_CONTROL_PASSWORD:-}

networks:
  lucid_net:
    name: lucid-dev_lucid_net
    driver: bridge
    attachable: true

volumes:
  tor_data:
    name: lucid-dev_onion_state
    external: true         # silence “already exists” warning
  mongo_data:
  onion_state: {}

services:

  # ────────────────────────────────
  # Tor proxy (Socks + ControlPort) — internal only, cookie-auth healthcheck
  # ────────────────────────────────
  tor-proxy:
    profiles: [dev]
    container_name: lucid_tor
    build:
      context: ../../02-network-security/tor
      dockerfile: Dockerfile
    env_file: [./.env]
    environment:
      <<: *default-env
    # Internal only (do NOT expose Tor to the host)
    expose: ["9050", "9051"]
    volumes:
      - tor_data:/var/lib/tor
      - onion_state:/run/lucid/onion
      - ../../02-network-security/tor/torrc:/etc/tor/torrc:ro
      - ../../02-network-security/tor/tor-health.sh:/usr/local/bin/tor-health:ro
      - ../../02-network-security/tor/tor-show-onion.sh:/usr/local/bin/tor-show-onion:ro
      - ../../02-network-security/tor/scripts/create_ephemeral_onion.sh:/usr/local/bin/create-ephemeral-onion:ro
    networks:
      lucid_net:
        aliases: [lucid-dev_lucid_net,lucid_net, tor-proxy, tor]
    restart: unless-stopped
    healthcheck:
      # Robust check: reads cookie -> hex (xxd or hexdump) -> AUTHENTICATE -> GETINFO bootstrap
      test: ["CMD-SHELL", "sh /usr/local/bin/tor-health"]
      interval: 10s
      timeout: 6s
      retries: 18
      start_period: 25s
    security_opt:
      - no-new-privileges:true

  # ────────────────────────────────
  # MongoDB (auth enabled)
  # ────────────────────────────────
  lucid_mongo:
    profiles: [dev]
    container_name: lucid_mongo
    image: mongo:7
    command: ["mongod", "--auth", "--bind_ip_all"]
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: lucid
      MONGO_INITDB_ROOT_PASSWORD: lucid
      MONGO_INITDB_DATABASE: lucid
    volumes:
      - mongo_data:/data/db
    networks: [lucid_net]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval \"db.runCommand({ ping: 1 }).ok\" | grep -q 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 15s
    security_opt:
      - no-new-privileges:true

  # ────────────────────────────────
  # Lucid API (Uvicorn on 8081) — pure-Python deps; auto-import onion from volume
  # ────────────────────────────────
  lucid_api:
    profiles: [dev]
    container_name: lucid_api
    image: python:3.12-slim
    working_dir: /app
    env_file: [./.env]
    environment:
      <<: *default-env
      PORT: "8081"
    depends_on:
      lucid_mongo:
        condition: service_healthy
      tor-proxy:
        condition: service_healthy
    ports:
      - "8081:8081"
    networks: [lucid_net]
    volumes:
      # Mount the API *project* root so the package `app` exists at /app/app/*
      - ../../03-api-gateway/api:/app
      - onion_state:/run/lucid/onion:ro
    # IMPORTANT: use [/bin/sh, -lc, <block>] and escape $ as $$ to avoid Compose var-substitution
    command:
      - /bin/sh
      - -lc
      - |
        set -e
        python -m pip install --upgrade pip >/dev/null
        # Pure-Python stack (avoid native wheels on arm64)
        pip install --no-cache-dir "fastapi>=0.111,<1" "uvicorn>=0.30,<1" pymongo python-dotenv "requests[socks]"
        # Import onion values from shared volume if envs are empty
        [ -z "$$ONION" ] && [ -f /run/lucid/onion/onion.txt ] && export ONION="$(tr -d '\r\n' </run/lucid/onion/onion.txt)"
        [ -z "$$BLOCK_ONION" ] && [ -f /run/lucid/onion/block_onion.txt ] && export BLOCK_ONION="$(tr -d '\r\n' </run/lucid/onion/block_onion.txt)"
        exec uvicorn app.main:app --host 0.0.0.0 --port "$$PORT"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # ────────────────────────────────
  # API Gateway (nginx on 8080) — proxies to lucid_api:8081
  # ────────────────────────────────
  lucid_api_gateway:
    profiles: [dev]
    container_name: lucid_api_gateway
    image: nginx:1.28-alpine
    env_file: [./.env]
    environment:
      <<: *default-env
    depends_on:
      lucid_api:
        condition: service_started
    ports:
      - "8080:8080"
    networks: [lucid_net]
    volumes:
      - onion_state:/run/lucid/onion:ro
    command:
      - /bin/sh
      - -lc
      - |
        cat >/etc/nginx/conf.d/default.conf <<'EOF'
        server {
          listen 8080;
          client_max_body_size 16m;
          proxy_http_version 1.1;

          location / {
            proxy_pass http://lucid_api:8081;
            proxy_set_header Host $$host;
            proxy_set_header X-Real-IP $$remote_addr;
            proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $$scheme;
            proxy_read_timeout 60s;
          }
        }
        EOF
        exec nginx -g 'daemon off;'
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # ────────────────────────────────
  # Tunnel tools (manage onion + validation) — writes onion to shared volume
  # ────────────────────────────────
  tunnel-tools:
    profiles: [dev]
    container_name: lucid_tunnel_tools
    build:
      context: ../../02-network-security/tunnels
      dockerfile: Dockerfile
    env_file: [./.env]
    environment:
      <<: *default-env
    depends_on:
      tor-proxy:
        condition: service_healthy
      lucid_api:
        condition: service_started
    expose: ["7000"]
    networks: [lucid_net]
    volumes:
      - onion_state:/run/lucid/onion
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # ────────────────────────────────
  # Server tools (debug util container) — Alpine 3.22.1
  # ────────────────────────────────
  server-tools:
    profiles: [dev]
    container_name: lucid_server_tools
    image: alpine:3.22.1
    env_file: [./.env]
    environment:
      <<: *default-env
    networks: [lucid_net]
    depends_on:
      tor-proxy:
        condition: service_healthy
      lucid_mongo:
        condition: service_healthy
      lucid_api:
        condition: service_started
    # Use [/bin/sh, -lc, <block>] and keep container alive for diagnostics
    command:
      - /bin/sh
      - -lc
      - |
        set -e
        apk add --no-cache bash curl jq bind-tools netcat-openbsd socat openssl || true
        echo "[server-tools] Ready. Utilities installed (or already present)."
        exec tail -f /dev/null
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
