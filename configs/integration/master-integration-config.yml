# Master Integration Configuration
# Coordinates integration between GUI, API, and Docker systems
# Central configuration for cross-system communication and deployment

master_integration:
  version: "1.0.0"
  description: "Master integration configuration for Lucid multi-system architecture"
  last_updated: "2025-01-10T19:08:00Z"

# System Architecture Overview
architecture:
  description: "Lucid RDP Multi-System Architecture"
  
  systems:
    gui_system:
      name: "Electron GUI System"
      description: "Multi-window Electron application with 4 GUI variants"
      components:
        - "User GUI"
        - "Developer GUI"
        - "Node Operator GUI"
        - "Admin GUI"
      integration_points:
        - "API Gateway"
        - "Docker Manager"
        - "Tor Manager"
        - "Hardware Wallet Manager"
        
    api_system:
      name: "API Backend System"
      description: "Microservices architecture with service mesh"
      components:
        - "API Gateway"
        - "Blockchain Core"
        - "Authentication Service"
        - "Session Management"
        - "Node Management"
        - "Admin Interface"
        - "TRON Payment (Isolated)"
      integration_points:
        - "GUI API Bridge"
        - "Service Mesh"
        - "Database Layer"
        
    docker_system:
      name: "Docker Container System"
      description: "Containerized deployment with distroless compliance"
      components:
        - "Foundation Services"
        - "Core Services"
        - "Application Services"
        - "Support Services"
        - "GUI Integration Services"
      integration_points:
        - "GUI Docker Manager"
        - "Service Discovery"
        - "Network Isolation"

# Integration Patterns
integration_patterns:
  # API-GUI Integration
  api_gui_integration:
    pattern: "API Gateway + Bridge"
    description: "GUI communicates with backend via API Gateway and GUI API Bridge"
    
    flow:
      1: "GUI makes request to GUI API Bridge"
      2: "GUI API Bridge routes to appropriate backend service"
      3: "Backend service processes request"
      4: "Response flows back through API Gateway to GUI"
    
    security:
      - "JWT authentication"
      - "Rate limiting"
      - "CORS protection"
      - "Request validation"
    
    protocols:
      - "HTTP/HTTPS"
      - "WebSocket (for real-time updates)"
      - "gRPC (for service-to-service communication)"
  
  # Docker-GUI Integration
  docker_gui_integration:
    pattern: "Docker Manager + SSH"
    description: "GUI controls Docker containers via Docker Manager service"
    
    flow:
      1: "GUI sends Docker command to Docker Manager"
      2: "Docker Manager validates permissions"
      3: "Docker Manager executes command via Docker API"
      4: "Results returned to GUI"
    
    security:
      - "Role-based access control"
      - "Command validation"
      - "Audit logging"
    
    protocols:
      - "HTTP API"
      - "Docker Socket (Unix socket)"
      - "SSH (for Pi deployment)"
  
  # Service Discovery Integration
  service_discovery_integration:
    pattern: "Consul + Beta Sidecar"
    description: "Services discover each other via Consul with Beta sidecar isolation"
    
    flow:
      1: "Services register with Consul"
      2: "Beta sidecar enforces network policies"
      3: "Services discover each other via DNS"
      4: "Traffic routed through sidecar proxies"
    
    security:
      - "mTLS encryption"
      - "Network isolation"
      - "ACL-based access control"
    
    protocols:
      - "Consul HTTP API"
      - "gRPC (service mesh)"
      - "DNS (service discovery)"

# Cross-System Communication
cross_system_communication:
  # GUI to API Communication
  gui_to_api:
    enabled: true
    primary_endpoint: "http://localhost:8097"  # GUI API Bridge
    fallback_endpoints:
      - "http://localhost:8080"  # Direct API Gateway
    
    authentication:
      method: "JWT"
      token_source: "local_storage"
      refresh_mechanism: "automatic"
    
    error_handling:
      retry_attempts: 3
      retry_delay: 1000  # milliseconds
      circuit_breaker: true
      fallback_to_cache: true
    
    rate_limiting:
      enabled: true
      requests_per_minute: 100
      burst_limit: 20
  
  # GUI to Docker Communication
  gui_to_docker:
    enabled: true
    primary_endpoint: "http://localhost:8098"  # GUI Docker Manager
    docker_host: "unix:///var/run/docker.sock"
    
    authentication:
      method: "role_based"
      roles:
        user: ["read_only"]
        developer: ["foundation", "core", "application"]
        admin: ["all_services"]
    
    operations:
      allowed_commands:
        - "docker ps"
        - "docker logs"
        - "docker start"
        - "docker stop"
        - "docker restart"
        - "docker-compose up"
        - "docker-compose down"
      
      restricted_commands:
        - "docker system prune"
        - "docker volume rm"
        - "docker network rm"
  
  # API to Docker Communication
  api_to_docker:
    enabled: false  # APIs don't directly control Docker
    description: "APIs focus on business logic, not infrastructure management"
    
    exceptions:
      - "Health checks"
      - "Metrics collection"
      - "Log aggregation"

# Service Mesh Integration
service_mesh_integration:
  enabled: true
  mesh_type: "consul-connect"
  
  # Service registration
  service_registration:
    enabled: true
    auto_registration: true
    health_checks: true
    tags:
      - "lucid"
      - "version:1.0.0"
      - "environment:production"
  
  # Traffic management
  traffic_management:
    enabled: true
    
    load_balancing:
      algorithm: "round_robin"
      health_check: true
      sticky_sessions: false
    
    circuit_breaker:
      enabled: true
      failure_threshold: 5
      recovery_timeout: 30
    
    retry_policy:
      enabled: true
      max_retries: 3
      retry_on: ["5xx", "reset"]
  
  # Security
  security:
    enabled: true
    
    mtls:
      enabled: true
      auto_encrypt: true
      verify_incoming: true
      verify_outgoing: true
    
    acl:
      enabled: true
      default_policy: "deny"
      token_policies: true

# Network Integration
network_integration:
  # Network topology
  topology:
    main_network:
      name: "lucid-pi-network"
      subnet: "172.20.0.0/16"
      gateway: "172.20.0.1"
      services: ["foundation", "core", "application", "gui"]
    
    isolated_network:
      name: "lucid-network-isolated"
      subnet: "172.21.0.0/16"
      gateway: "172.21.0.1"
      services: ["tron_payment"]
      isolation: "strict"
    
    gui_network:
      name: "lucid-gui-network"
      subnet: "172.22.0.0/16"
      gateway: "172.22.0.1"
      services: ["gui_integration"]
  
  # Network policies
  policies:
    isolation_rules:
      - name: "tron_isolation"
        description: "TRON services isolated from blockchain operations"
        enforcement: "strict"
        violations:
          - "TRON imports in blockchain/"
          - "Payment logic in blockchain core"
          - "TRON dependencies in blockchain services"
      
      - name: "wallet_plane_isolation"
        description: "Wallet plane completely isolated"
        enforcement: "strict"
        restrictions:
          - "no_access_to_other_planes"
          - "external_access_only_to_tron_networks"
    
    communication_rules:
      - name: "gui_to_all"
        source: "gui_plane"
        destination: "*"
        ports: ["80", "443", "8080-8099"]
        protocols: ["http", "https"]
      
      - name: "ops_to_all"
        source: "ops_plane"
        destination: "*"
        ports: ["80", "443", "8080-8099"]
        protocols: ["http", "https"]
      
      - name: "chain_to_wallet"
        source: "chain_plane"
        destination: "wallet_plane"
        ports: ["8096"]  # Only TRON client
        protocols: ["http"]
        restrictions: ["payment_operations_only"]

# Data Integration
data_integration:
  # Database integration
  database_integration:
    enabled: true
    
    mongodb:
      connection_string: "mongodb://lucid:lucid@lucid-mongodb:27017/lucid?authSource=admin"
      collections:
        - "sessions"
        - "chunks"
        - "users"
        - "nodes"
        - "payouts"
        - "audit_logs"
    
    redis:
      connection_string: "redis://lucid-redis:6379/0"
      use_cases:
        - "caching"
        - "session_storage"
        - "rate_limiting"
        - "pub/sub"
    
    elasticsearch:
      connection_string: "http://lucid-elasticsearch:9200"
      use_cases:
        - "full_text_search"
        - "log_aggregation"
        - "metrics_storage"
  
  # File system integration
  filesystem_integration:
    enabled: true
    
    shared_volumes:
      - name: "lucid_data"
        path: "/opt/lucid/data"
        services: ["all"]
      
      - name: "lucid_logs"
        path: "/opt/lucid/logs"
        services: ["all"]
      
      - name: "lucid_backups"
        path: "/opt/lucid/backups"
        services: ["admin", "storage"]
    
    gui_data:
      - name: "gui_settings"
        path: "~/.lucid/gui"
        services: ["gui"]
      
      - name: "tor_data"
        path: "~/.lucid/tor"
        services: ["gui", "tor_manager"]
      
      - name: "hardware_wallet_data"
        path: "~/.lucid/wallets"
        services: ["gui", "hardware_wallet"]

# Monitoring Integration
monitoring_integration:
  enabled: true
  
  # Metrics collection
  metrics:
    enabled: true
    
    prometheus:
      enabled: true
      endpoint: "http://localhost:9090/metrics"
      scrape_interval: 30
      retention: "7d"
    
    custom_metrics:
      - name: "lucid_gui_requests_total"
        description: "Total GUI requests"
        type: "counter"
        labels: ["gui_type", "operation", "result"]
      
      - name: "lucid_api_requests_total"
        description: "Total API requests"
        type: "counter"
        labels: ["service", "endpoint", "status_code"]
      
      - name: "lucid_docker_operations_total"
        description: "Total Docker operations"
        type: "counter"
        labels: ["operation", "service", "result"]
  
  # Logging
  logging:
    enabled: true
    
    structured_logging:
      enabled: true
      format: "json"
      fields:
        - "timestamp"
        - "level"
        - "service"
        - "request_id"
        - "user_id"
        - "operation"
        - "duration_ms"
        - "result"
    
    log_aggregation:
      enabled: true
      backend: "elasticsearch"
      endpoint: "http://lucid-elasticsearch:9200"
      index_pattern: "lucid-logs-*"
  
  # Alerting
  alerting:
    enabled: true
    
    alert_rules:
      - name: "ServiceDown"
        condition: "service_health == 0"
        duration: "1m"
        severity: "critical"
        notification_channels: ["email", "slack"]
      
      - name: "HighLatency"
        condition: "response_time > 1000"
        duration: "5m"
        severity: "warning"
        notification_channels: ["slack"]
      
      - name: "HighErrorRate"
        condition: "error_rate > 5"
        duration: "2m"
        severity: "warning"
        notification_channels: ["email", "slack"]

# Security Integration
security_integration:
  enabled: true
  
  # Authentication
  authentication:
    enabled: true
    
    jwt:
      enabled: true
      secret_key_env: "JWT_SECRET_KEY"
      access_token_expiry: 900  # 15 minutes
      refresh_token_expiry: 604800  # 7 days
      issuer: "lucid-system"
      audience: "lucid-gui"
    
    hardware_wallet:
      enabled: true
      supported_devices:
        - "ledger"
        - "trezor"
        - "keepkey"
      tron_support: true
  
  # Authorization
  authorization:
    enabled: true
    
    rbac:
      enabled: true
      roles:
        user:
          permissions: ["read:own_sessions", "create:session", "read:own_profile"]
        developer:
          permissions: ["read:all_sessions", "create:session", "update:session", "read:blockchain", "manage:foundation_services", "manage:core_services", "manage:application_services"]
        admin:
          permissions: ["*"]
    
    service_isolation:
      enabled: true
      tron_isolation: true
      wallet_plane_isolation: true
  
  # Encryption
  encryption:
    enabled: true
    
    data_at_rest:
      enabled: true
      algorithm: "AES-256-GCM"
      key_rotation_interval: 86400  # 24 hours
    
    data_in_transit:
      enabled: true
      protocol: "TLS 1.3"
      certificate_management: "automatic"
    
    network_encryption:
      enabled: true
      mtls: true
      gossip_encryption: true

# Deployment Integration
deployment_integration:
  enabled: true
  
  # Deployment phases
  phases:
    phase1_foundation:
      services: ["mongodb", "redis", "elasticsearch", "auth-service", "storage-database"]
      dependencies: []
      timeout: 600
    
    phase2_core:
      services: ["api-gateway", "blockchain-core", "service-mesh-controller"]
      dependencies: ["phase1_foundation"]
      timeout: 600
    
    phase3_application:
      services: ["session-pipeline", "node-management"]
      dependencies: ["phase1_foundation", "phase2_core"]
      timeout: 600
    
    phase4_support:
      services: ["admin-interface", "tron-client"]
      dependencies: ["phase1_foundation", "phase2_core", "phase3_application"]
      timeout: 600
    
    gui_integration:
      services: ["gui-api-bridge", "gui-docker-manager", "gui-tor-manager", "gui-hardware-wallet"]
      dependencies: ["phase2_core"]
      timeout: 600
  
  # Deployment validation
  validation:
    enabled: true
    
    health_checks:
      enabled: true
      interval: 30
      timeout: 10
      retries: 3
    
    integration_tests:
      enabled: true
      test_suites:
        - "phase1_integration_tests"
        - "phase2_integration_tests"
        - "phase3_integration_tests"
        - "phase4_integration_tests"
        - "gui_integration_tests"
    
    tron_isolation_verification:
      enabled: true
      checks:
        - "scan_blockchain_for_tron"
        - "scan_blockchain_for_tronweb"
        - "scan_blockchain_for_payment"

# Configuration Validation
configuration_validation:
  enabled: true
  strict_mode: true
  
  # Cross-system validation
  cross_system_validation:
    enabled: true
    checks:
      - "service_endpoint_consistency"
      - "network_configuration_consistency"
      - "security_policy_consistency"
      - "environment_variable_consistency"
  
  # System-specific validation
  system_validation:
    gui_system:
      enabled: true
      checks:
        - "gui_window_configurations"
        - "gui_api_endpoint_configurations"
        - "gui_docker_integration_configurations"
    
    api_system:
      enabled: true
      checks:
        - "api_service_configurations"
        - "api_database_connections"
        - "api_security_configurations"
    
    docker_system:
      enabled: true
      checks:
        - "docker_compose_configurations"
        - "docker_network_configurations"
        - "docker_volume_configurations"
