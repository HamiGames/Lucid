# Node Management Service Configuration
# Cluster: 05-NODE-MANAGEMENT
# Service: Worker Node Management and PoOT Operations
# Port: 8095

service:
  name: node-management
  version: "1.0.0"
  description: "Lucid Node Management - Worker node management and PoOT operations"
  cluster_id: "05-node-management-cluster"
  
# Port Configuration
ports:
  node_service: 8095

# Container Configuration
containers:
  node_service:
    name: lucid-node-management
    base_image: "gcr.io/distroless/python3-debian12"
    tag: "latest"
    multi_stage_build: true

# Service Dependencies
dependencies:
  internal:
    - name: "api-gateway"
      url: "http://api-gateway:8080"
      required: true
    - name: "blockchain-core"
      url: "http://blockchain-core:8084"
      required: true
    - name: "tron-payment"
      url: "http://tron-payment:8085"
      required: true
      isolated: true
  external:
    - name: "mongodb"
      url: "mongodb://mongodb:27017/lucid_nodes"
      required: true
    - name: "redis"
      url: "redis://redis:6379/4"
      required: true

# Node Management Configuration
node_management:
  worker_nodes:
    max_nodes: 10000
    registration_timeout: 60
    heartbeat_interval: 30
    offline_timeout: 300
    cleanup_timeout: 3600
  node_lifecycle:
    states:
      - "registering"
      - "active"
      - "idle"
      - "working"
      - "offline"
      - "terminated"
    state_timeout: 300
    auto_cleanup: true
  resource_requirements:
    min_cpu: "1"
    min_memory: "2Gi"
    min_disk: "10Gi"
    min_network: "100Mbps"
    max_cpu: "16"
    max_memory: "64Gi"
    max_disk: "1Ti"
    max_network: "1Gbps"

# Pool Management Configuration
pool_management:
  pools:
    - name: "high_performance"
      min_cpu: "4"
      min_memory: "8Gi"
      min_disk: "100Gi"
      priority: 1
    - name: "standard"
      min_cpu: "2"
      min_memory: "4Gi"
      min_disk: "50Gi"
      priority: 2
    - name: "basic"
      min_cpu: "1"
      min_memory: "2Gi"
      min_disk: "20Gi"
      priority: 3
  pool_assignment:
    strategy: "resource_based"
    load_balancing: true
    auto_scaling: true
    scale_up_threshold: 0.8
    scale_down_threshold: 0.3

# PoOT (Proof of Observation Time) Configuration
poot:
  algorithm: "PoOT"
  scoring:
    observation_time_weight: 0.4
    resource_contribution_weight: 0.3
    network_stability_weight: 0.2
    uptime_weight: 0.1
  validation:
    min_observation_time: 3600  # 1 hour
    max_observation_time: 86400  # 24 hours
    validation_interval: 300  # 5 minutes
    consensus_threshold: 0.67
  rewards:
    base_reward: 100
    bonus_multiplier: 2.0
    penalty_multiplier: 0.5
    distribution_interval: 86400  # 24 hours

# Resource Monitoring Configuration
resource_monitoring:
  metrics_collection:
    interval: 30
    retention: 604800  # 7 days
    compression: true
  monitored_resources:
    cpu:
      enabled: true
      threshold_warning: 80
      threshold_critical: 95
    memory:
      enabled: true
      threshold_warning: 80
      threshold_critical: 95
    disk:
      enabled: true
      threshold_warning: 80
      threshold_critical: 95
    network:
      enabled: true
      threshold_warning: 80
      threshold_critical: 95
  performance_metrics:
    - "cpu_utilization"
    - "memory_utilization"
    - "disk_io"
    - "network_io"
    - "response_time"
    - "throughput"
    - "error_rate"

# Payout Management Configuration
payout_management:
  tron_integration:
    enabled: true
    network: "mainnet"
    usdt_contract: "TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t"
    payout_frequency: "daily"
    batch_size: 100
    timeout: 300
  payout_calculation:
    base_rate: 1.0
    performance_multiplier: true
    uptime_multiplier: true
    quality_multiplier: true
  payout_processing:
    auto_processing: true
    manual_approval: false
    minimum_payout: 1.0
    maximum_payout: 10000.0

# API Configuration
api:
  version: "v1"
  base_path: "/api/v1"
  endpoints:
    nodes:
      - "POST /nodes"
      - "GET /nodes"
      - "GET /nodes/{node_id}"
      - "PUT /nodes/{node_id}"
      - "DELETE /nodes/{node_id}"
      - "POST /nodes/{node_id}/register"
      - "POST /nodes/{node_id}/deregister"
      - "GET /nodes/{node_id}/status"
    pools:
      - "GET /pools"
      - "POST /pools"
      - "GET /pools/{pool_id}"
      - "PUT /pools/{pool_id}"
      - "DELETE /pools/{pool_id}"
      - "GET /pools/{pool_id}/nodes"
      - "POST /pools/{pool_id}/nodes/{node_id}"
      - "DELETE /pools/{pool_id}/nodes/{node_id}"
    resources:
      - "GET /nodes/{node_id}/resources"
      - "GET /nodes/{node_id}/metrics"
      - "GET /nodes/{node_id}/performance"
      - "POST /nodes/{node_id}/resources/update"
    poot:
      - "GET /poot/status"
      - "GET /poot/nodes/{node_id}/score"
      - "POST /poot/nodes/{node_id}/validate"
      - "GET /poot/leaderboard"
      - "GET /poot/consensus/status"
    payouts:
      - "GET /payouts"
      - "GET /payouts/{payout_id}"
      - "POST /payouts/process"
      - "GET /payouts/history"
      - "POST /payouts/{payout_id}/approve"
      - "POST /payouts/{payout_id}/reject"

# Database Configuration
database:
  mongodb:
    uri: "mongodb://mongodb:27017/lucid_nodes"
    database: "lucid_nodes"
    collections:
      - "nodes"
      - "pools"
      - "resources"
      - "poot_scores"
      - "payouts"
      - "metrics"
      - "alerts"
    indexes:
      - "node_id"
      - "pool_id"
      - "user_id"
      - "created_at"
      - "status"
      - "poot_score"
    connection_pool: 20
    timeout: 30
  redis:
    uri: "redis://redis:6379/4"
    database: 4
    use_cases:
      - "node_cache"
      - "poot_scores"
      - "resource_metrics"
      - "payout_queue"
    timeout: 30

# Security Configuration
security:
  authentication:
    required: true
    methods: ["jwt", "certificate"]
    session_timeout: 3600
  authorization:
    rbac_enabled: true
    roles:
      - "node_operator"
      - "pool_manager"
      - "admin"
  encryption:
    data_in_transit: true
    data_at_rest: true
    node_communication: true
  access_control:
    node_isolation: true
    pool_isolation: true
    resource_isolation: true
  audit_logging:
    enabled: true
    events:
      - "node_registered"
      - "node_deregistered"
      - "pool_created"
      - "pool_deleted"
      - "poot_score_calculated"
      - "payout_processed"
      - "resource_alert"

# Performance Configuration
performance:
  max_nodes: 10000
  max_pools: 100
  max_payouts_per_day: 1000
  connection_pool_size: 100
  request_timeout: 30
  response_timeout: 60
  bandwidth_limit: "1Gbps"
  cpu_usage_limit: "90%"
  memory_usage_limit: "90%"

# Logging Configuration
logging:
  level: "INFO"
  format: "json"
  structured: true
  node_events: true
  pool_events: true
  poot_events: true
  payout_events: true
  resource_events: true
  error_events: true
  correlation_id: true

# Health Check Configuration
health_check:
  node_service:
    endpoint: "/api/v1/nodes/health"
    interval: 30
    timeout: 10
    retries: 3
  dependencies:
    - "mongodb"
    - "redis"
    - "blockchain-core"
    - "tron-payment"

# Metrics Configuration
metrics:
  enabled: true
  prometheus:
    enabled: true
    port: 9090
  custom_metrics:
    - "active_nodes"
    - "active_pools"
    - "poot_scores"
    - "payout_processing_rate"
    - "resource_utilization"
    - "node_registration_rate"
    - "pool_assignment_success_rate"
    - "payout_success_rate"

# Monitoring Configuration
monitoring:
  prometheus:
    enabled: true
    port: 9090
    path: "/metrics"
  grafana:
    enabled: true
    dashboard_id: "node-management"
  alerts:
    - name: "node_registration_failure"
      condition: "node_registration_success_rate < 0.9"
      severity: "critical"
    - name: "poot_validation_failure"
      condition: "poot_validation_success_rate < 0.8"
      severity: "warning"
    - name: "payout_processing_failure"
      condition: "payout_success_rate < 0.95"
      severity: "critical"
    - name: "high_resource_usage"
      condition: "resource_utilization > 0.9"
      severity: "warning"

# Deployment Configuration
deployment:
  replicas: 3
  resources:
    requests:
      cpu: "1"
      memory: "2Gi"
    limits:
      cpu: "4"
      memory: "8Gi"
  strategy:
    type: "RollingUpdate"
    rolling_update:
      max_unavailable: 1
      max_surge: 1
  volumes:
    - name: "node_data"
      path: "/data/nodes"
      size: "100Gi"
    - name: "poot_data"
      path: "/data/poot"
      size: "50Gi"
    - name: "payout_data"
      path: "/data/payouts"
      size: "20Gi"

# Environment-specific Overrides
environments:
  development:
    debug: true
    log_level: "DEBUG"
    node_management:
      max_nodes: 100
    performance:
      max_nodes: 100
      
  staging:
    debug: false
    log_level: "INFO"
    node_management:
      max_nodes: 1000
    performance:
      max_nodes: 1000
      
  production:
    debug: false
    log_level: "WARN"
    node_management:
      max_nodes: 10000
    performance:
      max_nodes: 10000
    security:
      enhanced: true

# Validation Rules
validation:
  required_fields:
    - "service.name"
    - "service.version"
    - "ports.node_service"
    - "containers.node_service.base_image"
  port_ranges:
    node_service: [8000, 8999]
  resource_limits:
    cpu_max: "8"
    memory_max: "16Gi"
  security_requirements:
    - "security.authentication.required"
    - "security.encryption.data_in_transit"
    - "security.audit_logging.enabled"
