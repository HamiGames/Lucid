# Database Service Configuration
# This file contains configuration for all database services in the Lucid system

# Service Information
service:
  name: "database"
  version: "1.0.0"
  description: "Database Services for Lucid RDP"
  environment: "${ENVIRONMENT:-development}"

# MongoDB Configuration
mongodb:
  enabled: true
  version: "7.0"
  replica_set: "lucid-rs"
  
  primary:
    host: "${MONGODB_HOST:-localhost}"
    port: "${MONGODB_PORT:-27017}"
    database: "${MONGODB_DATABASE:-lucid}"
    username: "${MONGODB_USERNAME:-lucid}"
    password: "${MONGODB_PASSWORD:-}"
    auth_source: "admin"
  
  secondary:
    host: "${MONGODB_SECONDARY_HOST:-localhost}"
    port: "${MONGODB_SECONDARY_PORT:-27018}"
    database: "${MONGODB_DATABASE:-lucid}"
    username: "${MONGODB_USERNAME:-lucid}"
    password: "${MONGODB_PASSWORD:-}"
    auth_source: "admin"
  
  arbiter:
    host: "${MONGODB_ARBITER_HOST:-localhost}"
    port: "${MONGODB_ARBITER_PORT:-27019}"
    database: "${MONGODB_DATABASE:-lucid}"
    username: "${MONGODB_USERNAME:-lucid}"
    password: "${MONGODB_PASSWORD:-}"
    auth_source: "admin"

  connection:
    pool_size: "${MONGODB_POOL_SIZE:-20}"
    max_idle_time: 30000
    server_selection_timeout: 5000
    connect_timeout: 10000
    socket_timeout: 0
    max_pool_size: 100
    min_pool_size: 0

  collections:
    users:
      indexes:
        - key: { "username": 1 }
          unique: true
        - key: { "email": 1 }
          unique: true
        - key: { "created_at": 1 }
        - key: { "last_login": 1 }
    
    sessions:
      indexes:
        - key: { "session_id": 1 }
          unique: true
        - key: { "user_id": 1 }
        - key: { "created_at": 1 }
        - key: { "expires_at": 1 }
          expireAfterSeconds: 0
    
    blocks:
      indexes:
        - key: { "block_number": 1 }
          unique: true
        - key: { "block_hash": 1 }
          unique: true
        - key: { "timestamp": 1 }
        - key: { "merkle_root": 1 }
    
    transactions:
      indexes:
        - key: { "transaction_id": 1 }
          unique: true
        - key: { "block_number": 1 }
        - key: { "timestamp": 1 }
        - key: { "from_address": 1 }
        - key: { "to_address": 1 }
    
    trust_policies:
      indexes:
        - key: { "policy_id": 1 }
          unique: true
        - key: { "user_id": 1 }
        - key: { "created_at": 1 }
        - key: { "expires_at": 1 }
          expireAfterSeconds: 0

# Redis Configuration
redis:
  enabled: true
  version: "7.0"
  mode: "standalone"
  
  primary:
    host: "${REDIS_HOST:-localhost}"
    port: "${REDIS_PORT:-6379}"
    password: "${REDIS_PASSWORD:-}"
    database: 0
  
  connection:
    pool_size: "${REDIS_POOL_SIZE:-50}"
    max_connections: 1000
    timeout: 5
    retry_on_timeout: true
    retry_on_failure: true
    max_retries: 3

  caching:
    default_ttl: 300
    max_memory: "256mb"
    eviction_policy: "allkeys-lru"
    max_keys: 10000

  sessions:
    ttl: 3600
    key_prefix: "session:"
    serialization: "json"

  rate_limiting:
    ttl: 60
    key_prefix: "rate_limit:"
    max_requests: 100

# Elasticsearch Configuration
elasticsearch:
  enabled: true
  version: "8.11.0"
  
  primary:
    host: "${ELASTICSEARCH_HOST:-localhost}"
    port: "${ELASTICSEARCH_PORT:-9200}"
    username: "${ELASTICSEARCH_USERNAME:-}"
    password: "${ELASTICSEARCH_PASSWORD:-}"
    scheme: "http"
  
  connection:
    timeout: 30
    max_retries: 3
    retry_on_timeout: true
    verify_certs: false
    ssl_show_warn: false

  indices:
    sessions:
      name: "lucid-sessions"
      shards: 1
      replicas: 0
      mapping:
        properties:
          session_id:
            type: "keyword"
          user_id:
            type: "keyword"
          created_at:
            type: "date"
          status:
            type: "keyword"
          duration:
            type: "integer"
    
    logs:
      name: "lucid-logs"
      shards: 1
      replicas: 0
      mapping:
        properties:
          timestamp:
            type: "date"
          level:
            type: "keyword"
          service:
            type: "keyword"
          message:
            type: "text"
          user_id:
            type: "keyword"
    
    metrics:
      name: "lucid-metrics"
      shards: 1
      replicas: 0
      mapping:
        properties:
          timestamp:
            type: "date"
          service:
            type: "keyword"
          metric_name:
            type: "keyword"
          value:
            type: "float"
          tags:
            type: "object"

# Database Health Configuration
health:
  enabled: true
  interval: 30
  timeout: 10
  retries: 3
  
  mongodb:
    check_connection: true
    check_replica_set: true
    check_indexes: true
  
  redis:
    check_connection: true
    check_memory: true
    check_keys: true
  
  elasticsearch:
    check_connection: true
    check_cluster: true
    check_indices: true

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention_days: 30
  compression: true
  encryption: true
  
  mongodb:
    enabled: true
    method: "mongodump"
    options:
      - "--gzip"
      - "--archive"
    storage:
      type: "local"
      path: "/var/backups/lucid/mongodb"
  
  redis:
    enabled: true
    method: "rdb"
    storage:
      type: "local"
      path: "/var/backups/lucid/redis"
  
  elasticsearch:
    enabled: true
    method: "snapshot"
    repository: "lucid-backups"
    storage:
      type: "local"
      path: "/var/backups/lucid/elasticsearch"

# Monitoring Configuration
monitoring:
  enabled: true
  metrics_enabled: true
  health_check_interval: 30
  health_check_timeout: 10
  prometheus_port: 9090
  prometheus_path: "/metrics"

# Logging Configuration
logging:
  level: "${LOG_LEVEL:-INFO}"
  format: "json"
  file: "/mnt/myssd/Lucid/Lucid/logs/database.log"
  max_size: "100MB"
  max_files: 10
  compress: true

# Alerting Configuration
alerting:
  enabled: true
  email:
    smtp_host: "${ALERTING_EMAIL_SMTP_HOST:-}"
    smtp_port: "${ALERTING_EMAIL_SMTP_PORT:-587}"
    smtp_user: "${ALERTING_EMAIL_SMTP_USER:-}"
    smtp_password: "${ALERTING_EMAIL_SMTP_PASSWORD:-}"
    from: "${ALERTING_EMAIL_FROM:-}"
    to: "${ALERTING_EMAIL_TO:-}"

  thresholds:
    connection_errors: 10
    response_time: 1000
    memory_usage: 80
    disk_usage: 90
    replication_lag: 60

# Network Configuration
network:
  interface: "${NETWORK_INTERFACE:-eth0}"
  mtu: 1500
  buffer_size: 65536
  timeout: 30
  keepalive: true

# Container Configuration
container:
  runtime: "docker"
  network: "lucid-network"
  subnet: "172.20.0.0/16"
  gateway: "172.20.0.1"

# Resource Limits
resources:
  mongodb:
    cpu_limit: "4"
    memory_limit: "4Gi"
    cpu_request: "1"
    memory_request: "1Gi"
    storage_limit: "50Gi"
  
  redis:
    cpu_limit: "2"
    memory_limit: "2Gi"
    cpu_request: "0.5"
    memory_request: "512Mi"
    storage_limit: "10Gi"
  
  elasticsearch:
    cpu_limit: "4"
    memory_limit: "4Gi"
    cpu_request: "1"
    memory_request: "1Gi"
    storage_limit: "50Gi"

# Health Checks
health_checks:
  mongodb:
    liveness:
      enabled: true
      command: ["mongosh", "--eval", "db.adminCommand('ping')"]
      initial_delay: 30
      period: 10
      timeout: 5
      failure_threshold: 3
    
    readiness:
      enabled: true
      command: ["mongosh", "--eval", "db.adminCommand('listDatabases')"]
      initial_delay: 5
      period: 5
      timeout: 3
      failure_threshold: 3
  
  redis:
    liveness:
      enabled: true
      command: ["redis-cli", "ping"]
      initial_delay: 30
      period: 10
      timeout: 5
      failure_threshold: 3
    
    readiness:
      enabled: true
      command: ["redis-cli", "info", "server"]
      initial_delay: 5
      period: 5
      timeout: 3
      failure_threshold: 3
  
  elasticsearch:
    liveness:
      enabled: true
      command: ["curl", "-f", "http://localhost:9200/_cluster/health"]
      initial_delay: 30
      period: 10
      timeout: 5
      failure_threshold: 3
    
    readiness:
      enabled: true
      command: ["curl", "-f", "http://localhost:9200/_cat/indices"]
      initial_delay: 5
      period: 5
      timeout: 3
      failure_threshold: 3

# Service Dependencies
dependencies:
  - name: "mongodb"
    host: "mongodb"
    port: 27017
    timeout: 10
  
  - name: "redis"
    host: "redis"
    port: 6379
    timeout: 10
  
  - name: "elasticsearch"
    host: "elasticsearch"
    port: 9200
    timeout: 10

# Environment Variables
environment:
  MONGODB_URI: "mongodb://${MONGODB_USERNAME:-lucid}:${MONGODB_PASSWORD:-}@${MONGODB_HOST:-localhost}:${MONGODB_PORT:-27017}/${MONGODB_DATABASE:-lucid}?authSource=admin"
  REDIS_URL: "redis://${REDIS_HOST:-localhost}:${REDIS_PORT:-6379}"
  ELASTICSEARCH_URL: "http://${ELASTICSEARCH_HOST:-localhost}:${ELASTICSEARCH_PORT:-9200}"

# Service Discovery
discovery:
  enabled: true
  consul:
    host: "consul"
    port: 8500
    service_name: "database"
    service_tags: ["database", "mongodb", "redis", "elasticsearch"]
    health_check_interval: 30

# Load Balancing
load_balancing:
  enabled: false
  algorithm: "round_robin"
  health_check: true
  sticky_sessions: false

# Caching
caching:
  enabled: true
  ttl: 300
  max_size: 1000
  eviction_policy: "LRU"

# Development Configuration
development:
  debug: "${DEBUG:-false}"
  hot_reload: false
  mock_external_services: false
  test_mode: false

# Production Configuration
production:
  debug: false
  hot_reload: false
  mock_external_services: false
  test_mode: false
  ssl_required: true
  cors_origins: ["https://lucid.example.com"]

# Testing Configuration
testing:
  debug: true
  hot_reload: true
  mock_external_services: true
  test_mode: true
  ssl_required: false
  cors_origins: ["*"]
