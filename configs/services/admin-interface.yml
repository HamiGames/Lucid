# Admin Interface Service Configuration
# Cluster: 06-ADMIN-INTERFACE
# Service: Admin Dashboard and System Management
# Port: 8083

service:
  name: admin-interface
  version: "1.0.0"
  description: "Lucid Admin Interface - System management and monitoring dashboard"
  cluster_id: "06-admin-interface-cluster"
  
# Port Configuration
ports:
  admin_ui: 8083

# Container Configuration
containers:
  admin_ui:
    name: lucid-admin-interface
    base_image: "gcr.io/distroless/python3-debian12"
    tag: "latest"
    multi_stage_build: true

# Service Dependencies
dependencies:
  internal:
    - name: "api-gateway"
      url: "http://api-gateway:8080"
      required: true
    - name: "blockchain-core"
      url: "http://blockchain-core:8084"
      required: true
    - name: "session-management"
      url: "http://session-management:8087"
      required: true
    - name: "rdp-services"
      url: "http://rdp-services:8090"
      required: true
    - name: "node-management"
      url: "http://node-management:8095"
      required: true
    - name: "auth-service"
      url: "http://auth-service:8089"
      required: true
  external:
    - name: "mongodb"
      url: "mongodb://mongodb:27017/lucid_admin"
      required: true
    - name: "redis"
      url: "redis://redis:6379/5"
      required: true

# Admin Dashboard Configuration
admin_dashboard:
  ui:
    framework: "html/css/js"
    responsive: true
    theme: "dark"
    charts: "chart.js"
    real_time_updates: true
  dashboard_sections:
    - name: "system_overview"
      title: "System Overview"
      widgets:
        - "system_health"
        - "active_users"
        - "active_sessions"
        - "resource_usage"
    - name: "blockchain_status"
      title: "Blockchain Status"
      widgets:
        - "block_height"
        - "consensus_status"
        - "transaction_volume"
        - "network_health"
    - name: "session_management"
      title: "Session Management"
      widgets:
        - "active_sessions"
        - "session_metrics"
        - "storage_usage"
        - "processing_queue"
    - name: "rdp_services"
      title: "RDP Services"
      widgets:
        - "active_servers"
        - "connection_stats"
        - "resource_monitoring"
        - "server_health"
    - name: "node_management"
      title: "Node Management"
      widgets:
        - "active_nodes"
        - "poot_scores"
        - "payout_status"
        - "pool_distribution"
    - name: "user_management"
      title: "User Management"
      widgets:
        - "user_registrations"
        - "authentication_stats"
        - "session_activity"
        - "security_events"

# System Management Configuration
system_management:
  system_controls:
    - name: "emergency_lockdown"
      description: "Emergency system lockdown"
      requires_confirmation: true
      impact: "critical"
    - name: "system_shutdown"
      description: "Graceful system shutdown"
      requires_confirmation: true
      impact: "critical"
    - name: "service_restart"
      description: "Restart specific services"
      requires_confirmation: false
      impact: "medium"
    - name: "maintenance_mode"
      description: "Enable maintenance mode"
      requires_confirmation: false
      impact: "medium"
  monitoring:
    real_time_metrics: true
    alert_management: true
    log_viewing: true
    performance_analysis: true
  configuration:
    system_settings: true
    service_configs: true
    security_settings: true
    backup_settings: true

# RBAC (Role-Based Access Control) Configuration
rbac:
  roles:
    - name: "super_admin"
      description: "Full system access"
      permissions:
        - "system_control"
        - "user_management"
        - "service_management"
        - "security_management"
        - "audit_access"
    - name: "admin"
      description: "Administrative access"
      permissions:
        - "user_management"
        - "service_monitoring"
        - "configuration_access"
        - "audit_access"
    - name: "operator"
      description: "Operational access"
      permissions:
        - "service_monitoring"
        - "basic_controls"
        - "log_access"
    - name: "viewer"
      description: "Read-only access"
      permissions:
        - "dashboard_view"
        - "metrics_view"
        - "log_view"
  permissions:
    - "system_control"
    - "user_management"
    - "service_management"
    - "security_management"
    - "audit_access"
    - "service_monitoring"
    - "configuration_access"
    - "basic_controls"
    - "log_access"
    - "dashboard_view"
    - "metrics_view"
    - "log_view"

# Audit Logging Configuration
audit_logging:
  enabled: true
  events:
    - "user_login"
    - "user_logout"
    - "system_control_used"
    - "configuration_changed"
    - "service_restarted"
    - "emergency_actions"
    - "security_events"
    - "data_access"
  retention:
    days: 365
    compression: true
    encryption: true
  export:
    formats: ["json", "csv", "pdf"]
    scheduled: true
    frequency: "weekly"

# Emergency Controls Configuration
emergency_controls:
  lockdown:
    enabled: true
    triggers:
      - "security_breach"
      - "system_overload"
      - "manual_activation"
    actions:
      - "disable_user_access"
      - "stop_new_sessions"
      - "notify_administrators"
      - "log_emergency_event"
  shutdown:
    enabled: true
    graceful: true
    timeout: 300
    notifications: true
  maintenance:
    enabled: true
    message: "System maintenance in progress"
    redirect_url: "/maintenance"
    allowed_ips: ["127.0.0.1", "::1"]

# API Configuration
api:
  version: "v1"
  base_path: "/api/v1"
  endpoints:
    dashboard:
      - "GET /dashboard/overview"
      - "GET /dashboard/metrics"
      - "GET /dashboard/health"
      - "GET /dashboard/alerts"
    users:
      - "GET /users"
      - "GET /users/{user_id}"
      - "PUT /users/{user_id}"
      - "DELETE /users/{user_id}"
      - "POST /users/{user_id}/suspend"
      - "POST /users/{user_id}/activate"
    sessions:
      - "GET /sessions"
      - "GET /sessions/{session_id}"
      - "DELETE /sessions/{session_id}"
      - "GET /sessions/{session_id}/logs"
    blockchain:
      - "GET /blockchain/status"
      - "GET /blockchain/blocks"
      - "GET /blockchain/transactions"
      - "POST /blockchain/consensus/trigger"
    nodes:
      - "GET /nodes"
      - "GET /nodes/{node_id}"
      - "POST /nodes/{node_id}/restart"
      - "DELETE /nodes/{node_id}"
    system:
      - "GET /system/status"
      - "POST /system/lockdown"
      - "POST /system/shutdown"
      - "POST /system/maintenance"
      - "GET /system/logs"
      - "GET /system/metrics"
    security:
      - "GET /security/events"
      - "GET /security/alerts"
      - "POST /security/actions"
      - "GET /security/audit"

# Database Configuration
database:
  mongodb:
    uri: "mongodb://mongodb:27017/lucid_admin"
    database: "lucid_admin"
    collections:
      - "admin_users"
      - "audit_logs"
      - "system_events"
      - "security_events"
      - "dashboard_configs"
      - "rbac_roles"
      - "emergency_actions"
    indexes:
      - "user_id"
      - "event_type"
      - "timestamp"
      - "severity"
      - "action_type"
    connection_pool: 20
    timeout: 30
  redis:
    uri: "redis://redis:6379/5"
    database: 5
    use_cases:
      - "dashboard_cache"
      - "metrics_cache"
      - "session_state"
      - "alert_queue"
    timeout: 30

# Security Configuration
security:
  authentication:
    required: true
    methods: ["jwt", "certificate", "hardware_wallet"]
    session_timeout: 3600
    mfa_required: true
  authorization:
    rbac_enabled: true
    permission_validation: true
    action_authorization: true
  encryption:
    data_in_transit: true
    data_at_rest: true
    sensitive_data: true
  access_control:
    ip_whitelist: true
    time_based_access: true
    location_based_access: true
  audit_logging:
    enabled: true
    comprehensive: true
    real_time: true
    immutable: true

# Performance Configuration
performance:
  max_concurrent_users: 100
  max_dashboard_updates: 1000
  connection_pool_size: 50
  request_timeout: 30
  response_timeout: 60
  bandwidth_limit: "1Gbps"
  cpu_usage_limit: "80%"
  memory_usage_limit: "80%"
  caching:
    enabled: true
    ttl: 300
    max_size: "1GB"

# Logging Configuration
logging:
  level: "INFO"
  format: "json"
  structured: true
  admin_events: true
  system_events: true
  security_events: true
  user_events: true
  error_events: true
  correlation_id: true
  sensitive_data_filtering: true

# Health Check Configuration
health_check:
  admin_ui:
    endpoint: "/api/v1/system/health"
    interval: 30
    timeout: 10
    retries: 3
  dependencies:
    - "mongodb"
    - "redis"
    - "api-gateway"
    - "blockchain-core"
    - "session-management"
    - "rdp-services"
    - "node-management"
    - "auth-service"

# Metrics Configuration
metrics:
  enabled: true
  prometheus:
    enabled: true
    port: 9090
  custom_metrics:
    - "admin_users_active"
    - "dashboard_views"
    - "system_controls_used"
    - "emergency_actions"
    - "audit_events"
    - "security_events"
    - "system_health_score"
    - "user_activity_rate"

# Monitoring Configuration
monitoring:
  prometheus:
    enabled: true
    port: 9090
    path: "/metrics"
  grafana:
    enabled: true
    dashboard_id: "admin-interface"
  alerts:
    - name: "unauthorized_access_attempt"
      condition: "unauthorized_access_attempts > 5"
      severity: "critical"
    - name: "emergency_action_used"
      condition: "emergency_actions_count > 0"
      severity: "critical"
    - name: "system_health_degraded"
      condition: "system_health_score < 0.8"
      severity: "warning"
    - name: "high_admin_activity"
      condition: "admin_activity_rate > 100"
      severity: "info"

# Deployment Configuration
deployment:
  replicas: 2
  resources:
    requests:
      cpu: "1"
      memory: "2Gi"
    limits:
      cpu: "4"
      memory: "8Gi"
  strategy:
    type: "RollingUpdate"
    rolling_update:
      max_unavailable: 1
      max_surge: 1
  volumes:
    - name: "admin_data"
      path: "/data/admin"
      size: "50Gi"
    - name: "audit_logs"
      path: "/data/audit"
      size: "100Gi"
    - name: "ssl_certs"
      path: "/certs"
      size: "100Mi"

# Environment-specific Overrides
environments:
  development:
    debug: true
    log_level: "DEBUG"
    security:
      mfa_required: false
    performance:
      max_concurrent_users: 10
      
  staging:
    debug: false
    log_level: "INFO"
    security:
      mfa_required: true
    performance:
      max_concurrent_users: 50
      
  production:
    debug: false
    log_level: "WARN"
    security:
      mfa_required: true
      enhanced: true
    performance:
      max_concurrent_users: 100
    audit_logging:
      comprehensive: true
      immutable: true

# Validation Rules
validation:
  required_fields:
    - "service.name"
    - "service.version"
    - "ports.admin_ui"
    - "containers.admin_ui.base_image"
  port_ranges:
    admin_ui: [8000, 8999]
  resource_limits:
    cpu_max: "8"
    memory_max: "16Gi"
  security_requirements:
    - "security.authentication.required"
    - "security.authorization.rbac_enabled"
    - "security.encryption.data_in_transit"
    - "audit_logging.enabled"
