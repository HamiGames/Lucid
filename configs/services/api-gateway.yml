# API Gateway Service Configuration
# Cluster: 01-API-GATEWAY
# Service: API Gateway Cluster
# Port: 8080 (HTTP), 8081 (HTTPS)

service:
  name: api-gateway
  version: "1.0.0"
  description: "Lucid API Gateway - Entry point and routing layer"
  cluster_id: "01-api-gateway-cluster"
  
# Port Configuration
ports:
  http: 8080
  https: 8081
  auth: 8082
  rate_limiter: 8083

# Container Configuration
container:
  name: lucid-api-gateway
  base_image: "gcr.io/distroless/python3-debian12"
  tag: "latest"
  multi_stage_build: true
  
# Service Dependencies
dependencies:
  internal:
    - name: "blockchain-core"
      url: "http://blockchain-core:8084"
      required: true
    - name: "session-management"
      url: "http://session-management:8085"
      required: true
    - name: "auth-service"
      url: "http://auth-service:8089"
      required: true
    - name: "tron-payment"
      url: "http://tron-payment:8085"
      required: false
      isolated: true
  external:
    - name: "mongodb"
      url: "mongodb://mongodb:27017/lucid_gateway"
      required: true
    - name: "redis"
      url: "redis://redis:6379/0"
      required: true

# API Configuration
api:
  version: "v1"
  base_path: "/api/v1"
  cors:
    origins: ["http://localhost:3000", "https://lucid.onion"]
    allow_credentials: true
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    headers: ["*"]
  
# Authentication Configuration
authentication:
  jwt:
    secret_key: "${JWT_SECRET_KEY}"
    algorithm: "HS256"
    access_token_expire_minutes: 15
    refresh_token_expire_days: 7
  magic_link:
    enabled: true
    expiry_minutes: 15
  totp:
    enabled: true
    issuer: "Lucid"
  hardware_wallet:
    enabled: true
    supported: ["ledger", "trezor", "keepkey"]

# Rate Limiting Configuration
rate_limiting:
  enabled: true
  tiers:
    public:
      requests_per_minute: 100
      burst_size: 200
    authenticated:
      requests_per_minute: 1000
      burst_size: 2000
    admin:
      requests_per_minute: 10000
      burst_size: 20000
  storage: "redis"
  redis_url: "redis://redis:6379/1"

# Backend Service Proxying
proxy:
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    recovery_timeout: 30
    timeout: 10
  load_balancing:
    strategy: "round_robin"
    health_check_interval: 30
  retry:
    max_attempts: 3
    backoff_factor: 2

# SSL/TLS Configuration
ssl:
  enabled: true
  cert_path: "/certs/api-gateway.crt"
  key_path: "/certs/api-gateway.key"
  protocols: ["TLSv1.2", "TLSv1.3"]
  ciphers: "ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS"

# Logging Configuration
logging:
  level: "INFO"
  format: "json"
  structured: true
  request_logging: true
  response_logging: true
  sensitive_data_filtering: true
  correlation_id: true

# Health Check Configuration
health_check:
  endpoint: "/api/v1/meta/health"
  interval: 30
  timeout: 10
  retries: 3
  dependencies:
    - "mongodb"
    - "redis"
    - "auth-service"

# Metrics Configuration
metrics:
  enabled: true
  endpoint: "/api/v1/meta/metrics"
  prometheus:
    enabled: true
    port: 9090
  custom_metrics:
    - "request_rate"
    - "response_time"
    - "error_rate"
    - "active_connections"

# Performance Configuration
performance:
  max_connections: 1000
  connection_timeout: 30
  request_timeout: 60
  keep_alive: true
  keep_alive_timeout: 65
  max_request_size: "100MB"
  max_response_size: "100MB"

# Security Configuration
security:
  request_validation: true
  response_validation: true
  input_sanitization: true
  sql_injection_protection: true
  xss_protection: true
  csrf_protection: true
  security_headers:
    - "X-Content-Type-Options: nosniff"
    - "X-Frame-Options: DENY"
    - "X-XSS-Protection: 1; mode=block"
    - "Strict-Transport-Security: max-age=31536000; includeSubDomains"

# Environment-specific Overrides
environments:
  development:
    debug: true
    log_level: "DEBUG"
    rate_limiting:
      enabled: false
    ssl:
      enabled: false
      
  staging:
    debug: false
    log_level: "INFO"
    rate_limiting:
      enabled: true
    ssl:
      enabled: true
      
  production:
    debug: false
    log_level: "WARN"
    rate_limiting:
      enabled: true
    ssl:
      enabled: true
    security:
      enhanced: true

# Monitoring Configuration
monitoring:
  prometheus:
    enabled: true
    port: 9090
    path: "/metrics"
  grafana:
    enabled: true
    dashboard_id: "api-gateway"
  alerts:
    - name: "high_error_rate"
      condition: "error_rate > 0.05"
      severity: "warning"
    - name: "high_response_time"
      condition: "response_time_p95 > 1000"
      severity: "warning"
    - name: "service_down"
      condition: "up == 0"
      severity: "critical"

# Deployment Configuration
deployment:
  replicas: 3
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "2"
      memory: "4Gi"
  strategy:
    type: "RollingUpdate"
    rolling_update:
      max_unavailable: 1
      max_surge: 1
  health_check:
    liveness:
      path: "/api/v1/meta/health"
      initial_delay: 30
      period: 10
    readiness:
      path: "/api/v1/meta/health"
      initial_delay: 5
      period: 5

# Network Configuration
network:
  service_mesh:
    enabled: true
    sidecar: "envoy"
  discovery:
    enabled: true
    consul_url: "http://consul:8500"
  mTLS:
    enabled: true
    cert_path: "/certs/mtls.crt"
    key_path: "/certs/mtls.key"
    ca_path: "/certs/ca.crt"

# Validation Rules
validation:
  required_fields:
    - "service.name"
    - "service.version"
    - "ports.http"
    - "ports.https"
    - "container.base_image"
  port_ranges:
    http: [8000, 8999]
    https: [8000, 8999]
  resource_limits:
    cpu_max: "4"
    memory_max: "8Gi"
  security_requirements:
    - "ssl.enabled"
    - "authentication.jwt.secret_key"
    - "rate_limiting.enabled"
