# GUI Docker Manager Service Configuration
# Manages Docker containers from Electron GUI
# Implements access control based on user roles

service:
  name: gui-docker-manager
  version: "1.0.0"
  description: "Docker container management service for Electron GUI"
  cluster: gui-integration
  phase: gui

# Docker Configuration
docker:
  host: "unix:///var/run/docker.sock"
  api_version: "1.40"
  timeout: 60000
  retry_attempts: 3
  retry_delay: 2000

# Access Control Configuration
access_control:
  enabled: true
  
  # User Role Permissions
  roles:
    user:
      level: "user"
      permissions:
        - "read:container_status"
        - "read:container_logs"
        - "read:system_info"
      services: []
      docker_commands:
        - "ps"
        - "logs"
        - "inspect"
        - "stats"
    
    developer:
      level: "developer"
      permissions:
        - "read:container_status"
        - "read:container_logs"
        - "read:system_info"
        - "start:foundation_services"
        - "stop:foundation_services"
        - "start:core_services"
        - "stop:core_services"
        - "start:application_services"
        - "stop:application_services"
      services:
        - "foundation"
        - "core"
        - "application"
      docker_commands:
        - "ps"
        - "logs"
        - "inspect"
        - "stats"
        - "start"
        - "stop"
        - "restart"
        - "exec"
    
    admin:
      level: "admin"
      permissions:
        - "*"
      services:
        - "foundation"
        - "core"
        - "application"
        - "support"
      docker_commands:
        - "*"

# Service Groups Configuration
service_groups:
  foundation:
    name: "Foundation Services"
    description: "Database, authentication, and core infrastructure"
    compose_file: "configs/docker/docker-compose.foundation.yml"
    services:
      - "lucid-mongodb"
      - "lucid-redis"
      - "lucid-elasticsearch"
      - "lucid-auth-service"
      - "lucid-storage-database"
    dependencies: []
    startup_order: 1

  core:
    name: "Core Services"
    description: "API gateway, blockchain core, and service mesh"
    compose_file: "configs/docker/docker-compose.core.yml"
    services:
      - "lucid-api-gateway"
      - "lucid-blockchain-core"
      - "lucid-service-mesh-controller"
    dependencies:
      - "foundation"
    startup_order: 2

  application:
    name: "Application Services"
    description: "Session management, RDP services, and node management"
    compose_file: "configs/docker/docker-compose.application.yml"
    services:
      - "lucid-session-pipeline"
      - "lucid-node-management"
    dependencies:
      - "foundation"
      - "core"
    startup_order: 3

  support:
    name: "Support Services"
    description: "Admin interface and TRON payment services"
    compose_file: "configs/docker/docker-compose.support.yml"
    services:
      - "lucid-admin-interface"
      - "lucid-tron-client"
    dependencies:
      - "foundation"
      - "core"
      - "application"
    startup_order: 4

  gui:
    name: "GUI Integration Services"
    description: "GUI-specific services and integration"
    compose_file: "configs/docker/docker-compose.gui-integration.yml"
    services:
      - "lucid-gui-api-bridge"
      - "lucid-gui-docker-manager"
      - "lucid-gui-tor-manager"
      - "lucid-gui-hardware-wallet"
    dependencies:
      - "foundation"
      - "core"
    startup_order: 5

# Docker Compose Management
compose_management:
  enabled: true
  compose_files_directory: "configs/docker/"
  default_project_name: "lucid"
  environment_files:
    - "configs/environment/.env.gui"
    - "configs/environment/.env.secure"
  
  # Service startup configuration
  startup:
    parallel_startup: true
    max_parallel_services: 3
    startup_timeout: 300  # seconds
    health_check_timeout: 120  # seconds
    
  # Service shutdown configuration
  shutdown:
    graceful_shutdown: true
    shutdown_timeout: 60  # seconds
    force_shutdown_timeout: 30  # seconds

# Container Management
container_management:
  # Container lifecycle operations
  lifecycle:
    start:
      timeout: 60  # seconds
      retry_attempts: 3
      retry_delay: 5  # seconds
    
    stop:
      timeout: 30  # seconds
      retry_attempts: 3
      retry_delay: 5  # seconds
    
    restart:
      timeout: 90  # seconds
      retry_attempts: 3
      retry_delay: 5  # seconds
    
    remove:
      force: false
      remove_volumes: false
      timeout: 30  # seconds

  # Container monitoring
  monitoring:
    enabled: true
    health_check_interval: 30  # seconds
    stats_collection_interval: 10  # seconds
    log_tail_lines: 100
    
  # Resource limits
  resource_limits:
    enabled: true
    default_memory_limit: "2G"
    default_cpu_limit: "2.0"
    max_memory_limit: "8G"
    max_cpu_limit: "8.0"

# Health Check Configuration
health_checks:
  enabled: true
  interval: 30  # seconds
  timeout: 10  # seconds
  retries: 3
  start_period: 60  # seconds
  
  # Custom health check commands
  custom_checks:
    lucid-mongodb:
      command: ["mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 30
      timeout: 10
      retries: 3
    
    lucid-redis:
      command: ["redis-cli", "ping"]
      interval: 30
      timeout: 10
      retries: 3
    
    lucid-api-gateway:
      command: ["curl", "-f", "http://localhost:8080/health"]
      interval: 30
      timeout: 10
      retries: 3

# Logging Configuration
logging:
  level: "info"
  format: "json"
  file: "/app/logs/gui-docker-manager.log"
  max_size: "10MB"
  max_files: 5
  
  # Docker log collection
  docker_logs:
    enabled: true
    log_driver: "json-file"
    log_options:
      max_size: "10m"
      max_file: "3"
    
    # Log filtering
    filters:
      exclude_containers: ["lucid-gui-docker-manager"]  # Avoid recursion
      include_labels: ["com.lucid.service"]

# Monitoring Configuration
monitoring:
  enabled: true
  metrics:
    enabled: true
    port: 9091
    path: "/metrics"
    interval: "30s"
    
    # Custom metrics
    custom_metrics:
      - name: "lucid_containers_running"
        type: "gauge"
        description: "Number of Lucid containers running"
      
      - name: "lucid_services_healthy"
        type: "gauge"
        description: "Number of healthy Lucid services"
      
      - name: "docker_operations_total"
        type: "counter"
        description: "Total Docker operations performed"
        labels: ["operation", "result"]

  # Alerting
  alerts:
    enabled: true
    rules:
      - alert: "ContainerDown"
        expr: "lucid_containers_running == 0"
        for: "1m"
        labels:
          severity: "critical"
        annotations:
          summary: "All Lucid containers are down"
      
      - alert: "ServiceUnhealthy"
        expr: "lucid_services_healthy < 5"
        for: "2m"
        labels:
          severity: "warning"
        annotations:
          summary: "Some Lucid services are unhealthy"

# Security Configuration
security:
  # Docker socket access
  docker_socket:
    read_only: true
    user: "65532:65532"  # nonroot user
    
  # API security
  api_security:
    authentication_required: true
    rate_limiting_enabled: true
    max_requests_per_minute: 60
    
  # Container security
  container_security:
    privileged_containers_allowed: false
    host_network_access_allowed: false
    host_volume_mounts_allowed: true  # For GUI data persistence

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention_days: 7
  
  # Backup targets
  targets:
    - name: "container_configs"
      path: "configs/docker/"
      compress: true
    
    - name: "service_logs"
      path: "/app/logs/"
      compress: true
    
    - name: "docker_volumes"
      path: "/var/lib/docker/volumes/"
      compress: true
      exclude_patterns: ["lucid-gui-*"]  # Exclude GUI-specific volumes

# Error Handling Configuration
error_handling:
  enabled: true
  log_errors: true
  error_format: "json"
  include_stack_trace: false
  
  # Custom error handlers
  custom_errors:
    - code: "LUCID_ERR_5001"
      message: "Docker daemon connection failed"
      status: 503
    
    - code: "LUCID_ERR_5002"
      message: "Container operation failed"
      status: 500
    
    - code: "LUCID_ERR_5003"
      message: "Service group not found"
      status: 404
    
    - code: "LUCID_ERR_5004"
      message: "Insufficient permissions for operation"
      status: 403

# Configuration Validation
validation:
  enabled: true
  strict_mode: true
  validate_docker_config: true
  validate_compose_files: true
