# Multi-stage build for distroless container
# File: payment-systems/tron/Dockerfile.trx-staking
# Purpose: Distroless container build for Lucid TRX Staking Service
# Build Host: Windows 11 console
# Target Host: Raspberry Pi (via SSH)
# Phase 4: Support Services
# Aligned with essentials.md: pickme/lucid-trx-staking:latest-arm64, ports 8096,8105, IP 172.20.0.31
# Network Configuration: lucid-pi-network (172.20.0.0/16)
# Fully aligned with plan/constants/ directory requirements

FROM --platform=linux/arm64 python:3.12-slim-bookworm AS builder

# Set build arguments (aligned with path_plan.md)
ARG BUILDPLATFORM
ARG TARGETPLATFORM=linux/arm64
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0
ARG GIT_COMMIT=unknown
ARG PYTHON_VERSION=3.12

# Set environment variables for pip optimization (aligned with path_plan.md)
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    PIP_PREFER_BINARY=1

# Install build dependencies with apt cache mount (BuildKit optimization)
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    make \
    pkg-config \
    libffi-dev \
    libssl-dev \
    libxml2-dev \
    libxslt1-dev \
    zlib1g-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Create virtual environment
RUN python -m venv /opt/venv

# Upgrade pip with cache mount
RUN --mount=type=cache,target=/root/.cache/pip \
    /opt/venv/bin/pip install --upgrade pip setuptools wheel

# Copy requirements and install dependencies
COPY requirements.txt ./requirements.txt
COPY requirements-prod.txt ./requirements-prod.txt

# Install Python dependencies with cache mount and optimizations
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/pip/wheels \
    /opt/venv/bin/pip install --prefer-binary -r requirements.txt -r requirements-prod.txt

# Copy application source code
COPY services/trx_staking.py ./services/trx_staking.py
COPY services/__init__.py ./services/__init__.py
COPY config.py ./config.py
COPY main.py ./main.py

# Compile Python bytecode
RUN python -m compileall -b .

# Production stage - Distroless
FROM --platform=linux/arm64 gcr.io/distroless/python3-debian12:nonroot

# Set metadata labels (aligned with essentials.md)
LABEL maintainer="Lucid Development Team" \
      org.opencontainers.image.title="Lucid TRX Staking" \
      org.opencontainers.image.description="Distroless TRX staking service for Lucid platform" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.vendor="Lucid" \
      org.opencontainers.image.licenses="MIT" \
      lucid.service="trx-staking" \
      lucid.type="distroless" \
      lucid.platform="arm64" \
      lucid.security="hardened" \
      lucid.phase="4" \
      lucid.cluster="payment"

# Set environment variables (aligned with essentials.md and path_plan.md)
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    LUCID_ENV=production \
    LUCID_PLATFORM=arm64 \
    PROJECT_ROOT=/mnt/myssd/Lucid/Lucid \
    PROJECT_NAME=Lucid \
    PROJECT_VERSION=0.1.0

# Locale and Timezone Configuration (distroless-compatible: C.UTF-8)
ENV TZ=UTC \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    COUNTRY=US

# Service Configuration (aligned with Network_conig_requirements.md)
ENV SERVICE_NAME=trx-staking \
    CONTAINER_NAME=lucid-trx-staking \
    HOSTNAME=lucid-trx-staking \
    SERVICE_PORT=8096 \
    TRX_STAKING_PORT=8096 \
    HOST=0.0.0.0 \
    HEALTHCHECK_PORT=8096 \
    HEALTHCHECK_PATH=/health

# Network configuration (aligned with Network_conig_requirements.md lines 1467-1504)
ENV TRX_STAKING_URL=http://lucid-trx-staking:8096 \
    TRX_STAKING_HOST=172.20.0.31

# TRON Configuration (aligned with Network_conig_requirements.md)
ENV TRON_NETWORK=mainnet \
    TRON_RPC_URL=https://api.trongrid.io \
    STAKING_CONTRACT_ADDRESS=TLyqzVGLV1srkB7dToTAEqgDSfPtXRJZYH \
    TRON_CLIENT_URL=http://lucid-tron-client:8091

# Staking Configuration (aligned with Network_conig_requirements.md)
ENV MIN_STAKING_AMOUNT=1000.0 \
    STAKING_DURATION_DAYS=3 \
    STAKING_REWARD_RATE=0.1

# Database connections (aligned with Network_conig_requirements.md)
ENV MONGODB_URI=mongodb://lucid:${MONGODB_PASSWORD}@lucid-mongodb:27017/lucid?authSource=admin \
    REDIS_URL=redis://lucid-redis:6379/0

# Logging configuration (aligned with path_plan.md)
ENV LOG_LEVEL=INFO \
    DEBUG=false \
    LOG_FORMAT=json

# Network Configuration (per network_defs.md)
ENV LUCID_PI_NETWORK=lucid-pi-network \
    LUCID_PI_SUBNET=172.20.0.0/16 \
    LUCID_PI_GATEWAY=172.20.0.1

# Virtual environment path
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy virtual environment from builder (with proper ownership for nonroot user)
COPY --from=builder --chown=nonroot:nonroot /opt/venv /opt/venv

# Copy application code from builder
COPY --from=builder --chown=nonroot:nonroot /app /app

# Health check (aligned with Network_conig_requirements.md)
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD ["/opt/venv/bin/python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8096/health').read()"]

# Expose ports (aligned with essentials.md: ports=8096:8096,8105:8105)
EXPOSE 8096 8105

# Run the application (FastAPI - correct entrypoint: main:app)
CMD ["/opt/venv/bin/python3", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8096", "--workers", "1"]