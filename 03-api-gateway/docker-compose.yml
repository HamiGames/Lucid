# Docker Compose Configuration for Lucid API Gateway
# File: 03-api-gateway/docker-compose.yml
# Purpose: Local development and production deployment setup
# Note: TRON payment service is isolated from lucid_blocks blockchain



services:
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILDPLATFORM: linux/amd64
        TARGETPLATFORM: linux/amd64
        BUILD_DATE: ${BUILD_DATE:-2025-01-10T00:00:00Z}
        VERSION: ${VERSION:-1.0.0}
    image: lucid-api-gateway:latest
    container_name: lucid-api-gateway
    restart: unless-stopped
    
    env_file:
      - ../configs/environment/.env.foundation
      - ../configs/environment/.env.core
    
    ports:
      - "8080:8080"  # HTTP
      - "8081:8081"  # HTTPS
    
    environment:
      # Service Configuration
      - SERVICE_NAME=api-gateway
      - API_VERSION=v1
      - DEBUG=false
      - ENVIRONMENT=production
      
      # Port Configuration
      - HTTP_PORT=8080
      - HTTPS_PORT=8081
      
      # Security Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=15
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      
      # Database Configuration
      - MONGODB_URI=mongodb://mongodb:27017/lucid_gateway
      - MONGODB_DATABASE=lucid_gateway
      - REDIS_URL=redis://redis:6379/0
      
      # Backend Service URLs
      # Note: blockchain_core uses lucid_blocks (on-chain system)
      - BLOCKCHAIN_CORE_URL=http://lucid-blocks:8084
      - SESSION_MANAGEMENT_URL=http://session-management:8085
      - AUTH_SERVICE_URL=http://auth-service:8086
      # TRON is isolated payment service, NOT part of lucid_blocks
      - TRON_PAYMENT_URL=http://tron-payment:8087
      
      # Rate Limiting Configuration
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS_PER_MINUTE=1000
      - RATE_LIMIT_BURST_SIZE=2000
      
      # SSL Configuration
      - SSL_ENABLED=true
      - SSL_CERT_PATH=/certs/api-gateway.crt
      - SSL_KEY_PATH=/certs/api-gateway.key
      
      # CORS Configuration
      - ALLOWED_HOSTS=api.lucid-blockchain.org,localhost
      - CORS_ORIGINS=https://app.lucid-blockchain.org,http://localhost:3000
      
      # Logging Configuration
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      
      # Monitoring Configuration
      - METRICS_ENABLED=true
      - HEALTH_CHECK_INTERVAL=30
    
    volumes:
      - ./certs:/certs:ro
      - ./logs:/app/logs
    
    depends_on:
      - mongodb
      - redis
    
    networks:
      - lucid-network
    
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/api/v1/meta/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: lucid-mongodb
    restart: unless-stopped
    env_file:
      - ../configs/environment/.env.foundation
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=lucid_gateway
    volumes:
      - mongodb_data:/data/db
      - ./database/init_collections.js:/docker-entrypoint-initdb.d/init_collections.js:ro
    networks:
      - lucid-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: lucid-redis
    restart: unless-stopped
    env_file:
      - ../configs/environment/.env.foundation
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - lucid-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  lucid-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

