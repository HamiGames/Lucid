# LUCID API GATEWAY - SPEC-4 Stage 0 Core Support (Distroless)
# Professional NGINX reverse proxy for Pi deployment with distroless security
# Multi-platform build for ARM64 Pi and AMD64 development

# syntax=docker/dockerfile:1.7
ARG NGINX_TAG=1.28-alpine
FROM nginx:${NGINX_TAG} AS gateway-builder

# Metadata for professional container management
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="NGINX API gateway for Lucid sessions (Distroless)" \
      com.lucid.plane="ops" \
      com.lucid.service="api-gateway" \
      com.lucid.expose="8080"

# Gateway configuration environment
ENV API_UPSTREAM="lucid_api:8081" \
    CLIENT_MAX_BODY_SIZE="16m" \
    GATEWAY_PORT="8080" \
    NGINX_WORKER_PROCESSES="1" \
    NGINX_WORKER_CONNECTIONS="1024" \
    NGINX_KEEPALIVE_TIMEOUT="65" \
    NGINX_CLIENT_HEADER_TIMEOUT="60" \
    NGINX_CLIENT_BODY_TIMEOUT="60" \
    NGINX_SEND_TIMEOUT="60"

# Install essential tools and create non-root user
RUN apk add --no-cache \
        curl \
        ca-certificates \
        bash \
        jq \
        netcat-openbsd \
        su-exec \
    && rm -rf /var/cache/apk/* \
    && adduser -D -s /bin/bash lucid

# Create optimized nginx configuration for Pi
RUN mkdir -p /etc/nginx/templates /var/cache/nginx /var/run/nginx \
    && chown -R lucid:lucid /var/cache/nginx /var/run/nginx

# Professional nginx configuration template
RUN cat > /etc/nginx/templates/lucid.conf.template <<'EOF'
# Lucid Gateway â€” Optimized for Raspberry Pi deployment
upstream lucid_api_backend {
    server ${API_UPSTREAM} max_fails=3 fail_timeout=30s;
    keepalive 8;
}

server {
    listen ${GATEWAY_PORT} default_server;
    server_name _;
    
    # Pi-optimized settings
    client_max_body_size ${CLIENT_MAX_BODY_SIZE};
    client_header_timeout ${NGINX_CLIENT_HEADER_TIMEOUT};
    client_body_timeout ${NGINX_CLIENT_BODY_TIMEOUT};
    send_timeout ${NGINX_SEND_TIMEOUT};
    keepalive_timeout ${NGINX_KEEPALIVE_TIMEOUT};
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Health endpoint with enhanced monitoring
    location /health {
        proxy_pass http://lucid_api_backend/health;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        access_log off;
    }
    
    # Main API proxy with Pi-optimized settings
    location / {
        proxy_pass http://lucid_api_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Gateway-Version "1.0.0";
        
        # Timeouts optimized for Pi performance
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }
    
    # Gateway status endpoint
    location /gateway/status {
        access_log off;
        return 200 '{"status":"healthy","service":"lucid-api-gateway","version":"1.0.0"}';
        add_header Content-Type application/json;
    }
}
EOF

# Create optimized nginx.conf for Pi
RUN cat > /etc/nginx/nginx.conf <<'EOF'
user nginx;
worker_processes ${NGINX_WORKER_PROCESSES};
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections ${NGINX_WORKER_CONNECTIONS};
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance settings for Pi
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Gzip settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Include server configuration
    include /etc/nginx/conf.d/*.conf;
}
EOF

# Professional entrypoint with validation
RUN cat > /usr/local/bin/lucid-entrypoint.sh <<'EOF' && chmod +x /usr/local/bin/lucid-entrypoint.sh
#!/usr/bin/env bash
set -euo pipefail

# Render configuration template
echo "[gateway] Configuring NGINX for Lucid API Gateway..."
envsubst '${API_UPSTREAM} ${CLIENT_MAX_BODY_SIZE} ${GATEWAY_PORT} ${NGINX_WORKER_PROCESSES} ${NGINX_WORKER_CONNECTIONS} ${NGINX_KEEPALIVE_TIMEOUT} ${NGINX_CLIENT_HEADER_TIMEOUT} ${NGINX_CLIENT_BODY_TIMEOUT} ${NGINX_SEND_TIMEOUT}' \
    < /etc/nginx/templates/lucid.conf.template \
    > /etc/nginx/conf.d/default.conf

# Validate configuration
echo "[gateway] Validating NGINX configuration..."
nginx -t

# Log startup information
echo "[gateway] Starting NGINX API Gateway"
echo "[gateway] Upstream API: $API_UPSTREAM"
echo "[gateway] Gateway Port: $GATEWAY_PORT"
echo "[gateway] Max Body Size: $CLIENT_MAX_BODY_SIZE"
echo "[gateway] Worker Processes: $NGINX_WORKER_PROCESSES"

# Start NGINX
exec nginx -g 'daemon off;'
EOF

# Stage 2: Distroless runtime with NGINX
FROM gcr.io/distroless/base-debian12:latest

# Metadata for runtime container
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="NGINX API gateway for Lucid sessions (Distroless Runtime)" \
      com.lucid.plane="ops" \
      com.lucid.service="api-gateway" \
      com.lucid.expose="8080"

# Copy NGINX and all dependencies
COPY --from=gateway-builder /usr/sbin/nginx /usr/sbin/nginx
COPY --from=gateway-builder /usr/share/nginx /usr/share/nginx
COPY --from=gateway-builder /etc/nginx /etc/nginx

# Copy system utilities
COPY --from=gateway-builder /usr/bin/curl /usr/bin/curl
COPY --from=gateway-builder /usr/bin/nc /usr/bin/nc
COPY --from=gateway-builder /usr/bin/jq /usr/bin/jq
COPY --from=gateway-builder /bin/bash /bin/bash
COPY --from=gateway-builder /sbin/su-exec /sbin/su-exec
COPY --from=gateway-builder /usr/bin/envsubst /usr/bin/envsubst

# Copy required dynamic libraries (architecture-specific)
COPY --from=gateway-builder /lib/*-linux-*/libc.so.6 /lib/
COPY --from=gateway-builder /lib/*-linux-*/libssl.so.3 /lib/
COPY --from=gateway-builder /lib/*-linux-*/libcrypto.so.3 /lib/
COPY --from=gateway-builder /lib/*-linux-*/libz.so.1 /lib/
COPY --from=gateway-builder /lib/*-linux-*/libpcre2-8.so.0 /lib/
COPY --from=gateway-builder /lib*/ld-linux-*.so.2 /lib64/

# Copy user and group information
COPY --from=gateway-builder /etc/passwd /etc/passwd
COPY --from=gateway-builder /etc/group /etc/group

# Copy CA certificates
COPY --from=gateway-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt

# Copy entrypoint script
COPY --from=gateway-builder --chmod=755 /usr/local/bin/lucid-entrypoint.sh /usr/local/bin/lucid-entrypoint.sh

# Create runtime directories
COPY --from=gateway-builder --chown=nginx:nginx /var/cache/nginx /var/cache/nginx
COPY --from=gateway-builder --chown=nginx:nginx /var/run/nginx /var/run/nginx
COPY --from=gateway-builder /var/log/nginx /var/log/nginx

# Gateway configuration environment
ENV API_UPSTREAM="lucid_api:8081" \
    CLIENT_MAX_BODY_SIZE="16m" \
    GATEWAY_PORT="8080" \
    NGINX_WORKER_PROCESSES="1" \
    NGINX_WORKER_CONNECTIONS="1024" \
    NGINX_KEEPALIVE_TIMEOUT="65" \
    NGINX_CLIENT_HEADER_TIMEOUT="60" \
    NGINX_CLIENT_BODY_TIMEOUT="60" \
    NGINX_SEND_TIMEOUT="60"

# Security and runtime configuration
EXPOSE 8080

# Start as root (nginx will drop privileges)
ENTRYPOINT ["/usr/local/bin/lucid-entrypoint.sh"]
