# Lucid Authentication Service - Distroless Container
# Step 6: Authentication Container Build
# Cluster 09: Authentication Service
# Port: 8089
# 
# Build Requirements:
# - Multi-stage distroless build
# - Base: gcr.io/distroless/python3-debian12
# - Container name: lucid-auth-service:latest
# - Deploy to lucid-dev network (Port 8089)
#
# Validation: curl http://localhost:8089/health returns 200

# ============================================================================
# Stage 1: Builder - Install dependencies and compile packages
# ============================================================================
FROM python:3.11-slim AS builder

# Metadata
LABEL maintainer="Lucid Development Team"
LABEL stage="builder"
LABEL cluster="09-authentication"
LABEL description="Build stage for authentication service"

# Set build-time environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100

# Set working directory
WORKDIR /build

# Install system dependencies for building Python packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        gcc \
        g++ \
        make \
        libffi-dev \
        libssl-dev \
        libpq-dev \
        ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements file
COPY ../../../auth/requirements.txt /build/requirements.txt

# Install Python dependencies to user directory for distroless compatibility
RUN pip install --user --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --user --no-cache-dir -r /build/requirements.txt

# Verify critical packages are installed
RUN python -c "import fastapi, uvicorn, jwt, motor, redis; print('All critical packages installed successfully')"

# ============================================================================
# Stage 2: Runtime - Distroless Python base
# ============================================================================
FROM gcr.io/distroless/python3-debian12:latest

# Metadata for runtime stage
LABEL maintainer="Lucid Development Team"
LABEL service="lucid-auth-service"
LABEL cluster="09-authentication"
LABEL version="1.0.0"
LABEL description="Lucid Authentication Service with TRON signature verification and hardware wallet support"
LABEL base="distroless"
LABEL port="8089"

# Copy Python packages from builder stage
COPY --from=builder /root/.local /root/.local

# Set runtime environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PATH=/root/.local/bin:$PATH \
    SERVICE_NAME=lucid-auth-service \
    AUTH_SERVICE_PORT=8089

# Set working directory
WORKDIR /app

# Copy application code from repository
COPY ../../../auth/ /app/auth/

# Create necessary directories for runtime
RUN ["/busybox/mkdir", "-p", "/app/logs", "/app/data"]

# Expose service port
EXPOSE 8089

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD ["python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8089/health').read()"]

# Run the authentication service
# Entry point: python -m auth.main
ENTRYPOINT ["python", "-m", "auth.main"]

# ============================================================================
# Build Instructions:
# ============================================================================
# 
# Build the container:
#   docker build -f infrastructure/containers/auth/Dockerfile.auth-service \
#     -t lucid-auth-service:latest \
#     -t lucid-auth-service:1.0.0 .
#
# Run the container:
#   docker run -d \
#     --name lucid-auth-service \
#     --network lucid-dev \
#     -p 8089:8089 \
#     -e JWT_SECRET_KEY=${JWT_SECRET_KEY} \
#     -e MONGODB_URI=${MONGODB_URI} \
#     -e REDIS_URI=${REDIS_URI} \
#     lucid-auth-service:latest
#
# Health check validation:
#   curl http://localhost:8089/health
#   Expected response: {"status":"healthy","service":"auth-service",...}
#
# ============================================================================
# Security Features:
# ============================================================================
# - Distroless base (no shell, minimal attack surface)
# - Multi-stage build (build dependencies not in runtime)
# - Non-root user execution (distroless default)
# - Minimal package footprint
# - Health check endpoint
# - TRON signature verification
# - Hardware wallet support (Ledger, Trezor, KeepKey)
# - JWT token management (15min access, 7day refresh)
# - RBAC engine (4 roles: USER, NODE_OPERATOR, ADMIN, SUPER_ADMIN)
# - Rate limiting middleware
# - Audit logging
#
# ============================================================================

