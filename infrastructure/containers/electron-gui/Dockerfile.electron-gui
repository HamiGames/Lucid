# LUCID Electron GUI Container - SPEC-1B Implementation
# Distroless container for Electron GUI application

# syntax=docker/dockerfile:1.7

# Stage 1: Node.js Builder
FROM node:20-slim AS node-builder

# Set build arguments
ARG BUILDPLATFORM
ARG TARGETPLATFORM

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    python3 \
    make \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy package files
COPY electron-gui/package*.json ./
COPY electron-gui/yarn.lock* ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY electron-gui/ ./

# Build application
RUN npm run build

# Stage 2: Python Builder
FROM python:3.11-slim AS python-builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy requirements
COPY electron-gui/requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Copy Python source code
COPY electron-gui/backend/ ./src/

# Stage 3: Runtime (Distroless)
FROM gcr.io/distroless/nodejs20-debian12:nonroot

# Copy Node.js application from builder
COPY --from=node-builder /build/dist /app/dist
COPY --from=node-builder /build/node_modules /app/node_modules
COPY --from=node-builder /build/package*.json /app/

# Copy Python dependencies from builder
COPY --from=python-builder /root/.local /app/.local

# Copy Python source code
COPY --from=python-builder /build/src /app/backend

# Set environment variables
ENV NODE_ENV=production
ENV PYTHONPATH=/app/.local/lib/python3.11/site-packages:/app/backend
ENV PATH=/app/.local/bin:$PATH

# Set working directory
WORKDIR /app

# Create non-root user
USER nonroot

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["node", "-e", "const http = require('http'); const options = {host: 'localhost', port: 3000, path: '/health'}; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.end();"]

# Expose port
EXPOSE 3000

# Run application
ENTRYPOINT ["node", "dist/main.js"]
