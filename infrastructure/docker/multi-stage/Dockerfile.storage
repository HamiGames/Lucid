# Multi-stage Dockerfile for Storage Services
# Builds distroless containers for storage-database

# Stage 1: Build stage
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    make \
    pkg-config \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy requirements first for better caching
COPY storage/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy source code
COPY storage/ .
COPY src/ ./src/
COPY common/ ./common/

# Build the application
RUN python -m compileall -b .

# Stage 2: Runtime stage (distroless)
FROM gcr.io/distroless/python3-debian12

# Set metadata
LABEL maintainer="Lucid Development Team" \
      org.opencontainers.image.title="Lucid Storage Service" \
      org.opencontainers.image.description="Distroless storage service for Lucid platform" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.vendor="Lucid" \
      org.opencontainers.image.licenses="MIT" \
      lucid.service="storage" \
      lucid.type="distroless" \
      lucid.platform="multi-arch" \
      lucid.security="hardened"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    LUCID_ENV=production \
    LUCID_PLATFORM=multi-arch

# Create non-root user
USER 65532:65532

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=65532:65532 /app /app

# Note: Distroless images don't have shell commands like mkdir or chmod
# Directories will be created by the application if needed

# Expose port
EXPOSE 8088

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD ["python3", "-c", "import sys; sys.exit(0)"]

# Run the application
CMD ["python3", "main.py"]
