# LUCID RDP Beta Sidecar - Tor Runtime & Plane Separation
# Based on SPEC-4: Stage 0 - Common & Base
# Provides: Tor v3 HS, per-plane onion services, discovery, ACLs

FROM alpine:3.20 AS base

# Install Tor and required tools
RUN apk add --no-cache \
    tor \
    curl \
    jq \
    bash \
    openssl \
    socat \
    netcat-openbsd \
    bind-tools \
    ca-certificates \
    && mkdir -p /run/lucid/onion \
    && mkdir -p /var/lib/tor \
    && mkdir -p /var/log/tor \
    && chown -R tor:tor /var/lib/tor /var/log/tor

# Create beta control script
FROM base AS betactl

COPY <<EOF /usr/local/bin/betactl
#!/bin/bash
# Beta sidecar control script per SPEC-4

set -euo pipefail

PLANES=\${BETA_PLANES:-"ops,chain,wallet"}
CLUSTER_ID=\${BETA_CLUSTER_ID:-"dev"}
TOR_CONTROL_PASSWORD=\${TOR_CONTROL_PASSWORD:-""}

# Health check function
health() {
    # Check Tor process
    if ! pgrep -x tor > /dev/null; then
        echo "ERROR: Tor process not running"
        exit 1
    fi
    
    # Check SOCKS proxy
    if ! nc -z 127.0.0.1 9050; then
        echo "ERROR: Tor SOCKS proxy not available"
        exit 1
    fi
    
    # Check control port
    if ! nc -z 127.0.0.1 9051; then
        echo "ERROR: Tor control port not available"
        exit 1
    fi
    
    echo "✅ Beta sidecar healthy"
    return 0
}

# Generate onion service keys for each plane
generate_onion_keys() {
    echo "Generating onion service keys for planes: \$PLANES"
    
    IFS=',' read -ra PLANE_ARRAY <<< "\$PLANES"
    for plane in "\${PLANE_ARRAY[@]}"; do
        plane=\$(echo "\$plane" | xargs)  # trim whitespace
        key_dir="/run/lucid/onion/\${plane}"
        
        if [ ! -d "\$key_dir" ]; then
            mkdir -p "\$key_dir"
            
            # Generate v3 onion service key
            openssl genpkey -algorithm ed25519 -out "\$key_dir/private_key"
            chmod 600 "\$key_dir/private_key"
            chown tor:tor "\$key_dir/private_key"
            
            echo "Generated onion key for plane: \$plane"
        fi
    done
}

# Start Tor with per-plane configuration
start_tor() {
    echo "Starting Tor with plane configuration..."
    
    # Generate torrc
    cat > /etc/tor/torrc <<TORRC_EOF
# LUCID RDP Beta Sidecar Tor Configuration
# SPEC-4 compliant: per-plane onion services, fail-closed

DataDirectory /var/lib/tor
ControlPort 9051
CookieAuthentication 1
CookieAuthFileGroupReadable 1

# SOCKS proxy
SocksPort 9050
SocksPolicy accept 127.0.0.1/32
SocksPolicy reject *

# Disable UDP (SPEC-4: QUIC/UDP ban)
DisableNetwork 0
ClientRejectInternalAddresses 1

# Logging
Log notice file /var/log/tor/notices.log
Log info file /var/log/tor/info.log

# Per-plane onion services
TORRC_EOF

    # Add onion service configurations for each plane
    IFS=',' read -ra PLANE_ARRAY <<< "\$PLANES"
    for plane in "\${PLANE_ARRAY[@]}"; do
        plane=\$(echo "\$plane" | xargs)
        
        cat >> /etc/tor/torrc <<PLANE_EOF

# \$plane plane onion service
HiddenServiceDir /run/lucid/onion/\$plane
HiddenServicePort 80 127.0.0.1:808\${#plane}  # Unique port per plane
HiddenServiceVersion 3
PLANE_EOF
    done
    
    # Start Tor as daemon
    tor -f /etc/tor/torrc &
    TOR_PID=\$!
    
    # Wait for Tor to start
    sleep 5
    
    # Verify startup
    if ! kill -0 \$TOR_PID 2>/dev/null; then
        echo "ERROR: Failed to start Tor"
        exit 1
    fi
    
    echo "✅ Tor started successfully (PID: \$TOR_PID)"
}

# Show onion addresses
show_onions() {
    echo "Onion addresses for cluster \$CLUSTER_ID:"
    
    IFS=',' read -ra PLANE_ARRAY <<< "\$PLANES"
    for plane in "\${PLANE_ARRAY[@]}"; do
        plane=\$(echo "\$plane" | xargs)
        hostname_file="/run/lucid/onion/\$plane/hostname"
        
        if [ -f "\$hostname_file" ]; then
            onion=\$(cat "\$hostname_file")
            echo "  \$plane: \$onion"
        else
            echo "  \$plane: (generating...)"
        fi
    done
}

# ACL enforcement (placeholder for production)
enforce_acls() {
    echo "Enforcing plane ACLs..."
    # In production, this would set up iptables rules
    # to enforce plane separation per SPEC-4
    
    echo "✅ ACLs configured (development mode)"
}

# Main command handler
case "\${1:-help}" in
    health)
        health
        ;;
    start)
        generate_onion_keys
        start_tor
        enforce_acls
        show_onions
        wait  # Keep running
        ;;
    show-onions)
        show_onions
        ;;
    *)
        echo "Usage: betactl {health|start|show-onions}"
        echo "Environment:"
        echo "  BETA_PLANES: \$PLANES"
        echo "  BETA_CLUSTER_ID: \$CLUSTER_ID"
        exit 1
        ;;
esac
EOF

# Make executable
RUN chmod +x /usr/local/bin/betactl

# Final stage
FROM betactl AS final

# Runtime user setup
USER tor

# Volumes for persistent data
VOLUME ["/run/lucid/onion", "/var/lib/tor"]

# Expose Tor ports
EXPOSE 9050 9051

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
    CMD betactl health

# Default command
CMD ["betactl", "start"]