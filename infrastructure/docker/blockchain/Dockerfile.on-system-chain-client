# LUCID ON-SYSTEM CHAIN CLIENT - SPEC-2 Blockchain Integration (Distroless)
# Professional on-system chain client for Pi deployment
# Multi-platform build for ARM64 Pi and AMD64 development

# syntax=docker/dockerfile:1.7
FROM python:3.11-slim AS chain-client-builder

# Metadata for professional container management
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="On-System Chain Client for Lucid SPEC-2 Blockchain Integration (Distroless)" \
      org.lucid.plane="ops" \
      org.lucid.service="on-system-chain-client" \
      org.lucid.layer="2" \
      org.lucid.expose="8104"

# Build-time environment for dependency installation
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies and blockchain tools
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        ca-certificates \
        netcat-traditional \
        jq \
        gosu \
        # Blockchain dependencies
        python3-dev \
        # Cryptographic tools
        openssl \
        # Network tools
        netstat-nat \
        ss \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && groupadd --gid 1000 lucid \
    && useradd --uid 1000 --gid 1000 --shell /bin/bash --create-home lucid

# Set up application directory
WORKDIR /app
RUN chown -R lucid:lucid /app

# Install Python dependencies for blockchain client
RUN pip install --no-cache-dir \
        "uvicorn[standard]>=0.24.0" \
        "fastapi>=0.104.0" \
        "pydantic>=2.0.0" \
        "httpx>=0.25.0" \
        "web3>=6.11.0" \
        "eth-account>=0.9.0" \
        "tronpy>=0.4.0" \
        "base58>=2.1.1" \
        "cryptography>=41.0.0" \
        "structlog>=23.2.0" \
        "python-dotenv>=1.0.0" \
        "websockets>=11.0.0"

# Copy application code
COPY blockchain/ /app/blockchain/
COPY blockchain/chain-client/ /app/blockchain/chain-client/
COPY wallet/ /app/wallet/
COPY auth/ /app/auth/

# Create blockchain client directories
RUN mkdir -p /opt/lucid/blockchain /opt/lucid/contracts /opt/lucid/abi /opt/lucid/keys /data/blockchain /tmp/chainclient \
    && chown -R lucid:lucid /opt/lucid /data /tmp/chainclient

# Create non-root user for runtime
RUN adduser --disabled-password --gecos '' chainclient_user && \
    chown -R chainclient_user:chainclient_user /app /data /tmp/chainclient /opt/lucid

# Stage 2: Distroless runtime with Python and blockchain dependencies
FROM gcr.io/distroless/python3-debian12:nonroot

# Metadata for runtime container
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="On-System Chain Client for Lucid SPEC-2 Blockchain Integration (Distroless Runtime)" \
      org.lucid.plane="ops" \
      org.lucid.service="on-system-chain-client" \
      org.lucid.layer="2" \
      org.lucid.expose="8104"

# Copy Python installation and packages from builder
COPY --from=chain-client-builder /usr/local/lib/python3.11 /usr/local/lib/python3.11
COPY --from=chain-client-builder /usr/local/bin/python3.11 /usr/local/bin/python3.11
COPY --from=chain-client-builder /usr/local/bin/uvicorn /usr/local/bin/uvicorn

# Copy blockchain and system tools
COPY --from=chain-client-builder /usr/bin/openssl /usr/bin/openssl
COPY --from=chain-client-builder /usr/bin/ss /usr/bin/ss
COPY --from=chain-client-builder /usr/bin/curl /usr/bin/curl
COPY --from=chain-client-builder /bin/nc /bin/nc
COPY --from=chain-client-builder /usr/bin/jq /usr/bin/jq
COPY --from=chain-client-builder /usr/sbin/gosu /usr/sbin/gosu

# Copy required dynamic libraries (architecture-specific)
COPY --from=chain-client-builder /lib/*-linux-*/libc.so.6 /lib/
COPY --from=chain-client-builder /lib/*-linux-*/libssl.so.3 /lib/
COPY --from=chain-client-builder /lib/*-linux-*/libcrypto.so.3 /lib/
COPY --from=chain-client-builder /lib/*-linux-*/libz.so.1 /lib/
COPY --from=chain-client-builder /lib/*-linux-*/liblzma.so.5 /lib/
COPY --from=chain-client-builder /lib/*-linux-*/libzstd.so.1 /lib/
COPY --from=chain-client-builder /lib*/ld-linux-*.so.2 /lib64/

# Copy user and group information
COPY --from=chain-client-builder /etc/passwd /etc/passwd
COPY --from=chain-client-builder /etc/group /etc/group

# Copy CA certificates
COPY --from=chain-client-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt

# Copy application with proper ownership
COPY --from=chain-client-builder --chown=chainclient_user:chainclient_user /app /app
COPY --from=chain-client-builder --chown=chainclient_user:chainclient_user /data /data
COPY --from=chain-client-builder --chown=chainclient_user:chainclient_user /tmp/chainclient /tmp/chainclient
COPY --from=chain-client-builder --chown=chainclient_user:chainclient_user /opt/lucid /opt/lucid

# Runtime environment for chain client
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    BLOCKCHAIN_PATH=/opt/lucid/blockchain \
    CONTRACTS_PATH=/opt/lucid/contracts \
    ABI_PATH=/opt/lucid/abi \
    KEYS_PATH=/opt/lucid/keys \
    XDG_RUNTIME_DIR=/tmp/chainclient \
    ETH_RPC_URL=http://localhost:8545 \
    TRON_RPC_URL=https://api.trongrid.io \
    GAS_PRICE_GWEI=20 \
    MAX_GAS_LIMIT=8000000 \
    CONFIRMATION_BLOCKS=12

# Security and runtime configuration
EXPOSE 8104
USER chainclient_user
WORKDIR /app

# Default command for on-system chain client service
ENTRYPOINT ["/usr/local/bin/python3.11", "/app/blockchain/chain-client/on_system_chain_client.py"]
