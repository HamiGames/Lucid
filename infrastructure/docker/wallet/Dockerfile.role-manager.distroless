# LUCID ROLE MANAGER - SPEC-1C Role-Based Access Control (Distroless)
# Professional role-based access control for Pi deployment
# Multi-platform build for ARM64 Pi and AMD64 development

# syntax=docker/dockerfile:1.7
FROM python:3.11-slim AS role-manager-builder

# Metadata for professional container management
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="Role Manager for Lucid SPEC-1C Role-Based Access Control (Distroless)" \
      org.lucid.plane="ops" \
      org.lucid.service="role-manager" \
      org.lucid.layer="1" \
      org.lucid.expose="8102"

# Build-time environment for dependency installation
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies and authentication tools
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        ca-certificates \
        netcat-traditional \
        jq \
        gosu \
        # Authentication dependencies
        python3-dev \
        python3-jwt \
        python3-passlib \
        # Security tools
        openssl \
        # Database support
        sqlite3 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && groupadd --gid 1000 lucid \
    && useradd --uid 1000 --gid 1000 --shell /bin/bash --create-home lucid

# Set up application directory
WORKDIR /app
RUN chown -R lucid:lucid /app

# Install Python dependencies for role management
RUN pip install --no-cache-dir \
        "uvicorn[standard]>=0.24.0" \
        "fastapi>=0.104.0" \
        "pydantic>=2.0.0" \
        "httpx>=0.25.0" \
        "PyJWT>=2.8.0" \
        "passlib[bcrypt]>=1.7.4" \
        "cryptography>=41.0.0" \
        "structlog>=23.2.0" \
        "python-dotenv>=1.0.0" \
        "websockets>=11.0.0"

# Copy application code
COPY wallet/ /app/wallet/
COPY auth/ /app/auth/
COPY sessions/ /app/sessions/

# Create role management directories
RUN mkdir -p /opt/lucid/roles /opt/lucid/permissions /data/roles /tmp/roles \
    && chown -R lucid:lucid /opt/lucid /data /tmp/roles

# Create non-root user for runtime
RUN adduser --disabled-password --gecos '' role_user && \
    chown -R role_user:role_user /app /data /tmp/roles /opt/lucid

# Stage 2: Distroless runtime with Python and authentication dependencies
FROM gcr.io/distroless/python3-debian12:nonroot

# Metadata for runtime container
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="Role Manager for Lucid SPEC-1C Role-Based Access Control (Distroless Runtime)" \
      org.lucid.plane="ops" \
      org.lucid.service="role-manager" \
      org.lucid.layer="1" \
      org.lucid.expose="8102"

# Copy Python installation and packages from builder
COPY --from=role-manager-builder /usr/local/lib/python3.11 /usr/local/lib/python3.11
COPY --from=role-manager-builder /usr/local/bin/python3.11 /usr/local/bin/python3.11
COPY --from=role-manager-builder /usr/local/bin/uvicorn /usr/local/bin/uvicorn

# Copy authentication tools
COPY --from=role-manager-builder /usr/bin/openssl /usr/bin/openssl
COPY --from=role-manager-builder /usr/bin/sqlite3 /usr/bin/sqlite3
COPY --from=role-manager-builder /usr/bin/curl /usr/bin/curl
COPY --from=role-manager-builder /bin/nc /bin/nc
COPY --from=role-manager-builder /usr/bin/jq /usr/bin/jq
COPY --from=role-manager-builder /usr/sbin/gosu /usr/sbin/gosu

# Copy required dynamic libraries (architecture-specific)
COPY --from=role-manager-builder /lib/*-linux-*/libc.so.6 /lib/
COPY --from=role-manager-builder /lib/*-linux-*/libssl.so.3 /lib/
COPY --from=role-manager-builder /lib/*-linux-*/libcrypto.so.3 /lib/
COPY --from=role-manager-builder /lib/*-linux-*/libz.so.1 /lib/
COPY --from=role-manager-builder /lib/*-linux-*/liblzma.so.5 /lib/
COPY --from=role-manager-builder /lib/*-linux-*/libzstd.so.1 /lib/
COPY --from=role-manager-builder /lib*/ld-linux-*.so.2 /lib64/

# Copy user and group information
COPY --from=role-manager-builder /etc/passwd /etc/passwd
COPY --from=role-manager-builder /etc/group /etc/group

# Copy CA certificates
COPY --from=role-manager-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt

# Copy application with proper ownership
COPY --from=role-manager-builder --chown=role_user:role_user /app /app
COPY --from=role-manager-builder --chown=role_user:role_user /data /data
COPY --from=role-manager-builder --chown=role_user:role_user /tmp/roles /tmp/roles
COPY --from=role-manager-builder --chown=role_user:role_user /opt/lucid /opt/lucid

# Runtime environment for role manager
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    ROLES_PATH=/opt/lucid/roles \
    PERMISSIONS_PATH=/opt/lucid/permissions \
    XDG_RUNTIME_DIR=/tmp/roles \
    JWT_SECRET_KEY=changeme_in_production \
    JWT_ALGORITHM=HS256 \
    JWT_EXPIRATION_HOURS=24 \
    PASSWORD_HASH_ROUNDS=12 \
    MAX_LOGIN_ATTEMPTS=5

# Security and runtime configuration
EXPOSE 8102
USER role_user
WORKDIR /app

# Default command for role manager service
ENTRYPOINT ["/usr/local/bin/python3.11", "/app/wallet/walletd/role_manager.py"]
