# LUCID SOFTWARE VAULT - SPEC-1C Passphrase-Protected Vault (Distroless)
# Professional passphrase-protected vault for Pi deployment
# Multi-platform build for ARM64 Pi and AMD64 development

# syntax=docker/dockerfile:1.7
FROM python:3.11-slim AS vault-builder

# Metadata for professional container management
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="Software Vault for Lucid SPEC-1C Passphrase-Protected Vault (Distroless)" \
      org.lucid.plane="ops" \
      org.lucid.service="software-vault" \
      org.lucid.layer="1" \
      org.lucid.expose="8101"

# Build-time environment for dependency installation
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies and cryptographic tools
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        ca-certificates \
        netcat-traditional \
        jq \
        gosu \
        # Cryptographic dependencies
        python3-dev \
        python3-cryptography \
        python3-argon2 \
        # Security tools
        openssl \
        gpg \
        # Random number generation
        haveged \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && groupadd --gid 1000 lucid \
    && useradd --uid 1000 --gid 1000 --shell /bin/bash --create-home lucid

# Set up application directory
WORKDIR /app
RUN chown -R lucid:lucid /app

# Install Python dependencies for software vault
RUN pip install --no-cache-dir \
        "uvicorn[standard]>=0.24.0" \
        "fastapi>=0.104.0" \
        "pydantic>=2.0.0" \
        "httpx>=0.25.0" \
        "cryptography>=41.0.0" \
        "argon2-cffi>=21.3.0" \
        "structlog>=23.2.0" \
        "python-dotenv>=1.0.0" \
        "websockets>=11.0.0"

# Copy application code
COPY wallet/ /app/wallet/
COPY auth/ /app/auth/
COPY sessions/ /app/sessions/

# Create vault directories
RUN mkdir -p /opt/lucid/wallet /opt/lucid/vaults /opt/lucid/keys /data/vaults /tmp/vault \
    && chown -R lucid:lucid /opt/lucid /data /tmp/vault

# Create non-root user for runtime
RUN adduser --disabled-password --gecos '' vault_user && \
    chown -R vault_user:vault_user /app /data /tmp/vault /opt/lucid

# Stage 2: Distroless runtime with Python and cryptographic dependencies
FROM gcr.io/distroless/python3-debian12:nonroot

# Metadata for runtime container
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="Software Vault for Lucid SPEC-1C Passphrase-Protected Vault (Distroless Runtime)" \
      org.lucid.plane="ops" \
      org.lucid.service="software-vault" \
      org.lucid.layer="1" \
      org.lucid.expose="8101"

# Copy Python installation and packages from builder
COPY --from=vault-builder /usr/local/lib/python3.11 /usr/local/lib/python3.11
COPY --from=vault-builder /usr/local/bin/python3.11 /usr/local/bin/python3.11
COPY --from=vault-builder /usr/local/bin/uvicorn /usr/local/bin/uvicorn

# Copy cryptographic tools
COPY --from=vault-builder /usr/bin/openssl /usr/bin/openssl
COPY --from=vault-builder /usr/bin/gpg /usr/bin/gpg
COPY --from=vault-builder /usr/bin/haveged /usr/bin/haveged
COPY --from=vault-builder /usr/bin/curl /usr/bin/curl
COPY --from=vault-builder /bin/nc /bin/nc
COPY --from=vault-builder /usr/bin/jq /usr/bin/jq
COPY --from=vault-builder /usr/sbin/gosu /usr/sbin/gosu

# Copy required dynamic libraries (architecture-specific)
COPY --from=vault-builder /lib/*-linux-*/libc.so.6 /lib/
COPY --from=vault-builder /lib/*-linux-*/libssl.so.3 /lib/
COPY --from=vault-builder /lib/*-linux-*/libcrypto.so.3 /lib/
COPY --from=vault-builder /lib/*-linux-*/libz.so.1 /lib/
COPY --from=vault-builder /lib/*-linux-*/liblzma.so.5 /lib/
COPY --from=vault-builder /lib/*-linux-*/libzstd.so.1 /lib/
COPY --from=vault-builder /lib*/ld-linux-*.so.2 /lib64/

# Copy user and group information
COPY --from=vault-builder /etc/passwd /etc/passwd
COPY --from=vault-builder /etc/group /etc/group

# Copy CA certificates
COPY --from=vault-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt

# Copy application with proper ownership
COPY --from=vault-builder --chown=vault_user:vault_user /app /app
COPY --from=vault-builder --chown=vault_user:vault_user /data /data
COPY --from=vault-builder --chown=vault_user:vault_user /tmp/vault /tmp/vault
COPY --from=vault-builder --chown=vault_user:vault_user /opt/lucid /opt/lucid

# Runtime environment for software vault
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    VAULT_PATH=/opt/lucid/vaults \
    KEYS_PATH=/opt/lucid/keys \
    WALLET_PATH=/opt/lucid/wallet \
    XDG_RUNTIME_DIR=/tmp/vault \
    VAULT_ENCRYPTION=argon2 \
    KEY_DERIVATION_ITERATIONS=100000 \
    VAULT_TIMEOUT=300 \
    MAX_LOGIN_ATTEMPTS=3

# Security and runtime configuration
EXPOSE 8101
USER vault_user
WORKDIR /app

# Default command for software vault service
ENTRYPOINT ["/usr/local/bin/python3.11", "/app/wallet/walletd/software_vault.py"]
