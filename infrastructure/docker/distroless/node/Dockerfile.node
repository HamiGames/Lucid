# LUCID NODE SERVICE - Infrastructure Distroless Configuration
# Production-ready node service with enhanced security and monitoring
# Multi-platform build optimized for ARM64 Pi deployment
# LUCID-INFRASTRUCTURE Mode: Enterprise-grade security and observability

# syntax=docker/dockerfile:1.7
FROM python:3.11-slim-bookworm AS node-builder

# Build arguments for multi-platform support
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Metadata for infrastructure container management
LABEL maintainer="Lucid Infrastructure Team" \
      version="${VERSION:-1.0.0-infrastructure}" \
      description="Production Node service for Lucid Infrastructure (Distroless Build)" \
      org.lucid.plane="infrastructure" \
      org.lucid.service="node" \
      org.lucid.layer="3" \
      org.lucid.expose="8084" \
      org.lucid.monitoring="prometheus" \
      org.lucid.security="distroless" \
      org.opencontainers.image.title="Lucid Node Service" \
      org.opencontainers.image.description="Distributed node service for Lucid blockchain network" \
      org.opencontainers.image.vendor="HamiGames" \
      org.opencontainers.image.version="${VERSION:-1.0.0-infrastructure}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.source="https://github.com/HamiGames/Lucid"

# Build-time environment for dependency installation
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    PIP_DEFAULT_RETRIES=3

# Install comprehensive build dependencies for node operations
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        gcc \
        g++ \
        make \
        cmake \
        pkg-config \
        curl \
        wget \
        ca-certificates \
        netcat-openbsd \
        jq \
        gosu \
        git \
        libffi-dev \
        libssl-dev \
        libgmp-dev \
        libsodium-dev \
        libsecp256k1-dev \
        libzmq3-dev \
        libprotobuf-dev \
        protobuf-compiler \
        libpcre3-dev \
        libevent-dev \
        libgflags-dev \
        libsnappy-dev \
        libbz2-dev \
        liblz4-dev \
        libzstd-dev \
        tor \
        torsocks \
        dnsutils \
        iputils-ping \
        traceroute \
        tcpdump \
        net-tools \
        procps \
        htop \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y \
    && rm -rf /var/cache/apt/*

# Create service user with specific UID/GID for security
RUN groupadd --gid 1001 --system node \
    && useradd --uid 1001 --gid node --system --shell /bin/bash --create-home node \
    && mkdir -p /home/node/.local/bin \
    && chown -R node:node /home/node

# Set up application directory structure
WORKDIR /app
RUN mkdir -p /app/{config,logs,data,cache,tmp} \
    && chown -R node:node /app

# Install comprehensive Python dependencies for node service
RUN pip install --no-cache-dir --upgrade pip setuptools wheel \
    && pip install --no-cache-dir \
        "fastapi>=0.104.0" \
        "uvicorn[standard]>=0.24.0" \
        "pydantic>=2.0.0" \
        "pydantic-settings>=2.0.0" \
        "httpx>=0.25.0" \
        "aiofiles>=23.0.0" \
        "python-multipart>=0.0.6" \
        "cryptography>=41.0.0" \
        "motor>=3.0.0" \
        "pymongo>=4.6.0" \
        "redis>=5.0.0" \
        "aiohttp>=3.8.0" \
        "websockets>=11.0.0" \
        "requests>=2.31.0" \
        "psutil>=5.9.0" \
        "tronpy>=1.4.0" \
        "starknet.py>=0.11.0" \
        "python-dotenv>=1.0.0" \
        "structlog>=23.0.0" \
        "prometheus-client>=0.19.0" \
        "zmq>=0.0.0" \
        "protobuf>=4.24.0" \
        "grpcio>=1.59.0" \
        "grpcio-tools>=1.59.0" \
        "opentelemetry-api>=1.20.0" \
        "opentelemetry-sdk>=1.20.0" \
        "opentelemetry-exporter-prometheus>=1.12.0" \
        "opentelemetry-instrumentation-fastapi>=0.41b0" \
        "opentelemetry-instrumentation-requests>=0.41b0" \
        "jaeger-client>=4.8.0" \
        "py-spy>=0.3.14" \
        "memory-profiler>=0.61.0"

# Copy and install node-specific requirements
COPY node/requirements.txt* /tmp/
RUN if [ -f /tmp/requirements.txt ]; then \
        pip install --no-cache-dir -r /tmp/requirements.txt; \
    fi

# Copy node service source code with proper ownership
COPY --chown=node:node node/ /app/node/
COPY --chown=node:node src/ /app/src/
COPY --chown=node:node common/ /app/common/

# Create comprehensive service directories
RUN mkdir -p \
        /var/lib/lucid/node/{data,wallet,keys,backups} \
        /var/log/lucid/node \
        /var/lib/tor/{hidden_service,data} \
        /etc/lucid/node \
        /var/cache/lucid/node \
    && chown -R node:node /var/lib/lucid /var/log/lucid /var/lib/tor /etc/lucid /var/cache/lucid

# Copy Tor configuration and set up hidden services
COPY --chown=node:node node/tor/ /etc/tor/
RUN chmod 755 /etc/tor \
    && chmod 644 /etc/tor/* \
    && chmod 700 /var/lib/tor/hidden_service

# Copy node configuration files
COPY --chown=node:node node/config/ /etc/lucid/node/

# Create node startup script
RUN cat > /usr/local/bin/start-node.sh << 'EOF'
#!/bin/bash
set -euo pipefail

# Start Tor service in background
if [ "${TOR_ENABLED:-true}" = "true" ]; then
    echo "Starting Tor service..."
    tor -f /etc/tor/torrc &
    TOR_PID=$!
    
    # Wait for Tor to be ready
    timeout 60 bash -c 'until curl -s --socks5 localhost:9050 http://check.torproject.org/ | grep -q "Congratulations"; do sleep 2; done'
    echo "Tor service started successfully"
fi

# Start node service
echo "Starting Lucid Node service..."
exec python3 -m uvicorn node.node_manager:app --host 0.0.0.0 --port 8084 --workers 1
EOF

RUN chmod +x /usr/local/bin/start-node.sh

# Stage 2: Production distroless runtime
FROM gcr.io/distroless/python3-debian12:nonroot

# Build arguments for runtime
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Metadata for production runtime
LABEL maintainer="Lucid Infrastructure Team" \
      version="${VERSION:-1.0.0-infrastructure}" \
      description="Production Node service for Lucid Infrastructure (Distroless Runtime)" \
      org.lucid.plane="infrastructure" \
      org.lucid.service="node" \
      org.lucid.layer="3" \
      org.lucid.expose="8084" \
      org.lucid.monitoring="prometheus" \
      org.lucid.security="distroless" \
      org.opencontainers.image.title="Lucid Node Service" \
      org.opencontainers.image.description="Distributed node service for Lucid blockchain network" \
      org.opencontainers.image.vendor="HamiGames" \
      org.opencontainers.image.version="${VERSION:-1.0.0-infrastructure}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}"

# Copy Python installation and packages from builder
COPY --from=node-builder /usr/local/lib/python3.11 /usr/local/lib/python3.11
COPY --from=node-builder /usr/local/bin/python3.11 /usr/local/bin/python3.11
COPY --from=node-builder /usr/local/bin/uvicorn /usr/local/bin/uvicorn

# Copy essential system utilities
COPY --from=node-builder /usr/bin/curl /usr/bin/curl
COPY --from=node-builder /usr/bin/wget /usr/bin/wget
COPY --from=node-builder /bin/nc /bin/nc
COPY --from=node-builder /usr/bin/jq /usr/bin/jq
COPY --from=node-builder /usr/sbin/gosu /usr/sbin/gosu
COPY --from=node-builder /usr/bin/tor /usr/bin/tor
COPY --from=node-builder /usr/bin/torsocks /usr/bin/torsocks

# Copy networking utilities
COPY --from=node-builder /usr/bin/ping /usr/bin/ping
COPY --from=node-builder /usr/bin/traceroute /usr/bin/traceroute
COPY --from=node-builder /bin/ps /bin/ps

# Copy comprehensive dynamic libraries
COPY --from=node-builder /lib/*-linux-*/libc.so.6 /lib/
COPY --from=node-builder /lib/*-linux-*/libssl.so.3 /lib/
COPY --from=node-builder /lib/*-linux-*/libcrypto.so.3 /lib/
COPY --from=node-builder /lib/*-linux-*/libz.so.1 /lib/
COPY --from=node-builder /lib/*-linux-*/liblzma.so.5 /lib/
COPY --from=node-builder /lib/*-linux-*/libzstd.so.1 /lib/
COPY --from=node-builder /lib/*-linux-*/libffi.so.8 /lib/
COPY --from=node-builder /lib/*-linux-*/libgmp.so.10 /lib/
COPY --from=node-builder /lib/*-linux-*/libsodium.so.23 /lib/
COPY --from=node-builder /lib/*-linux-*/libsecp256k1.so.0 /lib/
COPY --from=node-builder /lib/*-linux-*/libzmq.so.5 /lib/
COPY --from=node-builder /lib/*-linux-*/libprotobuf.so.32 /lib/
COPY --from=node-builder /lib/*-linux-*/libgrpc.so.14 /lib/
COPY --from=node-builder /lib/*-linux-*/libevent-2.1.so.7 /lib/
COPY --from=node-builder /lib*/ld-linux-*.so.2 /lib64/

# Copy user and group information
COPY --from=node-builder /etc/passwd /etc/passwd
COPY --from=node-builder /etc/group /etc/group

# Copy CA certificates and timezone data
COPY --from=node-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=node-builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy Tor configuration and data directories
COPY --from=node-builder /etc/tor /etc/tor
COPY --from=node-builder /var/lib/tor /var/lib/tor

# Copy application and configuration
COPY --from=node-builder --chown=nonroot:nonroot /app /app
COPY --from=node-builder --chown=nonroot:nonroot /var/lib/lucid/node /var/lib/lucid/node
COPY --from=node-builder --chown=nonroot:nonroot /var/log/lucid/node /var/log/lucid/node
COPY --from=node-builder --chown=nonroot:nonroot /etc/lucid/node /etc/lucid/node
COPY --from=node-builder --chown=nonroot:nonroot /var/cache/lucid/node /var/cache/lucid/node

# Copy startup script
COPY --from=node-builder /usr/local/bin/start-node.sh /usr/local/bin/start-node.sh

# Production runtime environment
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    SERVICE_PORT=8084 \
    NODE_DATA_DIR=/var/lib/lucid/node \
    LOG_DIR=/var/log/lucid/node \
    CONFIG_DIR=/etc/lucid/node \
    CACHE_DIR=/var/cache/lucid/node \
    MONGODB_URL=mongodb://lucid:lucid@lucid_mongo:27017/lucid?authSource=admin \
    REDIS_URL=redis://lucid_redis:6379/1 \
    TOR_SOCKS_PORT=9050 \
    TOR_CONTROL_PORT=9051 \
    TOR_ENABLED=true \
    NODE_ID=auto \
    CONSENSUS_ENABLED=true \
    DHT_ENABLED=true \
    ECONOMY_ENABLED=true \
    GOVERNANCE_ENABLED=true \
    MONITORING_ENABLED=true \
    PROMETHEUS_PORT=9090 \
    JAEGER_ENDPOINT=http://jaeger:14268/api/traces \
    LOG_LEVEL=INFO \
    TZ=UTC

# Security and runtime configuration
EXPOSE 8084
EXPOSE 9090
EXPOSE 9050
EXPOSE 9051
USER nonroot
WORKDIR /app

# Health check with comprehensive monitoring
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD ["python3", "-c", "import requests; requests.get('http://localhost:8084/health', timeout=10)"]

# Default command for production node service
ENTRYPOINT ["/usr/local/bin/start-node.sh"]
