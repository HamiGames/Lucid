# Blockchain Core Distroless Base Image for Lucid Project
# Multi-stage build optimized for production deployment
# Supports ARM64 (Raspberry Pi) and AMD64 architectures

# Build stage
FROM python:3.11-slim-bookworm as builder

# Set build arguments for multi-platform support
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    pkg-config \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set Python build environment
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
COPY requirements.txt /tmp/
RUN pip install --upgrade pip setuptools wheel && \
    pip install -r /tmp/requirements.txt

# Copy source code
COPY . /app/
WORKDIR /app

# Build the application
RUN python -m compileall -b .

# Runtime stage - Distroless base
FROM gcr.io/distroless/python3-debian12

# Set metadata
LABEL maintainer="Lucid Development Team" \
      org.opencontainers.image.title="Lucid Blockchain Core" \
      org.opencontainers.image.description="Distroless Blockchain Core for Lucid platform" \
      org.opencontainers.image.vendor="Lucid" \
      org.opencontainers.image.licenses="MIT" \
      lucid.service="blockchain-core" \
      lucid.type="distroless" \
      lucid.platform="multi-arch" \
      lucid.security="hardened"

# Set runtime environment
ENV PYTHONPATH=/app:/opt/venv/lib/python3.11/site-packages \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    LUCID_ENV=production \
    LUCID_PLATFORM=multi-arch

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Copy application from builder
COPY --from=builder --chown=65532:65532 /app /app

# Create application directory
WORKDIR /app

# Create necessary directories
RUN mkdir -p /app/logs /app/cache /tmp

# Set permissions
RUN chmod -R 755 /app

# Set user to nonroot for security
USER 65532:65532

# Expose port
EXPOSE 8084

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD ["python3", "-c", "import sys; sys.exit(0)"]

# Default command
CMD ["python3", "main.py"]
