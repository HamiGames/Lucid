# LUCID RDP Desktop Environment - Distroless Security-Focused
# SPEC-4 Compliant: Secure desktop environment with minimal attack surface
# Multi-stage build for distroless deployment

# syntax=docker/dockerfile:1.7
FROM ubuntu:22.04 AS desktop-builder

# Metadata for professional container management
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="Secure Desktop Environment for Lucid RDP Services (Distroless)" \
      org.lucid.plane="gui" \
      org.lucid.service="desktop-environment" \
      org.lucid.layer="2" \
      org.lucid.expose="5900"

# Build-time environment
ENV DEBIAN_FRONTEND=noninteractive \
    DISPLAY=:0 \
    RESOLUTION=1920x1080

# Install minimal desktop environment and dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Core desktop (minimal XFCE)
    xfce4 \
    xfce4-terminal \
    thunar \
    # Essential applications only
    firefox-esr \
    gedit \
    # System tools
    htop \
    # Development tools (minimal)
    git \
    nano \
    # Media support (minimal)
    ffmpeg \
    # Audio (minimal)
    pulseaudio \
    # VNC server
    x11vnc \
    # X server
    xvfb \
    # Python for desktop management
    python3 \
    python3-pip \
    # Build dependencies
    build-essential \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Python dependencies for desktop management
RUN pip3 install --no-cache-dir \
    fastapi>=0.104.0 \
    uvicorn>=0.24.0 \
    pydantic>=2.0.0 \
    structlog>=23.2.0

# Create non-root user
RUN groupadd --gid 1000 lucid && \
    useradd --uid 1000 --gid 1000 --shell /bin/bash --create-home lucid

# Set up application directory
WORKDIR /app
RUN chown -R lucid:lucid /app

# Copy desktop environment setup script
COPY <<EOF /app/desktop_setup.py
#!/usr/bin/env python3
"""
LUCID RDP Desktop Environment Setup - Distroless Security Version
SPEC-4 compliant secure desktop environment configuration
"""

import os
import sys
import logging
import subprocess
import asyncio
from typing import Dict, List

class SecureDesktopEnvironment:
    def __init__(self):
        self.display = os.getenv('DISPLAY', ':0')
        self.resolution = os.getenv('RESOLUTION', '1920x1080')
        self.vnc_port = int(os.getenv('VNC_PORT', '5900'))
        self.desktop_env = os.getenv('DESKTOP_ENV', 'xfce4')
        
    def setup_display(self) -> bool:
        """Setup virtual display with security restrictions"""
        try:
            # Start Xvfb with security restrictions
            cmd = [
                'Xvfb', self.display,
                '-screen', '0', f'{self.resolution}x24',
                '-ac', '+extension', 'GLX',
                '+render', '-noreset',
                # Security restrictions
                '-nolisten', 'tcp',
                '-nolisten', 'unix'
            ]
            
            subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            logging.info(f"Started secure Xvfb on {self.display}")
            
            # Wait for display to be ready
            import time
            time.sleep(3)
            
            return True
            
        except Exception as e:
            logging.error(f"Failed to setup display: {e}")
            return False
    
    def start_desktop_environment(self) -> bool:
        """Start the desktop environment with security restrictions"""
        try:
            env = os.environ.copy()
            env['DISPLAY'] = self.display
            
            if self.desktop_env == 'xfce4':
                cmd = ['startxfce4']
            else:
                logging.error(f"Unsupported desktop environment: {self.desktop_env}")
                return False
            
            subprocess.Popen(cmd, env=env, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            logging.info(f"Started secure {self.desktop_env} desktop environment")
            
            return True
            
        except Exception as e:
            logging.error(f"Failed to start desktop environment: {e}")
            return False
    
    def start_vnc_server(self) -> bool:
        """Start VNC server with security restrictions"""
        try:
            cmd = [
                'x11vnc',
                '-display', self.display,
                '-rfbport', str(self.vnc_port),
                '-forever',
                '-noxdamage',
                '-noxrecord',
                '-noxfixes',
                '-noxrandr',
                '-shared',
                '-nopw',
                '-bg',
                # Security restrictions
                '-localhost',
                '-noipv6'
            ]
            
            subprocess.run(cmd, check=True)
            logging.info(f"Started secure VNC server on port {self.vnc_port}")
            
            return True
            
        except Exception as e:
            logging.error(f"Failed to start VNC server: {e}")
            return False

async def main():
    desktop = SecureDesktopEnvironment()
    
    logging.info("Setting up LUCID Secure Desktop Environment...")
    
    # Setup components in order
    if not desktop.setup_display():
        logging.error("Failed to setup display")
        return
    
    if not desktop.start_desktop_environment():
        logging.error("Failed to start desktop environment")
        return
    
    # Wait for desktop to start
    await asyncio.sleep(10)
    
    if not desktop.start_vnc_server():
        logging.error("Failed to start VNC server")
        return
    
    logging.info("Secure desktop environment setup complete!")
    logging.info(f"VNC server running on port {desktop.vnc_port}")
    logging.info("Connect using: vncviewer localhost:5900")
    
    # Keep the container running
    try:
        while True:
            await asyncio.sleep(60)
    except KeyboardInterrupt:
        logging.info("Shutting down desktop environment...")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
EOF

# Make desktop setup executable
RUN chmod +x /app/desktop_setup.py

# Create secure desktop configuration
COPY <<EOF /app/desktop.conf
[display]
resolution = 1920x1080
color_depth = 24
dpi = 96

[desktop_environment]
type = xfce4
theme = Adwaita
icon_theme = Adwaita
cursor_theme = Adwaita

[vnc]
port = 5900
password = 
shared = true
forever = true
no_password = true
localhost_only = true

[security]
enable_vnc_auth = false
allow_remote_connections = false
restrict_local_access = true
disable_network_access = true
EOF

# Create secure desktop launcher script
COPY <<EOF /app/lucid-desktop-secure
#!/bin/bash
# LUCID Secure Desktop Environment Launcher

echo "Starting LUCID Secure Desktop Environment..."

# Set display
export DISPLAY=${DISPLAY:-:0}

# Start desktop setup
python3 /app/desktop_setup.py

echo "Desktop environment stopped."
EOF

RUN chmod +x /app/lucid-desktop-secure

# Stage 2: Distroless runtime with minimal desktop dependencies
FROM gcr.io/distroless/base-debian12:latest

# Copy essential binaries from builder
COPY --from=desktop-builder /usr/bin/Xvfb /usr/bin/Xvfb
COPY --from=desktop-builder /usr/bin/startxfce4 /usr/bin/startxfce4
COPY --from=desktop-builder /usr/bin/x11vnc /usr/bin/x11vnc
COPY --from=desktop-builder /usr/bin/python3 /usr/bin/python3
COPY --from=desktop-builder /usr/bin/firefox-esr /usr/bin/firefox-esr
COPY --from=desktop-builder /usr/bin/gedit /usr/bin/gedit
COPY --from=desktop-builder /usr/bin/htop /usr/bin/htop
COPY --from=desktop-builder /usr/bin/git /usr/bin/git
COPY --from=desktop-builder /usr/bin/nano /usr/bin/nano

# Copy required dynamic libraries
COPY --from=desktop-builder /lib/*-linux-*/libc.so.6 /lib/
COPY --from=desktop-builder /lib/*-linux-*/libssl.so.3 /lib/
COPY --from=desktop-builder /lib/*-linux-*/libcrypto.so.3 /lib/
COPY --from=desktop-builder /lib/*-linux-*/libz.so.1 /lib/
COPY --from=desktop-builder /lib*/ld-linux-*.so.2 /lib64/

# Copy user and group information
COPY --from=desktop-builder /etc/passwd /etc/passwd
COPY --from=desktop-builder /etc/group /etc/group

# Copy application with proper ownership
COPY --from=desktop-builder --chown=lucid:lucid /app /app

# Runtime environment for secure desktop
ENV DISPLAY=:0 \
    RESOLUTION=1920x1080 \
    VNC_PORT=5900 \
    DESKTOP_ENV=xfce4

# Security and runtime configuration
EXPOSE 5900
USER lucid
WORKDIR /app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ["python3", "-c", "import os; exit(0 if os.path.exists('/tmp/.X11-unix/X0') else 1)"]

# Entry point
ENTRYPOINT ["/app/lucid-desktop-secure"]
