# LUCID RDP Debug Utilities - Development and Debugging Tools
# SPEC-4 Compliant: Debug tools, logging analysis, performance profiling

FROM pickme/lucid:devcontainer-dind as base

LABEL org.lucid.plane="dev"
LABEL org.lucid.service="debug-utilities"
LABEL org.lucid.stage="1"

WORKDIR /workspaces/Lucid

# Install debugging and development tools
RUN apt-get update && apt-get install -y \
    gdb \
    valgrind \
    strace \
    ltrace \
    perf-tools-unstable \
    htop \
    iotop \
    nethogs \
    tcpdump \
    wireshark \
    python3-dev \
    python3-pip \
    python3-setuptools \
    build-essential \
    git \
    curl \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Install Python debugging libraries
RUN pip install --no-cache-dir \
    ipdb==0.13.13 \
    pdb++==0.10.3 \
    memory-profiler==0.61.0 \
    line-profiler==4.1.1 \
    py-spy==0.3.14 \
    pympler==0.9 \
    objgraph==3.6.0 \
    pytest==7.4.3 \
    pytest-cov==4.1.0 \
    pytest-asyncio==0.21.1 \
    pytest-mock==3.12.0

# Copy debug utilities
COPY <<EOF /workspaces/Lucid/tools/debug_analyzer.py
#!/usr/bin/env python3
"""
LUCID RDP Debug Analyzer
SPEC-4 compliant debugging and performance analysis tools
"""

import asyncio
import json
import logging
import os
import sys
import time
import tracemalloc
from typing import Dict, List, Optional
import psutil
import pympler.tracker
from memory_profiler import profile
import line_profiler

class DebugAnalyzer:
    def __init__(self):
        self.tracker = pympler.tracker.SummaryTracker()
        self.start_time = time.time()
        self.memory_snapshots = []
        
    def start_memory_tracking(self):
        """Start memory tracking"""
        tracemalloc.start()
        logging.info("Memory tracking started")
    
    def take_memory_snapshot(self) -> Dict:
        """Take a memory snapshot"""
        current, peak = tracemalloc.get_traced_memory()
        snapshot = {
            'timestamp': time.time(),
            'current_memory': current,
            'peak_memory': peak,
            'process_memory': psutil.Process().memory_info().rss,
            'available_memory': psutil.virtual_memory().available
        }
        self.memory_snapshots.append(snapshot)
        return snapshot
    
    def analyze_memory_leaks(self) -> Dict:
        """Analyze potential memory leaks"""
        self.tracker.print_diff()
        
        # Get memory diff
        diff = self.tracker.diff()
        return {
            'memory_diff': diff,
            'snapshots_count': len(self.memory_snapshots),
            'total_runtime': time.time() - self.start_time
        }
    
    def profile_function(self, func, *args, **kwargs):
        """Profile a function using line profiler"""
        profiler = line_profiler.LineProfiler()
        profiler.add_function(func)
        profiler.enable_by_count()
        
        result = func(*args, **kwargs)
        
        profiler.disable_by_count()
        profiler.print_stats()
        
        return result
    
    def analyze_performance(self) -> Dict:
        """Analyze system performance"""
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        return {
            'cpu_percent': cpu_percent,
            'memory': {
                'total': memory.total,
                'available': memory.available,
                'percent': memory.percent,
                'used': memory.used
            },
            'disk': {
                'total': disk.total,
                'used': disk.used,
                'free': disk.free,
                'percent': (disk.used / disk.total) * 100
            },
            'processes': len(psutil.pids())
        }
    
    def generate_debug_report(self) -> Dict:
        """Generate comprehensive debug report"""
        report = {
            'timestamp': time.time(),
            'system_info': {
                'platform': sys.platform,
                'python_version': sys.version,
                'cpu_count': psutil.cpu_count(),
                'boot_time': psutil.boot_time()
            },
            'performance': self.analyze_performance(),
            'memory_analysis': self.analyze_memory_leaks(),
            'memory_snapshots': self.memory_snapshots[-10:]  # Last 10 snapshots
        }
        
        return report

# Decorator for memory profiling
def memory_profile(func):
    """Decorator for memory profiling functions"""
    def wrapper(*args, **kwargs):
        return profile(func)(*args, **kwargs)
    return wrapper

async def main():
    analyzer = DebugAnalyzer()
    analyzer.start_memory_tracking()
    
    # Take initial memory snapshot
    analyzer.take_memory_snapshot()
    
    # Simulate some work for demonstration
    for i in range(10):
        # Simulate memory allocation
        data = [0] * 1000000
        await asyncio.sleep(1)
        
        if i % 3 == 0:
            analyzer.take_memory_snapshot()
    
    # Generate final report
    report = analyzer.generate_debug_report()
    
    # Save report to file
    with open('/tmp/debug_report.json', 'w') as f:
        json.dump(report, f, indent=2, default=str)
    
    logging.info("Debug analysis complete. Report saved to /tmp/debug_report.json")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
EOF

# Make debug analyzer executable
RUN chmod +x /workspaces/Lucid/tools/debug_analyzer.py

# Create debug configuration
COPY <<EOF /etc/lucid/debug.conf
[debugging]
enable_memory_tracking = true
enable_performance_monitoring = true
enable_log_analysis = true
snapshot_interval = 30

[profiling]
enable_line_profiling = true
enable_memory_profiling = true
enable_function_profiling = true

[logging]
log_level = DEBUG
log_file = /var/log/lucid/debug.log
max_log_size = 100MB
log_retention_days = 7

[performance]
cpu_threshold = 80
memory_threshold = 85
disk_threshold = 90
EOF

# Create debug utilities script
COPY <<EOF /workspaces/Lucid/tools/debug-utils.sh
#!/bin/bash
# Debug utilities helper script

echo "=== LUCID Debug Utilities ==="

case "${1:-help}" in
    "memory")
        echo "Running memory analysis..."
        python3 /workspaces/Lucid/tools/debug_analyzer.py
        ;;
    "performance")
        echo "Running performance analysis..."
        htop
        ;;
    "network")
        echo "Running network analysis..."
        tcpdump -i any -c 100
        ;;
    "logs")
        echo "Analyzing logs..."
        tail -f /var/log/lucid/debug.log
        ;;
    "profile")
        echo "Starting profiling session..."
        python3 -m cProfile /workspaces/Lucid/tools/debug_analyzer.py
        ;;
    *)
        echo "Usage: $0 {memory|performance|network|logs|profile}"
        echo ""
        echo "Available debug utilities:"
        echo "  memory    - Memory analysis and leak detection"
        echo "  performance - System performance monitoring"
        echo "  network   - Network traffic analysis"
        echo "  logs      - Log analysis and monitoring"
        echo "  profile   - Code profiling"
        exit 1
        ;;
esac
EOF

RUN chmod +x /workspaces/Lucid/tools/debug-utils.sh

# Create log directory
RUN mkdir -p /var/log/lucid
RUN chmod 755 /var/log/lucid

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python3 -c "import psutil; print('OK')" || exit 1

# Expose debug API
EXPOSE 8090

# Volume for debug data and logs
VOLUME ["/var/log/lucid", "/tmp/debug"]

# Entry point
CMD ["/workspaces/Lucid/tools/debug-utils.sh", "memory"]
