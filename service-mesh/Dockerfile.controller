# Multi-stage build for distroless container
# File: service-mesh/Dockerfile.controller
# Purpose: Distroless container build for Lucid Service Mesh Controller
# Build Host: Windows 11 console
# Target Host: Raspberry Pi (via SSH)
# Phase 2: Cross-Cluster Integration - Service Mesh Controller

FROM python:3.11-slim as builder

# Set build arguments
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG BUILD_DATE
ARG VERSION=1.0.0
ARG GIT_COMMIT=unknown

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Copy service mesh controller source code
COPY controller/ ./controller/
COPY sidecar/ ./sidecar/
COPY discovery/ ./discovery/
COPY communication/ ./communication/
COPY security/ ./security/
COPY config/ ./config/

# Create non-root user
RUN useradd --create-home --shell /bin/bash app

# Production stage - Distroless
FROM gcr.io/distroless/python3-debian12

# Set labels for Phase 2 compliance
LABEL maintainer="Lucid Development Team"
LABEL description="Lucid Service Mesh Controller - Phase 2 Distroless Container"
LABEL version="1.0.0"
LABEL build_date="${BUILD_DATE}"
LABEL git_commit="${GIT_COMMIT}"
LABEL phase="2"
LABEL cluster="10-cross-cluster-integration"
LABEL service="service-mesh-controller"

# Copy Python packages from builder
COPY --from=builder /root/.local /home/app/.local

# Copy application code
COPY --from=builder /app/controller /app/controller
COPY --from=builder /app/sidecar /app/sidecar
COPY --from=builder /app/discovery /app/discovery
COPY --from=builder /app/communication /app/communication
COPY --from=builder /app/security /app/security
COPY --from=builder /app/config /app/config

# Set working directory
WORKDIR /app

# Set Python path and environment
ENV PYTHONPATH=/app
ENV PATH=/home/app/.local/bin:$PATH
ENV SERVICE_NAME=service-mesh-controller
ENV PORT=8500
ENV LOG_LEVEL=INFO
ENV SERVICE_DISCOVERY_URL=http://consul:8500
ENV SERVICE_MESH_ENABLED=true

# Create app user (distroless has no useradd, using nonroot user)
USER 65532:65532

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8500/health')"]

# Expose ports
EXPOSE 8500

# Start application
CMD ["python", "-m", "controller.main"]
