# LUCID BLOCKCHAIN SERVICE - Multi-Stage Build Configuration
# Production-ready blockchain service with comprehensive security and monitoring
# Multi-platform build optimized for ARM64 Pi deployment and AMD64 development
# LUCID-MULTISTAGE Mode: Enhanced build optimization with minimal runtime footprint

# syntax=docker/dockerfile:1.7
FROM python:3.11-slim-bookworm AS blockchain-builder

# Build arguments for multi-platform support and build optimization
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0
ARG BASE_IMAGE=ghcr.io/HamiGames/Lucid/base:latest

# Metadata for blockchain service container
LABEL maintainer="Lucid Development Team" \
      version="${VERSION}-multistage" \
      description="Blockchain service for Lucid (Multi-Stage Build)" \
      org.lucid.plane="chain" \
      org.lucid.service="blockchain" \
      org.lucid.layer="2" \
      org.lucid.expose="8080" \
      org.lucid.monitoring="prometheus" \
      org.lucid.security="multistage" \
      org.opencontainers.image.title="Lucid Blockchain Service" \
      org.opencontainers.image.description="Blockchain integration service for Lucid network" \
      org.opencontainers.image.vendor="HamiGames" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.source="https://github.com/HamiGames/Lucid"

# Build-time environment for dependency installation and optimization
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    PIP_DEFAULT_RETRIES=3 \
    PIP_INDEX_URL=https://pypi.org/simple/ \
    PIP_EXTRA_INDEX_URL=""

# Install comprehensive build dependencies for blockchain operations
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        gcc \
        g++ \
        make \
        cmake \
        pkg-config \
        curl \
        wget \
        ca-certificates \
        netcat-openbsd \
        jq \
        gosu \
        git \
        libffi-dev \
        libssl-dev \
        libgmp-dev \
        libsodium-dev \
        libsecp256k1-dev \
        libzmq3-dev \
        libprotobuf-dev \
        protobuf-compiler \
        libpcre3-dev \
        libevent-dev \
        libgflags-dev \
        libsnappy-dev \
        libbz2-dev \
        liblz4-dev \
        libzstd-dev \
        libboost-all-dev \
        libcurl4-openssl-dev \
        libjsoncpp-dev \
        libmicrohttpd-dev \
        libreadline-dev \
        libncurses5-dev \
        libncursesw5-dev \
        libsqlite3-dev \
        libxml2-dev \
        libxslt1-dev \
        libyaml-dev \
        zlib1g-dev \
        libbz2-dev \
        liblzma-dev \
        libffi-dev \
        libgdbm-dev \
        libnss3-dev \
        libtinfo5 \
        dnsutils \
        iputils-ping \
        traceroute \
        net-tools \
        procps \
        htop \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y \
    && rm -rf /var/cache/apt/*

# Create service user with specific UID/GID for security
RUN groupadd --gid 1002 --system blockchain \
    && useradd --uid 1002 --gid blockchain --system --shell /bin/bash --create-home blockchain \
    && mkdir -p /home/blockchain/.local/bin \
    && chown -R blockchain:blockchain /home/blockchain

# Set up application directory structure
WORKDIR /app
RUN mkdir -p /app/{config,logs,data,cache,tmp,wallet,keys} \
    && chown -R blockchain:blockchain /app

# Install comprehensive Python dependencies for blockchain service
RUN pip install --no-cache-dir --upgrade pip setuptools wheel \
    && pip install --no-cache-dir \
        "fastapi>=0.104.0" \
        "uvicorn[standard]>=0.24.0" \
        "pydantic>=2.0.0" \
        "pydantic-settings>=2.0.0" \
        "httpx>=0.25.0" \
        "aiofiles>=23.0.0" \
        "python-multipart>=0.0.6" \
        "cryptography>=41.0.0" \
        "web3>=6.11.0" \
        "eth-account>=0.9.0" \
        "eth-utils>=2.0.0" \
        "eth-typing>=3.0.0" \
        "tronpy>=1.4.0" \
        "starknet.py>=0.11.0" \
        "motor>=3.0.0" \
        "pymongo>=4.6.0" \
        "redis>=5.0.0" \
        "aiohttp>=3.8.0" \
        "websockets>=11.0.0" \
        "requests>=2.31.0" \
        "python-dotenv>=1.0.0" \
        "structlog>=23.0.0" \
        "prometheus-client>=0.19.0" \
        "grpcio>=1.59.0" \
        "grpcio-tools>=1.59.0" \
        "protobuf>=4.24.0" \
        "zmq>=0.0.0" \
        "pyzmq>=25.1.0" \
        "opentelemetry-api>=1.20.0" \
        "opentelemetry-sdk>=1.20.0" \
        "opentelemetry-exporter-prometheus>=1.12.0" \
        "opentelemetry-instrumentation-fastapi>=0.41b0" \
        "opentelemetry-instrumentation-requests>=0.41b0" \
        "jaeger-client>=4.8.0" \
        "py-spy>=0.3.14" \
        "memory-profiler>=0.61.0" \
        "celery>=5.3.0" \
        "kombu>=5.3.0" \
        "billiard>=4.2.0" \
        "vine>=5.1.0"

# Copy and install blockchain-specific requirements
COPY blockchain/requirements.txt* /tmp/
RUN if [ -f /tmp/requirements.txt ]; then \
        pip install --no-cache-dir -r /tmp/requirements.txt; \
    fi

# Copy blockchain service source code with proper ownership
COPY --chown=blockchain:blockchain blockchain/ /app/blockchain/
COPY --chown=blockchain:blockchain src/blockchain/ /app/src/blockchain/
COPY --chown=blockchain:blockchain src/common/ /app/src/common/
COPY --chown=blockchain:blockchain common/ /app/common/

# Create comprehensive service directories
RUN mkdir -p \
        /var/lib/lucid/blockchain/{data,wallet,keys,backups,contracts} \
        /var/log/lucid/blockchain \
        /etc/lucid/blockchain \
        /var/cache/lucid/blockchain \
        /var/tmp/lucid/blockchain \
    && chown -R blockchain:blockchain /var/lib/lucid /var/log/lucid /etc/lucid /var/cache/lucid /var/tmp/lucid

# Copy blockchain configuration files
COPY --chown=blockchain:blockchain blockchain/config/ /etc/lucid/blockchain/

# Create blockchain startup script with comprehensive initialization
RUN cat > /usr/local/bin/start-blockchain.sh << 'EOF'
#!/bin/bash
set -euo pipefail

# Function to log messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [BLOCKCHAIN] $*" >&2
}

# Function to check service health
check_service() {
    local service_name="$1"
    local service_url="$2"
    local max_attempts=30
    local attempt=1
    
    log "Checking $service_name availability..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s --connect-timeout 5 "$service_url" >/dev/null 2>&1; then
            log "$service_name is available"
            return 0
        fi
        
        log "Waiting for $service_name... (attempt $attempt/$max_attempts)"
        sleep 2
        ((attempt++))
    done
    
    log "ERROR: $service_name is not available after $max_attempts attempts"
    return 1
}

# Wait for dependencies
log "Starting blockchain service initialization..."

# Check MongoDB connection
if ! check_service "MongoDB" "mongodb://$MONGODB_HOST:$MONGODB_PORT"; then
    log "ERROR: MongoDB is not available"
    exit 1
fi

# Check Redis connection
if ! check_service "Redis" "redis://$REDIS_HOST:$REDIS_PORT"; then
    log "ERROR: Redis is not available"
    exit 1
fi

# Initialize blockchain data directories
log "Initializing blockchain data directories..."
mkdir -p "$BLOCKCHAIN_DATA_DIR"/{wallet,keys,contracts,backups}
chmod 700 "$BLOCKCHAIN_DATA_DIR"/{wallet,keys}

# Initialize wallet if not exists
if [ ! -f "$BLOCKCHAIN_DATA_DIR/wallet/master.key" ]; then
    log "Initializing blockchain wallet..."
    python3 -c "
import os
import secrets
from pathlib import Path

wallet_dir = Path('$BLOCKCHAIN_DATA_DIR/wallet')
wallet_dir.mkdir(parents=True, exist_ok=True)

# Generate master key
master_key = secrets.token_hex(32)
with open(wallet_dir / 'master.key', 'w') as f:
    f.write(master_key)

# Set secure permissions
os.chmod(wallet_dir / 'master.key', 0o600)

print('Blockchain wallet initialized')
"
fi

# Load environment-specific configuration
if [ -f "/etc/lucid/blockchain/config.$ENVIRONMENT.yaml" ]; then
    log "Loading environment-specific configuration..."
    export BLOCKCHAIN_CONFIG_FILE="/etc/lucid/blockchain/config.$ENVIRONMENT.yaml"
fi

# Start blockchain service
log "Starting Lucid Blockchain service..."
exec python3 -m uvicorn src.blockchain.main:app \
    --host 0.0.0.0 \
    --port 8080 \
    --workers 1 \
    --access-log \
    --log-config /etc/lucid/blockchain/logging.yaml \
    --loop uvloop \
    --http httptools
EOF

RUN chmod +x /usr/local/bin/start-blockchain.sh

# Create blockchain health check script
RUN cat > /usr/local/bin/health-check.sh << 'EOF'
#!/bin/bash
set -euo pipefail

# Check if blockchain service is responding
if curl -f -s --connect-timeout 5 "http://localhost:8080/health" >/dev/null; then
    exit 0
else
    echo "Blockchain service health check failed"
    exit 1
fi
EOF

RUN chmod +x /usr/local/bin/health-check.sh

# Stage 2: Production runtime with optimized base image
FROM ${BASE_IMAGE} AS blockchain-runtime

# Build arguments for runtime
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0

# Metadata for production runtime
LABEL maintainer="Lucid Development Team" \
      version="${VERSION}-multistage" \
      description="Blockchain service for Lucid (Multi-Stage Runtime)" \
      org.lucid.plane="chain" \
      org.lucid.service="blockchain" \
      org.lucid.layer="2" \
      org.lucid.expose="8080" \
      org.lucid.monitoring="prometheus" \
      org.lucid.security="multistage" \
      org.opencontainers.image.title="Lucid Blockchain Service" \
      org.opencontainers.image.description="Blockchain integration service for Lucid network" \
      org.opencontainers.image.vendor="HamiGames" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}"

# Copy Python installation and packages from builder
COPY --from=blockchain-builder /usr/local/lib/python3.11 /usr/local/lib/python3.11
COPY --from=blockchain-builder /usr/local/bin/python3.11 /usr/local/bin/python3.11
COPY --from=blockchain-builder /usr/local/bin/uvicorn /usr/local/bin/uvicorn

# Copy essential system utilities
COPY --from=blockchain-builder /usr/bin/curl /usr/bin/curl
COPY --from=blockchain-builder /usr/bin/wget /usr/bin/wget
COPY --from=blockchain-builder /bin/nc /bin/nc
COPY --from=blockchain-builder /usr/bin/jq /usr/bin/jq
COPY --from=blockchain-builder /usr/sbin/gosu /usr/sbin/gosu

# Copy networking utilities
COPY --from=blockchain-builder /usr/bin/ping /usr/bin/ping
COPY --from=blockchain-builder /usr/bin/traceroute /usr/bin/traceroute
COPY --from=blockchain-builder /bin/ps /bin/ps

# Copy comprehensive dynamic libraries
COPY --from=blockchain-builder /lib/*-linux-*/libc.so.6 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libssl.so.3 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libcrypto.so.3 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libz.so.1 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/liblzma.so.5 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libzstd.so.1 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libffi.so.8 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libgmp.so.10 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libsodium.so.23 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libsecp256k1.so.0 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libzmq.so.5 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libprotobuf.so.32 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libgrpc.so.14 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libevent-2.1.so.7 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libboost_system.so.1.74.0 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libboost_thread.so.1.74.0 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libboost_filesystem.so.1.74.0 /lib/
COPY --from=blockchain-builder /lib/*-linux-*/libcurl.so.4 /lib/
COPY --from=blockchain-builder /lib*/ld-linux-*.so.2 /lib64/

# Copy user and group information
COPY --from=blockchain-builder /etc/passwd /etc/passwd
COPY --from=blockchain-builder /etc/group /etc/group

# Copy CA certificates and timezone data
COPY --from=blockchain-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=blockchain-builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy application and configuration
COPY --from=blockchain-builder --chown=nonroot:nonroot /app /app
COPY --from=blockchain-builder --chown=nonroot:nonroot /var/lib/lucid/blockchain /var/lib/lucid/blockchain
COPY --from=blockchain-builder --chown=nonroot:nonroot /var/log/lucid/blockchain /var/log/lucid/blockchain
COPY --from=blockchain-builder --chown=nonroot:nonroot /etc/lucid/blockchain /etc/lucid/blockchain
COPY --from=blockchain-builder --chown=nonroot:nonroot /var/cache/lucid/blockchain /var/cache/lucid/blockchain
COPY --from=blockchain-builder --chown=nonroot:nonroot /var/tmp/lucid/blockchain /var/tmp/lucid/blockchain

# Copy startup and health check scripts
COPY --from=blockchain-builder /usr/local/bin/start-blockchain.sh /usr/local/bin/start-blockchain.sh
COPY --from=blockchain-builder /usr/local/bin/health-check.sh /usr/local/bin/health-check.sh

# Production runtime environment
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    SERVICE_PORT=8080 \
    BLOCKCHAIN_DATA_DIR=/var/lib/lucid/blockchain \
    LOG_DIR=/var/log/lucid/blockchain \
    CONFIG_DIR=/etc/lucid/blockchain \
    CACHE_DIR=/var/cache/lucid/blockchain \
    TMP_DIR=/var/tmp/lucid/blockchain \
    MONGODB_HOST=lucid_mongo \
    MONGODB_PORT=27017 \
    MONGODB_NAME=lucid \
    MONGODB_USERNAME=lucid \
    MONGODB_PASSWORD=lucid \
    MONGODB_AUTH_SOURCE=admin \
    REDIS_HOST=lucid_redis \
    REDIS_PORT=6379 \
    REDIS_DB=0 \
    TRON_NETWORK=shasta \
    ETH_RPC_URL=http://localhost:8545 \
    BLOCKCHAIN_ENABLED=true \
    MONITORING_ENABLED=true \
    PROMETHEUS_PORT=9090 \
    JAEGER_ENDPOINT=http://jaeger:14268/api/traces \
    LOG_LEVEL=INFO \
    ENVIRONMENT=production \
    TZ=UTC

# Security and runtime configuration
EXPOSE 8080
EXPOSE 9090
USER nonroot
WORKDIR /app

# Health check with comprehensive monitoring
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD ["/usr/local/bin/health-check.sh"]

# Default command for production blockchain service
ENTRYPOINT ["/usr/local/bin/start-blockchain.sh"]
