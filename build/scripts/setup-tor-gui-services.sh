#!/bin/bash
# Path: build/scripts/setup-tor-gui-services.sh
# Setup Tor .onion services for GUI access
# Follows SPEC-5 Web-Based GUI Architecture

set -euo pipefail

# Default values
TOR_CONFIG_DIR="/etc/tor"
TOR_DATA_DIR="/var/lib/tor"
GUI_SERVICES="user,admin,node"
RESTART_TOR=true
VERBOSE=false
HELP=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_verbose() {
    if [[ "$VERBOSE" == "true" ]]; then
        echo -e "${CYAN}[VERBOSE]${NC} $1"
    fi
}

# Help function
show_help() {
    cat << EOF
Usage: $0 [OPTIONS]

Setup Tor .onion services for Lucid RDP GUI access.

OPTIONS:
    -c, --config-dir DIR       Tor configuration directory (default: /etc/tor)
    -d, --data-dir DIR         Tor data directory (default: /var/lib/tor)
    -s, --services SERVICES    Comma-separated list of GUI services (default: user,admin,node)
    -n, --no-restart           Don't restart Tor service
    -v, --verbose              Verbose output
    -h, --help                 Show this help message

EXAMPLES:
    # Setup all GUI .onion services
    $0

    # Setup specific services only
    $0 --services user,admin

    # Setup without restarting Tor
    $0 --no-restart

ENVIRONMENT VARIABLES:
    TOR_CONFIG_DIR             Tor configuration directory
    TOR_DATA_DIR               Tor data directory

EOF
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -c|--config-dir)
                TOR_CONFIG_DIR="$2"
                shift 2
                ;;
            -d|--data-dir)
                TOR_DATA_DIR="$2"
                shift 2
                ;;
            -s|--services)
                GUI_SERVICES="$2"
                shift 2
                ;;
            -n|--no-restart)
                RESTART_TOR=false
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                HELP=true
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# Validate prerequisites
validate_prerequisites() {
    log_info "Validating prerequisites..."
    
    # Check if running as root or with sudo
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root or with sudo"
        exit 1
    fi
    
    # Check if Tor is installed
    if ! command -v tor >/dev/null 2>&1; then
        log_error "Tor is not installed. Please install it with:"
        log_error "  Ubuntu/Debian: sudo apt-get install tor"
        log_error "  CentOS/RHEL: sudo yum install tor"
        exit 1
    fi
    
    # Check if Tor service exists
    if ! systemctl list-unit-files | grep -q "tor.service"; then
        log_error "Tor service not found"
        exit 1
    fi
    
    # Check if configuration directory exists
    if [[ ! -d "$TOR_CONFIG_DIR" ]]; then
        log_error "Tor configuration directory not found: $TOR_CONFIG_DIR"
        exit 1
    fi
    
    log_success "Prerequisites validated"
}

# Create Tor configuration for GUI services
create_tor_config() {
    log_info "Creating Tor configuration for GUI services..."
    
    # Create configuration directory for Lucid GUI
    mkdir -p "$TOR_CONFIG_DIR/torrc.d"
    
    # Create GUI services configuration
    cat > "$TOR_CONFIG_DIR/torrc.d/lucid-gui.conf" << 'EOF'
# Lucid RDP GUI .onion services configuration
# Generated by setup-tor-gui-services.sh

# User GUI .onion service
HiddenServiceDir /var/lib/tor/lucid-user-gui
HiddenServicePort 80 127.0.0.1:3001

# Admin GUI .onion service
HiddenServiceDir /var/lib/tor/lucid-admin-gui
HiddenServicePort 80 127.0.0.1:3002

# Node GUI .onion service
HiddenServiceDir /var/lib/tor/lucid-node-gui
HiddenServicePort 80 127.0.0.1:3003

# SOCKS proxy configuration
SOCKSPort 9050
ControlPort 9051
CookieAuthentication 1
IsolateSOCKSAuth 1

# Security settings
SafeLogging 1
Log notice file /var/log/tor/notice.log
Log info file /var/log/tor/info.log

# Connection settings
ConnectionPadding 1
ReducedConnectionPadding 0
ConnectionPaddingRelay 1
EOF
    
    log_success "Tor configuration created: $TOR_CONFIG_DIR/torrc.d/lucid-gui.conf"
}

# Create Tor data directories
create_tor_data_directories() {
    log_info "Creating Tor data directories..."
    
    # Create directories for each GUI service
    for service in $(echo "$GUI_SERVICES" | tr ',' ' '); do
        local service_dir="$TOR_DATA_DIR/lucid-$service-gui"
        
        if [[ ! -d "$service_dir" ]]; then
            mkdir -p "$service_dir"
            chown debian-tor:debian-tor "$service_dir"
            chmod 700 "$service_dir"
            log_verbose "Created directory: $service_dir"
        else
            log_verbose "Directory already exists: $service_dir"
        fi
    done
    
    # Ensure Tor data directory has correct permissions
    chown -R debian-tor:debian-tor "$TOR_DATA_DIR"
    chmod 700 "$TOR_DATA_DIR"
    
    log_success "Tor data directories created and configured"
}

# Configure Tor service
configure_tor_service() {
    log_info "Configuring Tor service..."
    
    # Enable Tor service
    systemctl enable tor
    
    # Create log directory
    mkdir -p /var/log/tor
    chown debian-tor:debian-tor /var/log/tor
    chmod 755 /var/log/tor
    
    # Configure logrotate for Tor logs
    cat > /etc/logrotate.d/tor << 'EOF'
/var/log/tor/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 644 debian-tor debian-tor
    postrotate
        /bin/kill -HUP `cat /var/run/tor/tor.pid 2> /dev/null` 2> /dev/null || true
    endscript
}
EOF
    
    log_success "Tor service configured"
}

# Start or restart Tor service
restart_tor_service() {
    if [[ "$RESTART_TOR" != "true" ]]; then
        log_info "Skipping Tor service restart (--no-restart specified)"
        return 0
    fi
    
    log_info "Restarting Tor service..."
    
    # Stop Tor service if running
    if systemctl is-active --quiet tor; then
        log_info "Stopping Tor service..."
        systemctl stop tor
        sleep 2
    fi
    
    # Start Tor service
    log_info "Starting Tor service..."
    systemctl start tor
    
    # Wait for Tor to be ready
    log_info "Waiting for Tor to be ready..."
    local max_attempts=30
    local attempt=0
    
    while [[ $attempt -lt $max_attempts ]]; do
        if nc -z localhost 9050; then
            log_success "Tor service is ready"
            return 0
        fi
        
        attempt=$((attempt + 1))
        log_verbose "Waiting for Tor... (attempt $attempt/$max_attempts)"
        sleep 2
    done
    
    log_error "Tor service failed to start or is not responding"
    return 1
}

# Wait for .onion services to be ready
wait_for_onion_services() {
    log_info "Waiting for .onion services to be ready..."
    
    local max_attempts=60
    local attempt=0
    local ready_services=0
    local total_services=$(echo "$GUI_SERVICES" | tr ',' '\n' | wc -l)
    
    while [[ $attempt -lt $max_attempts ]]; do
        ready_services=0
        
        for service in $(echo "$GUI_SERVICES" | tr ',' ' '); do
            local hostname_file="$TOR_DATA_DIR/lucid-$service-gui/hostname"
            if [[ -f "$hostname_file" ]]; then
                ready_services=$((ready_services + 1))
            fi
        done
        
        if [[ $ready_services -eq $total_services ]]; then
            log_success "All .onion services are ready"
            return 0
        fi
        
        attempt=$((attempt + 1))
        log_verbose "Waiting for .onion services... ($ready_services/$total_services ready, attempt $attempt/$max_attempts)"
        sleep 2
    done
    
    log_warn "Some .onion services may not be ready yet"
    return 1
}

# Display .onion URLs
display_onion_urls() {
    log_info "Displaying .onion URLs..."
    
    echo ""
    echo -e "${WHITE}=== Lucid RDP GUI .onion URLs ===${NC}"
    echo ""
    
    for service in $(echo "$GUI_SERVICES" | tr ',' ' '); do
        local hostname_file="$TOR_DATA_DIR/lucid-$service-gui/hostname"
        
        if [[ -f "$hostname_file" ]]; then
            local onion_url=$(cat "$hostname_file")
            local service_name=""
            
            case "$service" in
                user)
                    service_name="User GUI (End Users)"
                    ;;
                admin)
                    service_name="Admin GUI (Operators)"
                    ;;
                node)
                    service_name="Node GUI (Node Workers)"
                    ;;
                *)
                    service_name="$service GUI"
                    ;;
            esac
            
            echo -e "${CYAN}$service_name:${NC}"
            echo "https://$onion_url"
            echo ""
        else
            echo -e "${YELLOW}$service GUI: .onion service not ready${NC}"
            echo ""
        fi
    done
    
    echo -e "${GREEN}Note: Access these URLs through Tor Browser${NC}"
    echo ""
}

# Create QR codes for .onion URLs
create_qr_codes() {
    log_info "Creating QR codes for .onion URLs..."
    
    # Check if qrencode is available
    if ! command -v qrencode >/dev/null 2>&1; then
        log_warn "qrencode not found, skipping QR code generation"
        log_warn "Install with: sudo apt-get install qrencode"
        return 0
    fi
    
    # Create QR codes directory
    local qr_dir="/var/www/html/qr"
    mkdir -p "$qr_dir"
    
    # Generate QR codes for each service
    for service in $(echo "$GUI_SERVICES" | tr ',' ' '); do
        local hostname_file="$TOR_DATA_DIR/lucid-$service-gui/hostname"
        
        if [[ -f "$hostname_file" ]]; then
            local onion_url=$(cat "$hostname_file")
            local qr_file="$qr_dir/${service}-gui-qr.png"
            
            if qrencode -t PNG -o "$qr_file" "https://$onion_url"; then
                log_verbose "QR code created: $qr_file"
            else
                log_warn "Failed to create QR code for $service GUI"
            fi
        fi
    done
    
    log_success "QR codes created in $qr_dir"
}

# Configure firewall for Tor
configure_firewall() {
    log_info "Configuring firewall for Tor..."
    
    # Check if ufw is available
    if ! command -v ufw >/dev/null 2>&1; then
        log_warn "ufw not found, skipping firewall configuration"
        return 0
    fi
    
    # Enable firewall if not already enabled
    if ! ufw status | grep -q "Status: active"; then
        log_info "Enabling firewall..."
        ufw --force enable
    fi
    
    # Allow SSH
    ufw allow ssh
    
    # Allow Tor ports
    ufw allow 9050/tcp comment "Tor SOCKS"
    ufw allow 9051/tcp comment "Tor Control"
    
    # Allow GUI service ports (local access only)
    ufw allow from 127.0.0.1 to any port 3001 comment "User GUI"
    ufw allow from 127.0.0.1 to any port 3002 comment "Admin GUI"
    ufw allow from 127.0.0.1 to any port 3003 comment "Node GUI"
    
    log_success "Firewall configured for Tor and GUI services"
}

# Test Tor connectivity
test_tor_connectivity() {
    log_info "Testing Tor connectivity..."
    
    # Test SOCKS proxy
    if nc -z localhost 9050; then
        log_success "Tor SOCKS proxy is accessible"
    else
        log_error "Tor SOCKS proxy is not accessible"
        return 1
    fi
    
    # Test control port
    if nc -z localhost 9051; then
        log_success "Tor control port is accessible"
    else
        log_warn "Tor control port is not accessible"
    fi
    
    # Test .onion service connectivity (basic check)
    for service in $(echo "$GUI_SERVICES" | tr ',' ' '); do
        local hostname_file="$TOR_DATA_DIR/lucid-$service-gui/hostname"
        
        if [[ -f "$hostname_file" ]]; then
            local onion_url=$(cat "$hostname_file")
            log_verbose "Testing $service GUI .onion service: $onion_url"
            
            # Basic connectivity test (this will fail if GUI service isn't running)
            if timeout 5 curl --socks5 127.0.0.1:9050 -f "http://$onion_url" >/dev/null 2>&1; then
                log_success "$service GUI .onion service is accessible"
            else
                log_warn "$service GUI .onion service may not be ready (GUI service needs to be running)"
            fi
        fi
    done
    
    log_success "Tor connectivity test completed"
}

# Create systemd service for Tor monitoring
create_tor_monitoring_service() {
    log_info "Creating Tor monitoring service..."
    
    cat > /etc/systemd/system/lucid-tor-monitor.service << 'EOF'
[Unit]
Description=Lucid RDP Tor Service Monitor
After=tor.service
Requires=tor.service

[Service]
Type=oneshot
ExecStart=/usr/local/bin/lucid-tor-monitor.sh
RemainAfterExit=yes
User=root

[Install]
WantedBy=multi-user.target
EOF
    
    # Create monitoring script
    cat > /usr/local/bin/lucid-tor-monitor.sh << 'EOF'
#!/bin/bash
set -euo pipefail

# Monitor Tor service and .onion services
LOG_FILE="/var/log/lucid/tor-monitor.log"

# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")"

# Function to log with timestamp
log_with_timestamp() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Check if Tor service is running
if ! systemctl is-active --quiet tor; then
    log_with_timestamp "ERROR: Tor service is not running"
    systemctl start tor
    log_with_timestamp "INFO: Attempted to start Tor service"
fi

# Check SOCKS proxy
if ! nc -z localhost 9050; then
    log_with_timestamp "ERROR: Tor SOCKS proxy is not accessible"
fi

# Check .onion services
for service in user admin node; do
    hostname_file="/var/lib/tor/lucid-$service-gui/hostname"
    if [ -f "$hostname_file" ]; then
        onion_url=$(cat "$hostname_file")
        log_with_timestamp "INFO: $service GUI .onion service: $onion_url"
    else
        log_with_timestamp "WARN: $service GUI .onion service not ready"
    fi
done

log_with_timestamp "INFO: Tor monitoring completed"
EOF
    
    chmod +x /usr/local/bin/lucid-tor-monitor.sh
    systemctl enable lucid-tor-monitor.service
    
    log_success "Tor monitoring service created and enabled"
}

# Main function
main() {
    # Parse arguments
    parse_args "$@"
    
    # Show help if requested
    if [[ "$HELP" == "true" ]]; then
        show_help
        exit 0
    fi
    
    log_info "Starting Tor GUI services setup..."
    log_info "Configuration directory: $TOR_CONFIG_DIR"
    log_info "Data directory: $TOR_DATA_DIR"
    log_info "GUI services: $GUI_SERVICES"
    log_info "Restart Tor: $RESTART_TOR"
    log_info "Verbose: $VERBOSE"
    
    # Validate prerequisites
    validate_prerequisites
    
    # Create Tor configuration
    create_tor_config
    
    # Create Tor data directories
    create_tor_data_directories
    
    # Configure Tor service
    configure_tor_service
    
    # Configure firewall
    configure_firewall
    
    # Restart Tor service
    restart_tor_service
    
    # Wait for .onion services
    wait_for_onion_services
    
    # Create QR codes
    create_qr_codes
    
    # Create monitoring service
    create_tor_monitoring_service
    
    # Test connectivity
    test_tor_connectivity
    
    # Display .onion URLs
    display_onion_urls
    
    log_success "Tor GUI services setup completed successfully!"
    
    echo ""
    log_info "=== SETUP SUMMARY ==="
    log_info "Tor configuration: $TOR_CONFIG_DIR/torrc.d/lucid-gui.conf"
    log_info "Tor data directory: $TOR_DATA_DIR"
    log_info "QR codes: /var/www/html/qr/"
    log_info "Monitoring service: lucid-tor-monitor.service"
    log_info "Firewall: Configured for Tor and GUI services"
    
    echo ""
    log_info "Next steps:"
    log_info "1. Start your GUI services with Docker Compose"
    log_info "2. Access GUIs through Tor Browser using .onion URLs"
    log_info "3. Scan QR codes for easy access"
}

# Run main function with all arguments
main "$@"
