# LUCID NODE SERVICE - Distroless Build Configuration
# Professional node service for Pi deployment with distroless security
# Multi-platform build for ARM64 Pi and AMD64 development
# LUCID-STRICT Mode: Enhanced security with minimal attack surface

# syntax=docker/dockerfile:1.7
FROM python:3.11-slim AS node-builder

# Metadata for professional container management
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="Node service for Lucid (Distroless Build)" \
      org.lucid.plane="node" \
      org.lucid.service="node" \
      org.lucid.layer="3" \
      org.lucid.expose="8084"

# Build-time environment for dependency installation
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies and create service user
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        ca-certificates \
        netcat-traditional \
        jq \
        gosu \
        git \
        pkg-config \
        libffi-dev \
        libssl-dev \
        libgmp-dev \
        libsodium-dev \
        libsecp256k1-dev \
        libzmq3-dev \
        libprotobuf-dev \
        protobuf-compiler \
        tor \
        torsocks \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && groupadd --gid 1001 node \
    && useradd --uid 1001 --gid node --shell /bin/bash --create-home node

# Set up application directory
WORKDIR /app
RUN chown -R node:node /app

# Install node-specific Python dependencies
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir \
        "fastapi>=0.104.0" \
        "uvicorn[standard]>=0.24.0" \
        "pydantic>=2.0.0" \
        "pydantic-settings>=2.0.0" \
        "httpx>=0.25.0" \
        "aiofiles>=23.0.0" \
        "python-multipart>=0.0.6" \
        "cryptography>=41.0.0" \
        "motor>=3.0.0" \
        "pymongo>=4.6.0" \
        "redis>=5.0.0" \
        "aiohttp>=3.8.0" \
        "websockets>=11.0.0" \
        "requests>=2.31.0" \
        "psutil>=5.9.0" \
        "tronpy>=1.4.0" \
        "starknet.py>=0.11.0" \
        "python-dotenv>=1.0.0" \
        "structlog>=23.0.0" \
        "prometheus-client>=0.19.0" \
        "zmq>=0.0.0" \
        "protobuf>=4.24.0"

# Copy requirements if it exists and install additional dependencies
COPY node/requirements.txt* /app/
RUN if [ -f requirements.txt ]; then pip install --no-cache-dir -r requirements.txt; fi

# Copy node service source code
COPY --chown=node:node node/ /app/node/
COPY --chown=node:node src/ /app/src/
COPY --chown=node:node common/ /app/common/

# Create node service directories
RUN mkdir -p /var/lib/lucid/node /var/log/lucid/node /var/lib/tor \
    && chown -R node:node /var/lib/lucid/node /var/log/lucid/node /var/lib/tor

# Copy Tor configuration
COPY --chown=node:node node/tor/ /etc/tor/
RUN chmod 755 /etc/tor && chmod 644 /etc/tor/*

# Stage 2: Distroless runtime with Python and node dependencies
FROM gcr.io/distroless/python3-debian12:nonroot

# Metadata for runtime container
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="Node service for Lucid (Distroless Runtime)" \
      org.lucid.plane="node" \
      org.lucid.service="node" \
      org.lucid.layer="3" \
      org.lucid.expose="8084"

# Copy Python installation and packages from builder
COPY --from=node-builder /usr/local/lib/python3.11 /usr/local/lib/python3.11
COPY --from=node-builder /usr/local/bin/python3.11 /usr/local/bin/python3.11
COPY --from=node-builder /usr/local/bin/uvicorn /usr/local/bin/uvicorn

# Copy system dependencies for node operations
COPY --from=node-builder /usr/bin/curl /usr/bin/curl
COPY --from=node-builder /bin/nc /bin/nc
COPY --from=node-builder /usr/bin/jq /usr/bin/jq
COPY --from=node-builder /usr/sbin/gosu /usr/sbin/gosu
COPY --from=node-builder /usr/bin/tor /usr/bin/tor
COPY --from=node-builder /usr/bin/torsocks /usr/bin/torsocks

# Copy required dynamic libraries (architecture-specific)
COPY --from=node-builder /lib/*-linux-*/libc.so.6 /lib/
COPY --from=node-builder /lib/*-linux-*/libssl.so.3 /lib/
COPY --from=node-builder /lib/*-linux-*/libcrypto.so.3 /lib/
COPY --from=node-builder /lib/*-linux-*/libz.so.1 /lib/
COPY --from=node-builder /lib/*-linux-*/liblzma.so.5 /lib/
COPY --from=node-builder /lib/*-linux-*/libzstd.so.1 /lib/
COPY --from=node-builder /lib/*-linux-*/libffi.so.8 /lib/
COPY --from=node-builder /lib/*-linux-*/libgmp.so.10 /lib/
COPY --from=node-builder /lib/*-linux-*/libsodium.so.23 /lib/
COPY --from=node-builder /lib/*-linux-*/libsecp256k1.so.0 /lib/
COPY --from=node-builder /lib/*-linux-*/libzmq.so.5 /lib/
COPY --from=node-builder /lib/*-linux-*/libprotobuf.so.32 /lib/
COPY --from=node-builder /lib*/ld-linux-*.so.2 /lib64/

# Copy user and group information
COPY --from=node-builder /etc/passwd /etc/passwd
COPY --from=node-builder /etc/group /etc/group

# Copy CA certificates for network communication
COPY --from=node-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt

# Copy Tor configuration and binaries
COPY --from=node-builder /etc/tor /etc/tor
COPY --from=node-builder /var/lib/tor /var/lib/tor

# Copy application with proper ownership
COPY --from=node-builder --chown=nonroot:nonroot /app /app
COPY --from=node-builder --chown=nonroot:nonroot /var/lib/lucid/node /var/lib/lucid/node
COPY --from=node-builder --chown=nonroot:nonroot /var/log/lucid/node /var/log/lucid/node

# Runtime environment for node service
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    SERVICE_PORT=8084 \
    NODE_DATA_DIR=/var/lib/lucid/node \
    LOG_DIR=/var/log/lucid/node \
    MONGODB_URL=mongodb://lucid:lucid@lucid_mongo:27017/lucid?authSource=admin \
    REDIS_URL=redis://lucid_redis:6379/1 \
    TOR_SOCKS_PORT=9050 \
    TOR_CONTROL_PORT=9051 \
    NODE_ID=auto \
    CONSENSUS_ENABLED=true \
    DHT_ENABLED=true \
    ECONOMY_ENABLED=true \
    GOVERNANCE_ENABLED=true

# Security and runtime configuration
EXPOSE 8084
EXPOSE 9050
EXPOSE 9051
USER nonroot
WORKDIR /app

# Health check for node service
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD ["python3", "-c", "import requests; requests.get('http://localhost:8084/health', timeout=5)"]

# Default command for node service
ENTRYPOINT ["/usr/local/bin/python3.11", "-m", "uvicorn", "node.node_manager:app"]
CMD ["--host", "0.0.0.0", "--port", "8084", "--workers", "1"]
