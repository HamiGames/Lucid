openapi: 3.0.3
info:
  title: Lucid Session Management
  description: Session recording, processing, and storage pipeline for Lucid blockchain system
  version: 1.0.0
  contact:
    name: Lucid Development Team
    email: dev@lucid-blockchain.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://sessions.lucid-blockchain.org/api/v1
    description: Production session management server
  - url: https://sessions-dev.lucid-blockchain.org/api/v1
    description: Development session management server
  - url: http://localhost:8083/api/v1
    description: Local development server

security:
  - BearerAuth: []

paths:
  # Session Management
  /sessions:
    get:
      tags: [Sessions]
      summary: List user sessions
      description: Returns a paginated list of sessions for the authenticated user
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [active, completed, failed, cancelled]
        - name: sort
          in: query
          schema:
            type: string
            enum: [created_at, updated_at, name, size]
            default: created_at
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionListResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Sessions]
      summary: Create new session
      description: Creates a new recording session with the specified configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreateRequest'
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions/{session_id}:
    get:
      tags: [Sessions]
      summary: Get session details
      description: Returns detailed information about a specific session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Sessions]
      summary: Update session
      description: Updates the configuration or status of an existing session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionUpdateRequest'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Sessions]
      summary: Delete session
      description: Deletes an existing session and all associated data
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Session deleted successfully
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Session Control
  /sessions/{session_id}/start:
    post:
      tags: [Sessions]
      summary: Start session recording
      description: Starts recording for the specified session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionStartRequest'
      responses:
        '200':
          description: Session recording started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions/{session_id}/stop:
    post:
      tags: [Sessions]
      summary: Stop session recording
      description: Stops recording for the specified session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session recording stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions/{session_id}/pause:
    post:
      tags: [Sessions]
      summary: Pause session recording
      description: Pauses recording for the specified session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session recording paused successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions/{session_id}/resume:
    post:
      tags: [Sessions]
      summary: Resume session recording
      description: Resumes recording for the specified session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session recording resumed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Chunk Management
  /sessions/{session_id}/chunks:
    get:
      tags: [Chunks]
      summary: List session chunks
      description: Returns a paginated list of chunks for the specified session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          schema:
            type: string
            enum: [index, created_at, size]
            default: index
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Chunks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChunkListResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Chunks]
      summary: Upload chunk
      description: Uploads a new chunk for the specified session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChunkUploadRequest'
      responses:
        '201':
          description: Chunk uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChunkResponse'
        '400':
          description: Invalid chunk data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '413':
          description: Chunk too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions/{session_id}/chunks/{chunk_id}:
    get:
      tags: [Chunks]
      summary: Get chunk details
      description: Returns detailed information about a specific chunk
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: chunk_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Chunk details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChunkResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Chunk not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Chunks]
      summary: Delete chunk
      description: Deletes a specific chunk from the session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: chunk_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Chunk deleted successfully
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Chunk not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Pipeline Management
  /pipeline/status:
    get:
      tags: [Pipeline]
      summary: Get pipeline status
      description: Returns the current status of the session processing pipeline
      responses:
        '200':
          description: Pipeline status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineStatus'

  /pipeline/sessions/{session_id}/process:
    post:
      tags: [Pipeline]
      summary: Process session
      description: Initiates processing of a completed session through the pipeline
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionProcessRequest'
      responses:
        '202':
          description: Session processing initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionProcessResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /pipeline/sessions/{session_id}/status:
    get:
      tags: [Pipeline]
      summary: Get session processing status
      description: Returns the current processing status for a specific session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Processing status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionProcessStatus'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Storage Management
  /storage/status:
    get:
      tags: [Storage]
      summary: Get storage status
      description: Returns the current status of the storage system
      responses:
        '200':
          description: Storage status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageStatus'

  /storage/sessions/{session_id}/download:
    get:
      tags: [Storage]
      summary: Download session data
      description: Downloads the complete session data as a compressed archive
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: format
          in: query
          schema:
            type: string
            enum: [zip, tar, tar.gz]
            default: zip
      responses:
        '200':
          description: Session data downloaded successfully
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Session Schemas
    SessionResponse:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [active, paused, completed, failed, cancelled]
        recording_status:
          type: string
          enum: [not_started, recording, paused, stopped]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        duration:
          type: integer
          description: "Duration in seconds"
        size_bytes:
          type: integer
        chunk_count:
          type: integer
        compression_ratio:
          type: number
        encryption_enabled:
          type: boolean
        pipeline_status:
          type: string
          enum: [pending, processing, completed, failed]
        anchored:
          type: boolean
        anchored_at:
          type: string
          format: date-time

    SessionCreateRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        compression_enabled:
          type: boolean
          default: true
        encryption_enabled:
          type: boolean
          default: true
        max_size_bytes:
          type: integer
          minimum: 1048576
          maximum: 107374182400
          default: 10737418240
        chunk_size_bytes:
          type: integer
          minimum: 1048576
          maximum: 104857600
          default: 10485760

    SessionUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        status:
          type: string
          enum: [active, paused, completed, failed, cancelled]

    SessionStartRequest:
      type: object
      properties:
        recording_config:
          type: object
          properties:
            quality:
              type: string
              enum: [low, medium, high, ultra]
              default: medium
            frame_rate:
              type: integer
              minimum: 1
              maximum: 60
              default: 30
            resolution:
              type: string
              enum: [720p, 1080p, 1440p, 4k]
              default: 1080p

    SessionListResponse:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Chunk Schemas
    ChunkResponse:
      type: object
      properties:
        chunk_id:
          type: string
          format: uuid
        session_id:
          type: string
          format: uuid
        index:
          type: integer
        size_bytes:
          type: integer
        hash:
          type: string
        compressed_size:
          type: integer
        compression_ratio:
          type: number
        encrypted:
          type: boolean
        created_at:
          type: string
          format: date-time
        processed_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [uploaded, processing, processed, failed]

    ChunkUploadRequest:
      type: object
      required: [chunk_data]
      properties:
        chunk_data:
          type: string
          format: binary
        index:
          type: integer
        metadata:
          type: object

    ChunkListResponse:
      type: object
      properties:
        chunks:
          type: array
          items:
            $ref: '#/components/schemas/ChunkResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Pipeline Schemas
    PipelineStatus:
      type: object
      properties:
        active:
          type: boolean
        processing_count:
          type: integer
        queue_size:
          type: integer
        workers_active:
          type: integer
        workers_total:
          type: integer
        last_processed:
          type: string
          format: date-time
        average_processing_time:
          type: number
          description: "Average processing time in seconds"

    SessionProcessRequest:
      type: object
      properties:
        priority:
          type: string
          enum: [low, normal, high, urgent]
          default: normal
        processing_options:
          type: object
          properties:
            compression_level:
              type: integer
              minimum: 1
              maximum: 9
              default: 6
            encryption_enabled:
              type: boolean
              default: true
            merkle_tree_build:
              type: boolean
              default: true

    SessionProcessResponse:
      type: object
      properties:
        process_id:
          type: string
          format: uuid
        session_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [queued, processing, completed, failed]
        estimated_completion:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time

    SessionProcessStatus:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
        process_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [queued, processing, completed, failed]
        progress_percentage:
          type: number
          minimum: 0
          maximum: 100
        current_stage:
          type: string
          enum: [compression, encryption, merkle_build, storage, anchoring]
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        estimated_completion:
          type: string
          format: date-time
        error_message:
          type: string

    # Storage Schemas
    StorageStatus:
      type: object
      properties:
        total_capacity:
          type: integer
          description: "Total storage capacity in bytes"
        used_capacity:
          type: integer
          description: "Used storage capacity in bytes"
        available_capacity:
          type: integer
          description: "Available storage capacity in bytes"
        session_count:
          type: integer
        chunk_count:
          type: integer
        compression_ratio:
          type: number
        last_cleanup:
          type: string
          format: date-time
        health_status:
          type: string
          enum: [healthy, warning, critical]

    # Common Schemas
    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "LUCID_ERR_4001"
            message:
              type: string
              example: "Session not found"
            details:
              type: object
              additionalProperties: true
            request_id:
              type: string
              format: uuid
            timestamp:
              type: string
              format: date-time
            service:
              type: string
              example: "session-management"
            version:
              type: string
              example: "v1"

tags:
  - name: Sessions
    description: Session lifecycle management
  - name: Chunks
    description: Chunk upload and management
  - name: Pipeline
    description: Session processing pipeline
  - name: Storage
    description: Session storage and retrieval
