openapi: 3.0.3
info:
  title: Lucid Admin Interface
  description: System administration and monitoring interface for Lucid blockchain system
  version: 1.0.0
  contact:
    name: Lucid Development Team
    email: dev@lucid-blockchain.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://admin.lucid-blockchain.org/api/v1
    description: Production admin interface server
  - url: https://admin-dev.lucid-blockchain.org/api/v1
    description: Development admin interface server
  - url: http://localhost:8083/api/v1
    description: Local development server

security:
  - BearerAuth: []

paths:
  # Dashboard
  /dashboard/overview:
    get:
      tags: [Dashboard]
      summary: Get system overview
      description: Returns comprehensive system overview data for the admin dashboard
      responses:
        '200':
          description: System overview retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemOverviewResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /dashboard/metrics:
    get:
      tags: [Dashboard]
      summary: Get system metrics
      description: Returns real-time system metrics and performance data
      parameters:
        - name: time_range
          in: query
          schema:
            type: string
            enum: [1h, 6h, 24h, 7d, 30d]
            default: 24h
        - name: metric_type
          in: query
          schema:
            type: string
            enum: [system, blockchain, sessions, nodes, users]
            default: system
      responses:
        '200':
          description: System metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemMetricsResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Management
  /users:
    get:
      tags: [Users]
      summary: List all users
      description: Returns a paginated list of all users in the system
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: role
          in: query
          schema:
            type: string
            enum: [user, node_operator, admin, super_admin]
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended, pending]
        - name: search
          in: query
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
            enum: [created_at, updated_at, last_login, username, email]
            default: created_at
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}:
    get:
      tags: [Users]
      summary: Get user details
      description: Returns detailed information about a specific user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Users]
      summary: Update user
      description: Updates user information and permissions
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Users]
      summary: Delete user
      description: Deletes a user and all associated data
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/suspend:
    post:
      tags: [Users]
      summary: Suspend user
      description: Suspends a user account temporarily
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSuspendRequest'
      responses:
        '200':
          description: User suspended successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsResponse'
        '400':
          description: Invalid suspension request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/activate:
    post:
      tags: [Users]
      summary: Activate user
      description: Activates a suspended user account
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Session Management
  /sessions:
    get:
      tags: [Sessions]
      summary: List all sessions
      description: Returns a paginated list of all sessions in the system
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [active, completed, failed, cancelled]
        - name: user_id
          in: query
          schema:
            type: string
            format: uuid
        - name: date_from
          in: query
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          schema:
            type: string
            format: date
        - name: sort
          in: query
          schema:
            type: string
            enum: [created_at, updated_at, size_bytes, duration]
            default: created_at
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionListResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions/{session_id}:
    get:
      tags: [Sessions]
      summary: Get session details
      description: Returns detailed information about a specific session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionDetailsResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Sessions]
      summary: Delete session
      description: Deletes a session and all associated data
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Session deleted successfully
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Blockchain Management
  /blockchain/status:
    get:
      tags: [Blockchain]
      summary: Get blockchain status
      description: Returns the current status of the lucid_blocks blockchain
      responses:
        '200':
          description: Blockchain status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainStatusResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /blockchain/transactions:
    get:
      tags: [Blockchain]
      summary: List blockchain transactions
      description: Returns a paginated list of blockchain transactions
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: type
          in: query
          schema:
            type: string
            enum: [session_anchor, payout, governance]
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, confirmed, failed]
        - name: date_from
          in: query
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          schema:
            type: string
            format: date
        - name: sort
          in: query
          schema:
            type: string
            enum: [created_at, amount, status]
            default: created_at
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Blockchain transactions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainTransactionListResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Node Management
  /nodes:
    get:
      tags: [Nodes]
      summary: List all nodes
      description: Returns a paginated list of all worker nodes
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, pending, suspended, error]
        - name: pool_id
          in: query
          schema:
            type: string
            format: uuid
        - name: sort
          in: query
          schema:
            type: string
            enum: [created_at, updated_at, poot_score, name]
            default: created_at
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Nodes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeListResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /nodes/{node_id}/suspend:
    post:
      tags: [Nodes]
      summary: Suspend node
      description: Suspends a worker node
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeSuspendRequest'
      responses:
        '200':
          description: Node suspended successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'
        '400':
          description: Invalid suspension request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # System Management
  /system/health:
    get:
      tags: [System]
      summary: Get system health
      description: Returns the health status of all system components
      responses:
        '200':
          description: System health retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealthResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /system/logs:
    get:
      tags: [System]
      summary: Get system logs
      description: Returns system logs with filtering options
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: level
          in: query
          schema:
            type: string
            enum: [debug, info, warning, error, critical]
        - name: service
          in: query
          schema:
            type: string
        - name: date_from
          in: query
          schema:
            type: string
            format: date-time
        - name: date_to
          in: query
          schema:
            type: string
            format: date-time
        - name: search
          in: query
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
            enum: [timestamp, level, service]
            default: timestamp
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: System logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemLogsResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Emergency Controls
  /emergency/lockdown:
    post:
      tags: [Emergency]
      summary: System lockdown
      description: Initiates system-wide lockdown for emergency situations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmergencyLockdownRequest'
      responses:
        '200':
          description: System lockdown initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmergencyResponse'
        '400':
          description: Invalid lockdown request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /emergency/shutdown:
    post:
      tags: [Emergency]
      summary: System shutdown
      description: Initiates controlled system shutdown
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmergencyShutdownRequest'
      responses:
        '200':
          description: System shutdown initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmergencyResponse'
        '400':
          description: Invalid shutdown request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /emergency/status:
    get:
      tags: [Emergency]
      summary: Get emergency status
      description: Returns the current emergency status of the system
      responses:
        '200':
          description: Emergency status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmergencyStatusResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Audit Logging
  /audit/logs:
    get:
      tags: [Audit]
      summary: Get audit logs
      description: Returns audit logs for administrative actions
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: user_id
          in: query
          schema:
            type: string
            format: uuid
        - name: action
          in: query
          schema:
            type: string
        - name: resource_type
          in: query
          schema:
            type: string
        - name: date_from
          in: query
          schema:
            type: string
            format: date-time
        - name: date_to
          in: query
          schema:
            type: string
            format: date-time
        - name: sort
          in: query
          schema:
            type: string
            enum: [timestamp, user_id, action]
            default: timestamp
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Audit logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogsResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Dashboard Schemas
    SystemOverviewResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        system_status:
          type: string
          enum: [healthy, warning, critical, maintenance]
        total_users:
          type: integer
        active_users:
          type: integer
        total_sessions:
          type: integer
        active_sessions:
          type: integer
        total_nodes:
          type: integer
        active_nodes:
          type: integer
        blockchain_height:
          type: integer
        blockchain_transactions:
          type: integer
        system_uptime:
          type: integer
          description: "System uptime in seconds"
        resource_usage:
          $ref: '#/components/schemas/SystemResourceUsage'

    SystemMetricsResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        time_range:
          type: string
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/MetricDataPoint'

    SystemResourceUsage:
      type: object
      properties:
        cpu_usage:
          type: number
          minimum: 0
          maximum: 100
        memory_usage:
          type: number
          minimum: 0
          maximum: 100
        disk_usage:
          type: number
          minimum: 0
          maximum: 100
        network_usage:
          type: object
          properties:
            bytes_sent:
              type: integer
            bytes_received:
              type: integer

    MetricDataPoint:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        value:
          type: number
        metric_name:
          type: string
        service:
          type: string

    # User Schemas
    UserDetailsResponse:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [user, node_operator, admin, super_admin]
        status:
          type: string
          enum: [active, inactive, suspended, pending]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time
        hardware_wallet_enabled:
          type: boolean
        session_count:
          type: integer
        total_storage_used:
          type: integer
        permissions:
          type: array
          items:
            type: string

    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [user, node_operator, admin, super_admin]
        status:
          type: string
          enum: [active, inactive, suspended, pending]
        permissions:
          type: array
          items:
            type: string

    UserSuspendRequest:
      type: object
      required: [reason]
      properties:
        reason:
          type: string
          minLength: 1
          maxLength: 500
        duration_hours:
          type: integer
          minimum: 1
          maximum: 8760
        notify_user:
          type: boolean
          default: true

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserDetailsResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Session Schemas
    SessionDetailsResponse:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        username:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [active, completed, failed, cancelled]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        duration:
          type: integer
          description: "Duration in seconds"
        size_bytes:
          type: integer
        chunk_count:
          type: integer
        compression_ratio:
          type: number
        encryption_enabled:
          type: boolean
        pipeline_status:
          type: string
          enum: [pending, processing, completed, failed]
        anchored:
          type: boolean
        anchored_at:
          type: string
          format: date-time

    SessionListResponse:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionDetailsResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Blockchain Schemas
    BlockchainStatusResponse:
      type: object
      properties:
        network_name:
          type: string
          example: "lucid_blocks"
        status:
          type: string
          enum: [syncing, synced, error]
        current_height:
          type: integer
        total_transactions:
          type: integer
        consensus_active:
          type: boolean
        last_block_time:
          type: string
          format: date-time
        sync_percentage:
          type: number
          minimum: 0
          maximum: 100
        peer_count:
          type: integer

    BlockchainTransactionListResponse:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/BlockchainTransactionResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    BlockchainTransactionResponse:
      type: object
      properties:
        transaction_id:
          type: string
        type:
          type: string
          enum: [session_anchor, payout, governance]
        status:
          type: string
          enum: [pending, confirmed, failed]
        block_height:
          type: integer
        amount:
          type: number
        from_address:
          type: string
        to_address:
          type: string
        created_at:
          type: string
          format: date-time
        confirmed_at:
          type: string
          format: date-time

    # Node Schemas
    NodeResponse:
      type: object
      properties:
        node_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        username:
          type: string
        name:
          type: string
        status:
          type: string
          enum: [active, inactive, pending, suspended, error]
        pool_id:
          type: string
          format: uuid
        ip_address:
          type: string
        port:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_seen:
          type: string
          format: date-time
        poot_score:
          type: number
        total_observation_time:
          type: integer
        resource_usage:
          $ref: '#/components/schemas/ResourceUsage'

    NodeSuspendRequest:
      type: object
      required: [reason]
      properties:
        reason:
          type: string
          minLength: 1
          maxLength: 500
        duration_hours:
          type: integer
          minimum: 1
          maximum: 8760
        notify_user:
          type: boolean
          default: true

    NodeListResponse:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/NodeResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # System Schemas
    SystemHealthResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        overall_status:
          type: string
          enum: [healthy, warning, critical]
        components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentHealth'

    ComponentHealth:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum: [healthy, warning, critical, unknown]
        uptime:
          type: integer
          description: "Component uptime in seconds"
        response_time:
          type: number
          description: "Average response time in milliseconds"
        last_check:
          type: string
          format: date-time

    SystemLogsResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/SystemLogEntry'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    SystemLogEntry:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        level:
          type: string
          enum: [debug, info, warning, error, critical]
        service:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true

    # Emergency Schemas
    EmergencyLockdownRequest:
      type: object
      required: [reason]
      properties:
        reason:
          type: string
          minLength: 1
          maxLength: 500
        scope:
          type: string
          enum: [full_system, user_access, node_operations, blockchain_operations]
          default: full_system
        duration_minutes:
          type: integer
          minimum: 1
          maximum: 1440
          default: 60
        notify_users:
          type: boolean
          default: true

    EmergencyShutdownRequest:
      type: object
      required: [reason]
      properties:
        reason:
          type: string
          minLength: 1
          maxLength: 500
        graceful_shutdown:
          type: boolean
          default: true
        shutdown_delay_seconds:
          type: integer
          minimum: 0
          maximum: 300
          default: 30
        notify_users:
          type: boolean
          default: true

    EmergencyResponse:
      type: object
      properties:
        emergency_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [initiated, in_progress, completed, failed]
        initiated_at:
          type: string
          format: date-time
        estimated_completion:
          type: string
          format: date-time

    EmergencyStatusResponse:
      type: object
      properties:
        emergency_active:
          type: boolean
        current_emergency:
          type: object
          properties:
            emergency_id:
              type: string
              format: uuid
            type:
              type: string
              enum: [lockdown, shutdown]
            status:
              type: string
              enum: [initiated, in_progress, completed, failed]
            initiated_at:
              type: string
              format: date-time
            reason:
              type: string

    # Audit Schemas
    AuditLogsResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogEntry'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    AuditLogEntry:
      type: object
      properties:
        log_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        username:
          type: string
        action:
          type: string
        resource_type:
          type: string
        resource_id:
          type: string
        details:
          type: object
          additionalProperties: true
        ip_address:
          type: string
        user_agent:
          type: string
        timestamp:
          type: string
          format: date-time

    # Common Schemas
    ResourceUsage:
      type: object
      properties:
        cpu_usage:
          type: number
          minimum: 0
          maximum: 100
        memory_usage:
          type: number
          minimum: 0
          maximum: 100
        disk_usage:
          type: number
          minimum: 0
          maximum: 100
        network_usage:
          type: object
          properties:
            bytes_sent:
              type: integer
            bytes_received:
              type: integer
            packets_sent:
              type: integer
            packets_received:
              type: integer

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "LUCID_ERR_4001"
            message:
              type: string
              example: "User not found"
            details:
              type: object
              additionalProperties: true
            request_id:
              type: string
              format: uuid
            timestamp:
              type: string
              format: date-time
            service:
              type: string
              example: "admin-interface"
            version:
              type: string
              example: "v1"

tags:
  - name: Dashboard
    description: System overview and metrics
  - name: Users
    description: User management operations
  - name: Sessions
    description: Session management and monitoring
  - name: Blockchain
    description: Blockchain status and transaction management
  - name: Nodes
    description: Worker node management
  - name: System
    description: System health and logging
  - name: Emergency
    description: Emergency controls and procedures
  - name: Audit
    description: Audit logging and compliance
