openapi: 3.0.3
info:
  title: Lucid Blockchain Core
  description: Core blockchain operations for lucid_blocks system - consensus, block management, and session anchoring
  version: 1.0.0
  contact:
    name: Lucid Development Team
    email: dev@lucid-blockchain.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://blockchain.lucid-blockchain.org/api/v1
    description: Production blockchain server
  - url: https://blockchain-dev.lucid-blockchain.org/api/v1
    description: Development blockchain server
  - url: http://localhost:8084/api/v1
    description: Local development server

security:
  - BearerAuth: []

paths:
  # Blockchain Information
  /blockchain/info:
    get:
      tags: [Blockchain]
      summary: Get blockchain information
      description: Returns comprehensive information about the lucid_blocks blockchain
      responses:
        '200':
          description: Blockchain information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainInfo'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /blockchain/status:
    get:
      tags: [Blockchain]
      summary: Get blockchain status
      description: Returns the current operational status of the blockchain
      responses:
        '200':
          description: Blockchain status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainStatus'

  # Block Management
  /blocks:
    get:
      tags: [Blocks]
      summary: List blocks
      description: Returns a paginated list of blocks from the blockchain
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: height
          in: query
          schema:
            type: integer
            minimum: 0
        - name: hash
          in: query
          schema:
            type: string
        - name: from_height
          in: query
          schema:
            type: integer
        - name: to_height
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Blocks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockListResponse'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Blocks]
      summary: Create new block
      description: Creates a new block with the provided transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockCreateRequest'
      responses:
        '201':
          description: Block created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
        '400':
          description: Invalid block data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /blocks/{block_id}:
    get:
      tags: [Blocks]
      summary: Get block by ID
      description: Returns detailed information about a specific block
      parameters:
        - name: block_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Block details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
        '404':
          description: Block not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /blocks/latest:
    get:
      tags: [Blocks]
      summary: Get latest block
      description: Returns the most recent block in the blockchain
      responses:
        '200':
          description: Latest block retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
        '404':
          description: No blocks found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /blocks/height/{height}:
    get:
      tags: [Blocks]
      summary: Get block by height
      description: Returns the block at the specified height
      parameters:
        - name: height
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Block retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
        '404':
          description: Block not found at specified height
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Transaction Management
  /transactions:
    get:
      tags: [Transactions]
      summary: List transactions
      description: Returns a paginated list of transactions
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: type
          in: query
          schema:
            type: string
            enum: [session_anchor, payout, governance]
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, confirmed, failed]
        - name: block_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListResponse'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Transactions]
      summary: Submit transaction
      description: Submits a new transaction to the blockchain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionSubmitRequest'
      responses:
        '202':
          description: Transaction submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Invalid transaction data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/{transaction_id}:
    get:
      tags: [Transactions]
      summary: Get transaction by ID
      description: Returns detailed information about a specific transaction
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Session Anchoring
  /anchoring/session:
    post:
      tags: [Anchoring]
      summary: Anchor session to blockchain
      description: Anchors a session manifest to the blockchain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionAnchorRequest'
      responses:
        '201':
          description: Session anchored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionAnchorResponse'
        '400':
          description: Invalid session data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /anchoring/session/{session_id}:
    get:
      tags: [Anchoring]
      summary: Get session anchoring status
      description: Returns the anchoring status for a specific session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Anchoring status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionAnchorStatus'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /anchoring/verify:
    post:
      tags: [Anchoring]
      summary: Verify session anchoring
      description: Verifies that a session has been properly anchored to the blockchain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnchoringVerifyRequest'
      responses:
        '200':
          description: Anchoring verification completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnchoringVerifyResponse'
        '400':
          description: Invalid verification data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Consensus Operations
  /consensus/status:
    get:
      tags: [Consensus]
      summary: Get consensus status
      description: Returns the current consensus status and participant information
      responses:
        '200':
          description: Consensus status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsensusStatus'

  /consensus/participants:
    get:
      tags: [Consensus]
      summary: List consensus participants
      description: Returns a list of active consensus participants
      responses:
        '200':
          description: Participants retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsensusParticipantsResponse'

  /consensus/vote:
    post:
      tags: [Consensus]
      summary: Submit consensus vote
      description: Submits a vote for a consensus round
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsensusVoteRequest'
      responses:
        '200':
          description: Vote submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsensusVoteResponse'
        '400':
          description: Invalid vote data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Merkle Tree Operations
  /merkle/build:
    post:
      tags: [Merkle]
      summary: Build Merkle tree
      description: Builds a Merkle tree from the provided chunk hashes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerkleBuildRequest'
      responses:
        '200':
          description: Merkle tree built successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleTreeResponse'
        '400':
          description: Invalid chunk data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /merkle/verify:
    post:
      tags: [Merkle]
      summary: Verify Merkle proof
      description: Verifies a Merkle proof for a specific chunk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerkleVerifyRequest'
      responses:
        '200':
          description: Merkle proof verification completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleVerifyResponse'
        '400':
          description: Invalid proof data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /merkle/{tree_id}:
    get:
      tags: [Merkle]
      summary: Get Merkle tree
      description: Returns information about a specific Merkle tree
      parameters:
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Merkle tree retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleTreeResponse'
        '404':
          description: Merkle tree not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Blockchain Schemas
    BlockchainInfo:
      type: object
      properties:
        network_name:
          type: string
          example: "lucid_blocks"
        version:
          type: string
          example: "1.0.0"
        current_height:
          type: integer
          example: 12345
        genesis_block:
          type: string
          example: "0000000000000000000000000000000000000000000000000000000000000000"
        consensus_algorithm:
          type: string
          example: "PoOT"
        block_time:
          type: integer
          description: "Average block time in seconds"
          example: 10
        total_transactions:
          type: integer
          example: 98765
        network_hash_rate:
          type: number
          description: "Network hash rate in TH/s"
        difficulty:
          type: number
          description: "Current mining difficulty"

    BlockchainStatus:
      type: object
      properties:
        status:
          type: string
          enum: [syncing, synced, error]
        last_block_time:
          type: string
          format: date-time
        sync_percentage:
          type: number
          minimum: 0
          maximum: 100
        peer_count:
          type: integer
        consensus_active:
          type: boolean

    # Block Schemas
    BlockResponse:
      type: object
      properties:
        block_id:
          type: string
        height:
          type: integer
        hash:
          type: string
        previous_hash:
          type: string
        timestamp:
          type: string
          format: date-time
        nonce:
          type: integer
        difficulty:
          type: number
        merkle_root:
          type: string
        transaction_count:
          type: integer
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionInfo'
        size_bytes:
          type: integer
        created_at:
          type: string
          format: date-time

    BlockCreateRequest:
      type: object
      required: [transactions]
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionSubmitRequest'
        nonce:
          type: integer
        difficulty:
          type: number

    BlockListResponse:
      type: object
      properties:
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/BlockResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Transaction Schemas
    TransactionResponse:
      type: object
      properties:
        transaction_id:
          type: string
        type:
          type: string
          enum: [session_anchor, payout, governance]
        status:
          type: string
          enum: [pending, confirmed, failed]
        block_id:
          type: string
        block_height:
          type: integer
        data:
          type: object
        signature:
          type: string
        submitted_at:
          type: string
          format: date-time
        confirmed_at:
          type: string
          format: date-time
        fee:
          type: number

    TransactionSubmitRequest:
      type: object
      required: [type, data, signature]
      properties:
        type:
          type: string
          enum: [session_anchor, payout, governance]
        data:
          type: object
        signature:
          type: string
        fee:
          type: number
          minimum: 0

    TransactionListResponse:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    TransactionInfo:
      type: object
      properties:
        transaction_id:
          type: string
        type:
          type: string
        status:
          type: string
        timestamp:
          type: string
          format: date-time

    # Session Anchoring Schemas
    SessionAnchorRequest:
      type: object
      required: [session_id, merkle_root, chunk_count]
      properties:
        session_id:
          type: string
          format: uuid
        merkle_root:
          type: string
        chunk_count:
          type: integer
          minimum: 1
        total_size:
          type: integer
          minimum: 0
        metadata:
          type: object

    SessionAnchorResponse:
      type: object
      properties:
        anchor_id:
          type: string
          format: uuid
        session_id:
          type: string
          format: uuid
        block_id:
          type: string
        block_height:
          type: integer
        transaction_id:
          type: string
        anchored_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, confirmed, failed]

    SessionAnchorStatus:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
        anchored:
          type: boolean
        block_id:
          type: string
        block_height:
          type: integer
        transaction_id:
          type: string
        anchored_at:
          type: string
          format: date-time
        confirmation_count:
          type: integer

    AnchoringVerifyRequest:
      type: object
      required: [session_id, merkle_root]
      properties:
        session_id:
          type: string
          format: uuid
        merkle_root:
          type: string

    AnchoringVerifyResponse:
      type: object
      properties:
        verified:
          type: boolean
        block_id:
          type: string
        block_height:
          type: integer
        confirmation_count:
          type: integer

    # Consensus Schemas
    ConsensusStatus:
      type: object
      properties:
        active:
          type: boolean
        current_round:
          type: integer
        participants_count:
          type: integer
        consensus_threshold:
          type: number
        last_consensus_time:
          type: string
          format: date-time
        next_round_time:
          type: string
          format: date-time

    ConsensusParticipantsResponse:
      type: object
      properties:
        participants:
          type: array
          items:
            $ref: '#/components/schemas/ConsensusParticipant'
        total_count:
          type: integer

    ConsensusParticipant:
      type: object
      properties:
        node_id:
          type: string
        address:
          type: string
        stake:
          type: number
        poot_score:
          type: number
        last_seen:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, inactive, suspended]

    ConsensusVoteRequest:
      type: object
      required: [block_id, vote]
      properties:
        block_id:
          type: string
        vote:
          type: string
          enum: [approve, reject, abstain]
        signature:
          type: string

    ConsensusVoteResponse:
      type: object
      properties:
        vote_id:
          type: string
        status:
          type: string
          enum: [accepted, rejected, pending]
        submitted_at:
          type: string
          format: date-time

    # Merkle Tree Schemas
    MerkleBuildRequest:
      type: object
      required: [chunk_hashes]
      properties:
        chunk_hashes:
          type: array
          items:
            type: string
        session_id:
          type: string
          format: uuid

    MerkleTreeResponse:
      type: object
      properties:
        tree_id:
          type: string
          format: uuid
        root_hash:
          type: string
        height:
          type: integer
        leaf_count:
          type: integer
        created_at:
          type: string
          format: date-time

    MerkleVerifyRequest:
      type: object
      required: [tree_id, chunk_hash, proof]
      properties:
        tree_id:
          type: string
          format: uuid
        chunk_hash:
          type: string
        proof:
          type: array
          items:
            type: string

    MerkleVerifyResponse:
      type: object
      properties:
        verified:
          type: boolean
        root_hash:
          type: string
        proof_valid:
          type: boolean

    # Common Schemas
    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "LUCID_ERR_4001"
            message:
              type: string
              example: "Block not found"
            details:
              type: object
              additionalProperties: true
            request_id:
              type: string
              format: uuid
            timestamp:
              type: string
              format: date-time
            service:
              type: string
              example: "blockchain-core"
            version:
              type: string
              example: "v1"

tags:
  - name: Blockchain
    description: Blockchain information and status
  - name: Blocks
    description: Block management operations
  - name: Transactions
    description: Transaction operations
  - name: Anchoring
    description: Session anchoring operations
  - name: Consensus
    description: Consensus mechanism operations
  - name: Merkle
    description: Merkle tree operations