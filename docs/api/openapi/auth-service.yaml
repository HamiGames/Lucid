openapi: 3.0.3
info:
  title: Lucid Auth Service
  description: Authentication and authorization service for Lucid blockchain system
  version: 1.0.0
  contact:
    name: Lucid Development Team
    email: dev@lucid-blockchain.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://auth.lucid-blockchain.org/api/v1
    description: Production auth service server
  - url: https://auth-dev.lucid-blockchain.org/api/v1
    description: Development auth service server
  - url: http://localhost:8085/api/v1
    description: Local development server

security:
  - BearerAuth: []

paths:
  # Authentication
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticates a user and returns access and refresh tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid login request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: User logout
      description: Logs out the authenticated user and invalidates tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh token
      description: Refreshes an expired access token using a valid refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          description: Invalid refresh token request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify:
    post:
      tags: [Authentication]
      summary: Verify token
      description: Verifies the validity of an access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerifyResponse'
        '400':
          description: Invalid token verification request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Registration
  /auth/register:
    post:
      tags: [Registration]
      summary: User registration
      description: Registers a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Invalid registration request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify-email:
    post:
      tags: [Registration]
      summary: Verify email
      description: Verifies a user's email address using a verification code
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerifyRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailVerifyResponse'
        '400':
          description: Invalid verification request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid or expired verification code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/resend-verification:
    post:
      tags: [Registration]
      summary: Resend verification email
      description: Resends the email verification code
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationRequest'
      responses:
        '200':
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendVerificationResponse'
        '400':
          description: Invalid resend request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Password Management
  /auth/forgot-password:
    post:
      tags: [Password]
      summary: Forgot password
      description: Initiates password reset process
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordResponse'
        '400':
          description: Invalid forgot password request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/reset-password:
    post:
      tags: [Password]
      summary: Reset password
      description: Resets user password using reset token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponse'
        '400':
          description: Invalid reset password request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid or expired reset token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/change-password:
    post:
      tags: [Password]
      summary: Change password
      description: Changes user password (requires current password)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordResponse'
        '400':
          description: Invalid change password request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated or invalid current password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Profile Management
  /profile:
    get:
      tags: [Profile]
      summary: Get user profile
      description: Returns the authenticated user's profile information
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Profile]
      summary: Update user profile
      description: Updates the authenticated user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdateRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: Invalid profile update request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profile/avatar:
    post:
      tags: [Profile]
      summary: Upload avatar
      description: Uploads a new avatar image for the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvatarUploadResponse'
        '400':
          description: Invalid avatar upload request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Two-Factor Authentication
  /2fa/enable:
    post:
      tags: [2FA]
      summary: Enable 2FA
      description: Enables two-factor authentication for the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enable2FARequest'
      responses:
        '200':
          description: 2FA enabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enable2FAResponse'
        '400':
          description: Invalid 2FA enable request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /2fa/disable:
    post:
      tags: [2FA]
      summary: Disable 2FA
      description: Disables two-factor authentication for the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Disable2FARequest'
      responses:
        '200':
          description: 2FA disabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Disable2FAResponse'
        '400':
          description: Invalid 2FA disable request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /2fa/verify:
    post:
      tags: [2FA]
      summary: Verify 2FA code
      description: Verifies a two-factor authentication code
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify2FARequest'
      responses:
        '200':
          description: 2FA code verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verify2FAResponse'
        '400':
          description: Invalid 2FA verification request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid 2FA code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Session Management
  /sessions:
    get:
      tags: [Sessions]
      summary: List active sessions
      description: Returns a list of active sessions for the authenticated user
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionListResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions/{session_id}:
    delete:
      tags: [Sessions]
      summary: Terminate session
      description: Terminates a specific session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session terminated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionTerminateResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions/terminate-all:
    post:
      tags: [Sessions]
      summary: Terminate all sessions
      description: Terminates all sessions except the current one
      responses:
        '200':
          description: All sessions terminated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionTerminateAllResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Account Management
  /account/delete:
    post:
      tags: [Account]
      summary: Delete account
      description: Permanently deletes the user account and all associated data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccountRequest'
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAccountResponse'
        '400':
          description: Invalid account deletion request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /account/export:
    get:
      tags: [Account]
      summary: Export account data
      description: Exports all user data in a downloadable format
      responses:
        '200':
          description: Account data exported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountExportResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Service Status
  /status:
    get:
      tags: [Status]
      summary: Get service status
      description: Returns the current status of the auth service
      security: []
      responses:
        '200':
          description: Service status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatusResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        remember_me:
          type: boolean
          default: false
        two_factor_code:
          type: string
          pattern: '^[0-9]{6}$'

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          default: Bearer
        expires_in:
          type: integer
          description: "Token expiration time in seconds"
        user:
          $ref: '#/components/schemas/UserInfo'

    LogoutRequest:
      type: object
      properties:
        refresh_token:
          type: string

    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: "Logged out successfully"

    RefreshTokenRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string

    RefreshTokenResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          default: Bearer
        expires_in:
          type: integer

    TokenVerifyRequest:
      type: object
      required: [token]
      properties:
        token:
          type: string

    TokenVerifyResponse:
      type: object
      properties:
        valid:
          type: boolean
        user_id:
          type: string
          format: uuid
        expires_at:
          type: string
          format: date-time

    # Registration Schemas
    RegisterRequest:
      type: object
      required: [email, password, username, first_name, last_name]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          maxLength: 128
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        terms_accepted:
          type: boolean
        marketing_consent:
          type: boolean
          default: false

    RegisterResponse:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        verification_required:
          type: boolean
        message:
          type: string

    EmailVerifyRequest:
      type: object
      required: [email, code]
      properties:
        email:
          type: string
          format: email
        code:
          type: string
          pattern: '^[0-9]{6}$'

    EmailVerifyResponse:
      type: object
      properties:
        verified:
          type: boolean
        message:
          type: string

    ResendVerificationRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email

    ResendVerificationResponse:
      type: object
      properties:
        sent:
          type: boolean
        message:
          type: string

    # Password Schemas
    ForgotPasswordRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email

    ForgotPasswordResponse:
      type: object
      properties:
        sent:
          type: boolean
        message:
          type: string

    ResetPasswordRequest:
      type: object
      required: [token, password]
      properties:
        token:
          type: string
        password:
          type: string
          minLength: 8
          maxLength: 128

    ResetPasswordResponse:
      type: object
      properties:
        reset:
          type: boolean
        message:
          type: string

    ChangePasswordRequest:
      type: object
      required: [current_password, new_password]
      properties:
        current_password:
          type: string
        new_password:
          type: string
          minLength: 8
          maxLength: 128

    ChangePasswordResponse:
      type: object
      properties:
        changed:
          type: boolean
        message:
          type: string

    # Profile Schemas
    ProfileResponse:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        avatar_url:
          type: string
          format: uri
        role:
          type: string
          enum: [user, node_operator, admin, super_admin]
        status:
          type: string
          enum: [active, inactive, suspended, pending]
        email_verified:
          type: boolean
        two_factor_enabled:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time

    ProfileUpdateRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100

    AvatarUploadResponse:
      type: object
      properties:
        avatar_url:
          type: string
          format: uri
        uploaded_at:
          type: string
          format: date-time

    # 2FA Schemas
    Enable2FARequest:
      type: object
      properties:
        method:
          type: string
          enum: [totp, sms, email]
          default: totp

    Enable2FAResponse:
      type: object
      properties:
        qr_code:
          type: string
        secret:
          type: string
        backup_codes:
          type: array
          items:
            type: string

    Disable2FARequest:
      type: object
      required: [password]
      properties:
        password:
          type: string
        two_factor_code:
          type: string
          pattern: '^[0-9]{6}$'

    Disable2FAResponse:
      type: object
      properties:
        disabled:
          type: boolean
        message:
          type: string

    Verify2FARequest:
      type: object
      required: [code]
      properties:
        code:
          type: string
          pattern: '^[0-9]{6}$'
        user_id:
          type: string
          format: uuid

    Verify2FAResponse:
      type: object
      properties:
        verified:
          type: boolean
        access_token:
          type: string

    # Session Schemas
    SessionListResponse:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionInfo'

    SessionInfo:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
        device_info:
          type: string
        ip_address:
          type: string
        location:
          type: string
        created_at:
          type: string
          format: date-time
        last_activity:
          type: string
          format: date-time
        is_current:
          type: boolean

    SessionTerminateResponse:
      type: object
      properties:
        terminated:
          type: boolean
        message:
          type: string

    SessionTerminateAllResponse:
      type: object
      properties:
        terminated_count:
          type: integer
        message:
          type: string

    # Account Schemas
    DeleteAccountRequest:
      type: object
      required: [password, confirmation]
      properties:
        password:
          type: string
        confirmation:
          type: string
          example: "DELETE"
        reason:
          type: string
          maxLength: 500

    DeleteAccountResponse:
      type: object
      properties:
        deleted:
          type: boolean
        message:
          type: string

    AccountExportResponse:
      type: object
      properties:
        download_url:
          type: string
          format: uri
        expires_at:
          type: string
          format: date-time
        file_size:
          type: integer

    # Status Schemas
    ServiceStatusResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, down]
        version:
          type: string
        uptime:
          type: integer
        database_status:
          type: string
        redis_status:
          type: string
        response_time:
          type: number

    # Common Schemas
    UserInfo:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [user, node_operator, admin, super_admin]
        status:
          type: string
          enum: [active, inactive, suspended, pending]
        email_verified:
          type: boolean
        two_factor_enabled:
          type: boolean

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "LUCID_ERR_6001"
            message:
              type: string
              example: "Authentication failed"
            details:
              type: object
              additionalProperties: true
            request_id:
              type: string
              format: uuid
            timestamp:
              type: string
              format: date-time
            service:
              type: string
              example: "auth-service"
            version:
              type: string
              example: "v1"

tags:
  - name: Authentication
    description: User authentication operations
  - name: Registration
    description: User registration and email verification
  - name: Password
    description: Password management operations
  - name: Profile
    description: User profile management
  - name: 2FA
    description: Two-factor authentication
  - name: Sessions
    description: Session management
  - name: Account
    description: Account management operations
  - name: Status
    description: Service status and health
