#!/bin/bash
# Build CORE SUPPORT Services Script
# Builds infrastructure services from lucid-dev.yaml within the devcontainer
# Path: .devcontainer/build-core-support.sh

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration
LUCID_DEV_COMPOSE="06-orchestration-runtime/compose/lucid-dev.yaml"
NETWORK_NAME="lucid-dev_lucid_net"
CORE_SUPPORT_SERVICES=(
    "tor-proxy"
    "lucid_mongo" 
    "lucid_api"
    "api-gateway"
    "tunnel-tools"
    "server-tools"
)

log() { echo -e "${BLUE}[CORE-SUPPORT] $1${NC}"; }
success() { echo -e "${GREEN}[SUCCESS] $1${NC}"; }
warn() { echo -e "${YELLOW}[WARNING] $1${NC}"; }
error() { echo -e "${RED}[ERROR] $1${NC}"; }

log "Building CORE SUPPORT services from lucid-dev.yaml..."

# 1. Verify lucid-dev.yaml exists
if [[ ! -f "$LUCID_DEV_COMPOSE" ]]; then
    error "CORE SUPPORT compose file not found: $LUCID_DEV_COMPOSE"
    exit 1
fi
success "Found CORE SUPPORT compose file: $LUCID_DEV_COMPOSE"

# 2. Create .env file for CORE SUPPORT services
log "Setting up environment for CORE SUPPORT services..."
ENV_FILE="06-orchestration-runtime/compose/.env"

if [[ ! -f "$ENV_FILE" ]]; then
    log "Creating environment file: $ENV_FILE"
    
    # Generate .onion service secrets
    ONION_COOKIE=$(openssl rand -hex 32)
    ONION_HEX=$(openssl rand -hex 16)
    TOR_PASSWORD=$(openssl rand -base64 32)
    
    cat > "$ENV_FILE" << EOF
# CORE SUPPORT Environment Configuration
# Generated by devcontainer build process

# Tor Configuration (.onion address creation)
ONION=
COOKIE=$ONION_COOKIE
HEX=$ONION_HEX
TOR_CONTROL_PASSWORD=$TOR_PASSWORD
BLOCK_ONION=

# Database Configuration  
MONGO_URL=mongodb://lucid:lucid@lucid_mongo:27017/lucid?authSource=admin&retryWrites=false
MONGO_INITDB_ROOT_USERNAME=lucid
MONGO_INITDB_ROOT_PASSWORD=lucid
MONGO_INITDB_DATABASE=lucid

# Core API Configuration
LUCID_ENV=dev
SERVICE_NAME=lucid-api
VERSION=0.1.0
PORT=8081

# Network Configuration
LUCID_NETWORK=$NETWORK_NAME
DOCKER_BUILDKIT=1
COMPOSE_DOCKER_CLI_BUILD=1
DOCKER_DEFAULT_PLATFORM=linux/amd64
EOF
    
    success "Environment file created with .onion secrets"
else
    info "Environment file already exists: $ENV_FILE"
fi

# 3. Build CORE SUPPORT services
log "Building CORE SUPPORT infrastructure services..."
cd "06-orchestration-runtime/compose"

# Build services with profile targeting
for service in "${CORE_SUPPORT_SERVICES[@]}"; do
    log "Building CORE SUPPORT service: $service"
    
    if docker-compose -f lucid-dev.yaml config --services | grep -q "^${service}$"; then
        if docker-compose -f lucid-dev.yaml build --no-cache "$service"; then
            success "Built CORE SUPPORT service: $service"
        else
            warn "Failed to build CORE SUPPORT service: $service (continuing)"
        fi
    else
        warn "CORE SUPPORT service $service not found in compose file"
    fi
done

# 4. Verify network creation capability
log "Verifying network creation for CORE SUPPORT..."
if docker network ls --format "{{.Name}}" | grep -q "^${NETWORK_NAME}$"; then
    success "CORE SUPPORT network exists: $NETWORK_NAME"
else
    warn "CORE SUPPORT network not found, will be created on service start"
fi

cd - >/dev/null

# 5. Prepare CORE SERVICES orchestration capability
log "Preparing CORE SERVICES orchestration capability..."

# Create networks that CORE SERVICES containers will need
CORE_SERVICES_NETWORKS=(
    "blockchain_net"
    "sessions_net" 
    "node_net"
    "admin_net"
    "wallet_net"
)

for network in "${CORE_SERVICES_NETWORKS[@]}"; do
    if ! docker network ls --format "{{.Name}}" | grep -q "^${network}$"; then
        log "Creating CORE SERVICES network: $network"
        docker network create "$network" --driver bridge --attachable
        success "Created CORE SERVICES network: $network"
    else
        info "CORE SERVICES network already exists: $network"
    fi
done

# 6. Create directory structure for CORE SERVICES containers
log "Creating directory structure for CORE SERVICES containers..."
CORE_SERVICES_DIRS=(
    "containers/blockchain"
    "containers/sessions"
    "containers/nodes"
    "containers/admin"
    "containers/wallet"
)

for dir in "${CORE_SERVICES_DIRS[@]}"; do
    if [[ ! -d "$dir" ]]; then
        mkdir -p "$dir"
        log "Created CORE SERVICES directory: $dir"
    fi
done

# 7. Display CORE SUPPORT status
log "CORE SUPPORT Build Status:"
echo "  ✓ Infrastructure services built from: $LUCID_DEV_COMPOSE"
echo "  ✓ Environment configured with .onion secrets"
echo "  ✓ Network: $NETWORK_NAME ready"

log "CORE SUPPORT Services:"
for service in "${CORE_SUPPORT_SERVICES[@]}"; do
    if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "$service" 2>/dev/null; then
        echo "  ✓ $service (built)"
    else
        echo "  ⚠ $service (not built)"
    fi
done

log "CORE SERVICES Networks:"
for network in "${CORE_SERVICES_NETWORKS[@]}"; do
    if docker network ls --format "{{.Name}}" | grep -q "^${network}$"; then
        echo "  ✓ $network (ready for container communication)"
    else
        echo "  ✗ $network (failed to create)"
    fi
done

success "CORE SUPPORT services ready for CORE SERVICES orchestration!"

log "Next Steps:"
echo "  • Start CORE SUPPORT: docker-compose -f $LUCID_DEV_COMPOSE --profile dev up -d"
echo "  • Build CORE SERVICES: Use devcontainer to build blockchain_container, node_container, etc."
echo "  • Access infrastructure:"
echo "    - API Gateway: http://localhost:8080"
echo "    - API Server: http://localhost:8081" 
echo "    - MongoDB: mongodb://localhost:27017"
echo "    - Tor SOCKS: localhost:9050"

exit 0