#cloud-config
# Lucid Distroless Cloud Init Configuration for Raspberry Pi 5
# Initial system setup and Lucid Distroless deployment
# Aligned with essentials.md and LUCID-STRICT mode

# System information
hostname: lucid-pi
manage_etc_hosts: true
locale: en_US.UTF-8
timezone: UTC

# User configuration
users:
  - name: lucid
    groups: [adm, audio, cdrom, dialout, dip, floppy, lxd, netdev, plugdev, sudo, video, docker]
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh_authorized_keys:
      - ${SSH_PUBLIC_KEY}
  - name: pickme
    groups: [adm, audio, cdrom, dialout, dip, floppy, lxd, netdev, plugdev, sudo, video, docker]
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh_authorized_keys:
      - ${SSH_PUBLIC_KEY}

# Package installation
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - software-properties-common
  - git
  - vim
  - htop
  - iotop
  - nethogs
  - tcpdump
  - wireshark-common
  - fail2ban
  - ufw
  - chrony
  - rsync
  - unzip
  - wget
  - jq
  - python3-pip
  - python3-venv
  - build-essential
  - cmake
  - pkg-config
  - docker-compose-plugin
  - docker-buildx-plugin
  - containerd.io

# Repositories
apt:
  sources:
    docker:
      source: "deb [arch=arm64] https://download.docker.com/linux/ubuntu $RELEASE stable"
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88

# Write files
write_files:
  # Docker daemon configuration for Distroless (per essentials.md networks)
  - path: /etc/docker/daemon.json
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2",
        "default-address-pools": [
          {
            "base": "172.20.0.0/16",
            "size": 24
          }
        ],
        "live-restore": true,
        "userland-proxy": false,
        "experimental": false,
        "metrics-addr": "0.0.0.0:9323",
        "metrics-interval": "30s",
        "insecure-registries": [],
        "registry-mirrors": [],
        "exec-opts": ["native.cgroupdriver=systemd"],
        "bip": "172.20.0.1/16"
      }
    owner: root:root
    permissions: '0644'

  # Systemd service for Lucid Distroless System
  - path: /etc/systemd/system/lucid-distroless.service
    content: |
      [Unit]
      Description=Lucid Distroless System
      After=docker.service
      Requires=docker.service
      
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      WorkingDirectory=/opt/lucid
      ExecStart=/usr/local/bin/lucid-distroless-start.sh
      ExecStop=/usr/local/bin/lucid-distroless-stop.sh
      TimeoutStartSec=300
      TimeoutStopSec=60
      Restart=on-failure
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target
    owner: root:root
    permissions: '0644'

  # Lucid Distroless startup script
  - path: /usr/local/bin/lucid-distroless-start.sh
    content: |
      #!/bin/bash
      set -e
      
      echo "Starting Lucid Distroless system..."
      
      # Ensure Docker is running
      systemctl start docker
      sleep 5
      
      # Create networks (per essentials.md)
      docker network create lucid-pi-network --driver bridge --subnet 172.20.0.0/16 --gateway 172.20.0.1 2>/dev/null || echo 'Network exists'
      docker network create lucid-tron-isolated --driver bridge --subnet 172.21.0.0/16 --gateway 172.21.0.1 2>/dev/null || echo 'Network exists'
      docker network create lucid-gui-network --driver bridge --subnet 172.22.0.0/16 --gateway 172.22.0.1 2>/dev/null || echo 'Network exists'
      
      # Login to registry
      echo "${GITHUB_TOKEN}" | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
      
      # Pull latest Distroless images
      docker-compose -f /opt/lucid/docker-compose.core.yaml pull
      
      # Start core+application+support services
      docker-compose -f /opt/lucid/docker-compose.core.yaml up -d
      
      # Wait for services to be healthy
      sleep 45
      
      # Verify services are running
      docker-compose -f /opt/lucid/docker-compose.core.yaml ps
      
      echo "Lucid Distroless system started successfully"
    owner: root:root
    permissions: '0755'

  # Lucid Distroless shutdown script
  - path: /usr/local/bin/lucid-distroless-stop.sh
    content: |
      #!/bin/bash
      set -e
      
      echo "Stopping Lucid Distroless system..."
      
      # Stop services gracefully
      docker-compose -f /opt/lucid/docker-compose.core.yaml down --timeout 30
      
      # Clean up unused containers and images
      docker system prune -f
      
      echo "Lucid Distroless system stopped"
    owner: root:root
    permissions: '0755'

  # Firewall configuration for Distroless (per essentials.md ports)
  - path: /etc/ufw/before.rules
    content: |
      # Lucid Distroless UFW Rules (per essentials.md)
      *filter
      :ufw-before-input - [0:0]
      :ufw-before-output - [0:0]
      :ufw-before-forward - [0:0]
      :ufw-not-local - [0:0]
      
      # Allow Tor traffic
      -A ufw-before-input -p tcp --dport 9050 -j ACCEPT
      -A ufw-before-input -p tcp --dport 9051 -j ACCEPT
      
      # Allow API Gateway (8080, 8081)
      -A ufw-before-input -p tcp --dport 8080 -j ACCEPT
      -A ufw-before-input -p tcp --dport 8081 -j ACCEPT
      
      # Allow Admin Interface (8083, 8088, 8100)
      -A ufw-before-input -p tcp --dport 8083 -j ACCEPT
      -A ufw-before-input -p tcp --dport 8088 -j ACCEPT
      -A ufw-before-input -p tcp --dport 8100 -j ACCEPT
      
      # Allow Blockchain Engine (8084)
      -A ufw-before-input -p tcp --dport 8084 -j ACCEPT
      
      # Allow Session Services (8087, 8082)
      -A ufw-before-input -p tcp --dport 8087 -j ACCEPT
      -A ufw-before-input -p tcp --dport 8082 -j ACCEPT
      
      # Allow Auth Service (8089)
      -A ufw-before-input -p tcp --dport 8089 -j ACCEPT
      
      # Allow Node Management (8095, 8099)
      -A ufw-before-input -p tcp --dport 8095 -j ACCEPT
      -A ufw-before-input -p tcp --dport 8099 -j ACCEPT
      
      # Allow RDP/Session/Payment suite (8090-8097)
      -A ufw-before-input -p tcp --dport 8090:8097 -j ACCEPT
      
      # Allow TRON extensions (8101-8106)
      -A ufw-before-input -p tcp --dport 8101:8106 -j ACCEPT
      
      # Allow MongoDB (27017) - local network only
      -A ufw-before-input -s 172.20.0.0/16 -p tcp --dport 27017 -j ACCEPT
      
      # Allow Redis (6379) - local network only
      -A ufw-before-input -s 172.20.0.0/16 -p tcp --dport 6379 -j ACCEPT
      
      # Allow Elasticsearch (9200, 9300) - local network only
      -A ufw-before-input -s 172.20.0.0/16 -p tcp --dport 9200:9300 -j ACCEPT
      
      # Service Mesh Controller (8500-8502, 8600)
      -A ufw-before-input -s 172.20.0.0/16 -p tcp --dport 8500:8502 -j ACCEPT
      -A ufw-before-input -p tcp --dport 8600 -j ACCEPT
      
      # XRDP (3389)
      -A ufw-before-input -p tcp --dport 3389 -j ACCEPT
      
      # Docker metrics
      -A ufw-before-input -s 172.20.0.0/16 -p tcp --dport 9323 -j ACCEPT
      
      # Drop all other incoming traffic
      -A ufw-before-input -j DROP
      
      COMMIT
    owner: root:root
    permissions: '0644'

  # Fail2ban configuration for Distroless
  - path: /etc/fail2ban/jail.local
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 3
      ignoreip = 127.0.0.1/8 ::1 172.20.0.0/16 172.21.0.0/16 172.22.0.0/16
      
      [sshd]
      enabled = true
      port = ssh
      logpath = /var/log/auth.log
      maxretry = 3
      
      [docker]
      enabled = true
      port = 2376,2377,9323
      logpath = /var/log/syslog
      maxretry = 3
      
      [lucid-api]
      enabled = true
      port = 8080,8081
      logpath = /mnt/myssd/Lucid/Lucid/logs/api-gateway/api.log
      maxretry = 5
      findtime = 300
    owner: root:root
    permissions: '0644'

  # Chrony configuration for Distroless
  - path: /etc/chrony/chrony.conf
    content: |
      # Lucid Distroless Chrony Configuration
      pool 0.ubuntu.pool.ntp.org iburst
      pool 1.ubuntu.pool.ntp.org iburst
      pool 2.ubuntu.pool.ntp.org iburst
      pool 3.ubuntu.pool.ntp.org iburst
      
      # Allow time updates from local network (per essentials.md)
      allow 192.168.0.0/16
      allow 172.20.0.0/16
      allow 172.21.0.0/16
      allow 172.22.0.0/16
      
      # Local stratum
      local stratum 10
      
      # Logging
      logdir /var/log/chrony
      log measurements statistics tracking
      
      # Security
      cmdallow 127.0.0.1
      cmdallow ::1
    owner: root:root
    permissions: '0644'

# Run commands
runcmd:
  # Update system
  - apt-get update
  - apt-get upgrade -y
  
  # Install Docker with proper repository setup
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  
  # Configure Docker for Distroless
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker lucid
  - usermod -aG docker pickme
  
  # Set up Docker Buildx for multi-platform builds
  - docker buildx create --name lucid-pi --use --driver docker-container --driver-opt network=host
  - docker buildx inspect --bootstrap
  
  # Create Lucid directories for Distroless (per essentials.md: PROJECT_ROOT)
  - mkdir -p /mnt/myssd/Lucid/Lucid
  - mkdir -p /mnt/myssd/Lucid/Lucid/configs
  - mkdir -p /mnt/myssd/Lucid/Lucid/logs
  - mkdir -p /mnt/myssd/Lucid/Lucid/data
  - mkdir -p /mnt/myssd/Lucid/Lucid/backups
  - mkdir -p /mnt/myssd/Lucid/Lucid/deployments
  - mkdir -p /mnt/myssd/Lucid/Lucid/distroless
  - mkdir -p /mnt/myssd/Lucid/Lucid/volumes
  - ln -s /mnt/myssd/Lucid/Lucid /opt/lucid
  
  # Set permissions
  - chown -R lucid:lucid /mnt/myssd/Lucid/Lucid
  - chown -R lucid:lucid /opt/lucid
  - chmod 755 /mnt/myssd/Lucid/Lucid
  - chmod 700 /mnt/myssd/Lucid/Lucid/volumes
  
  # Create Docker networks (per essentials.md)
  - docker network create lucid-pi-network --driver bridge --subnet 172.20.0.0/16 --gateway 172.20.0.1 --attachable 2>/dev/null || echo 'Network exists'
  - docker network create lucid-tron-isolated --driver bridge --subnet 172.21.0.0/16 --gateway 172.21.0.1 --attachable 2>/dev/null || echo 'Network exists'
  - docker network create lucid-gui-network --driver bridge --subnet 172.22.0.0/16 --gateway 172.22.0.1 --attachable 2>/dev/null || echo 'Network exists'
  
  # Configure firewall for Distroless (per essentials.md ports)
  - ufw --force enable
  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow ssh
  - ufw allow 8080/tcp
  - ufw allow 8081/tcp
  - ufw allow 8083/tcp
  - ufw allow 8084/tcp
  - ufw allow 8087/tcp
  - ufw allow 8089/tcp
  - ufw allow 8090:8097/tcp
  - ufw allow 8101:8106/tcp
  - ufw allow 8095/tcp
  - ufw allow 3389/tcp
  - ufw allow 9050/tcp
  - ufw allow 9051/tcp
  
  # Configure fail2ban
  - systemctl enable fail2ban
  - systemctl start fail2ban
  
  # Configure chrony
  - systemctl enable chrony
  - systemctl start chrony
  
  # Enable Lucid Distroless service
  - systemctl enable lucid-distroless.service
  
  # Set up log rotation for Distroless
  - echo "/mnt/myssd/Lucid/Lucid/logs/**/*.log { daily rotate 7 compress delaycompress missingok notifempty create 644 lucid lucid }" >> /etc/logrotate.d/lucid
  - echo "/var/log/docker.log { daily rotate 7 compress delaycompress missingok notifempty create 644 root root }" >> /etc/logrotate.d/docker
  
  # Create monitoring script for Distroless
  - cat > /usr/local/bin/lucid-distroless-monitor.sh << 'EOF'
      #!/bin/bash
      # Lucid Distroless System Monitor
      set -e
      LOG_FILE="/mnt/myssd/Lucid/Lucid/logs/distroless-monitor.log"
      
      echo "$(date): Checking Lucid Distroless system status..." >> "$LOG_FILE"
      
      # Check Docker status
      if ! systemctl is-active --quiet docker; then
          echo "$(date): ERROR - Docker is not running" >> "$LOG_FILE"
          systemctl restart docker
          sleep 10
      fi
      
      # Check Lucid Distroless service
      if ! systemctl is-active --quiet lucid-distroless; then
          echo "$(date): ERROR - Lucid Distroless service is not running" >> "$LOG_FILE"
          systemctl restart lucid-distroless
      fi
      
      # Check Distroless containers health
      if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "unhealthy"; then
          echo "$(date): WARNING - Some Distroless containers are unhealthy" >> "$LOG_FILE"
          docker ps --format "table {{.Names}}\t{{.Status}}" >> "$LOG_FILE"
      fi
      
      # Check disk space
      DISK_USAGE=$(df /mnt/myssd/Lucid/Lucid | awk 'NR==2 {print $5}' | sed 's/%//')
      if [ "$DISK_USAGE" -gt 85 ]; then
          echo "$(date): WARNING - Disk usage is ${DISK_USAGE}%" >> "$LOG_FILE"
          if [ "$DISK_USAGE" -gt 95 ]; then
              echo "$(date): CRITICAL - Cleaning up Docker images" >> "$LOG_FILE"
              docker system prune -af --volumes
          fi
      fi
      
      # Check memory usage
      MEM_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
      if [ "$MEM_USAGE" -gt 90 ]; then
          echo "$(date): WARNING - Memory usage is ${MEM_USAGE}%" >> "$LOG_FILE"
      fi
      
      # Check container resource usage
      docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" >> "$LOG_FILE"
      
      echo "$(date): Distroless system check completed" >> "$LOG_FILE"
      EOF

  - chmod +x /usr/local/bin/lucid-distroless-monitor.sh
  
  # Set up monitoring cron job for Distroless
  - echo "*/5 * * * * /usr/local/bin/lucid-distroless-monitor.sh" | crontab -u lucid -
  
  # Create Docker Compose file for Distroless (per essentials.md)
  - cat > /mnt/myssd/Lucid/Lucid/docker-compose.core.yaml << 'EOF'
      # LUCID SERVICES - Distroless Deployment
      # Aligned with essentials.md specifications
      
      version: '3.8'
      
      x-common-deploy: &common-deploy
        restart: unless-stopped
        deploy:
          resources:
            limits:
              memory: 512M
              cpus: '0.5'
            reservations:
              memory: 128M
              cpus: '0.1'
      
      x-health-http: &health-http
        interval: 20s
        timeout: 5s
        retries: 5
        start_period: 30s
      
      x-env-common: &env-common
        PROJECT_ROOT: "/mnt/myssd/Lucid/Lucid"
        LUCID_PI_NETWORK: "lucid-pi-network"
        LUCID_PI_SUBNET: "172.20.0.0/16"
        LUCID_PI_GATEWAY: "172.20.0.1"
        LUCID_GUI_NETWORK: "lucid-gui-network"
        LUCID_GUI_SUBNET: "172.22.0.0/16"
        LUCID_GUI_GATEWAY: "172.22.0.1"
        LUCID_PLATFORM: "arm64"
        LUCID_ENV: "production"
      
      services:
        # Phase 1: Foundation
        lucid-mongodb:
          image: pickme/lucid-mongodb:latest-arm64
          container_name: lucid-mongodb
          hostname: lucid-mongodb
          environment:
            MONGO_INITDB_ROOT_USERNAME: lucid
            MONGO_INITDB_ROOT_PASSWORD: lucid
            MONGO_INITDB_DATABASE: lucid
          volumes:
            - mongodb_data:/data/db
            - /mnt/myssd/Lucid/Lucid/logs/database:/var/log/mongodb
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.11
          ports:
            - "27017:27017"
          healthcheck:
            test: ["CMD-SHELL", "mongosh --quiet -u lucid -p lucid --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 }).ok' | grep -q 1"]
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 15s
          <<: *common-deploy
      
        lucid-redis:
          image: pickme/lucid-redis:latest-arm64
          container_name: lucid-redis
          hostname: lucid-redis
          volumes:
            - redis_data:/data
            - /mnt/myssd/Lucid/Lucid/logs/redis:/var/log/redis
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.12
          ports:
            - "6379:6379"
          healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 15s
          <<: *common-deploy
      
        lucid-elasticsearch:
          image: pickme/lucid-elasticsearch:latest-arm64
          container_name: lucid-elasticsearch
          hostname: lucid-elasticsearch
          environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
            - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
          volumes:
            - elasticsearch_data:/usr/share/elasticsearch/data
            - /mnt/myssd/Lucid/Lucid/logs/elasticsearch:/usr/share/elasticsearch/logs
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.13
          ports:
            - "9200:9200"
            - "9300:9300"
          healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 30s
          <<: *common-deploy
      
        lucid-auth-service:
          image: pickme/lucid-auth-service:latest-arm64
          container_name: lucid-auth-service
          hostname: lucid-auth-service
          pull_policy: always
          environment:
            <<: *env-common
            AUTH_PORT: "8089"
            AUTH_SERVICE_HOST: "172.20.0.14"
            AUTH_SERVICE_URL: "http://lucid-auth-service:8089"
            MONGODB_URI: "mongodb://lucid:lucid@lucid-mongodb:27017/lucid_auth?authSource=admin"
            REDIS_URL: "redis://lucid-redis:6379/6"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.14
          depends_on:
            lucid-mongodb:
              condition: service_healthy
            lucid-redis:
              condition: service_healthy
          ports:
            - "8089:8089"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8089/health || exit 1"]
            <<: *health-http
          <<: *common-deploy
      
        # Phase 2: Core Services
        lucid-api-gateway:
          image: pickme/lucid-api-gateway:latest-arm64
          container_name: lucid-api-gateway
          hostname: lucid-api-gateway
          pull_policy: always
          environment:
            <<: *env-common
            HTTP_PORT: "8080"
            HTTPS_PORT: "8081"
            API_GATEWAY_HOST: "172.20.0.10"
            API_GATEWAY_GUI_HOST: "172.22.0.10"
            MONGODB_URI: "mongodb://lucid:lucid@lucid-mongodb:27017/lucid_gateway?authSource=admin"
            REDIS_URL: "redis://lucid-redis:6379/0"
            AUTH_SERVICE_URL: "http://lucid-auth-service:8089"
            BLOCKCHAIN_CORE_URL: "http://lucid-blockchain-engine:8084"
            SESSION_MANAGEMENT_URL: "http://lucid-session-api:8087"
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/api-gateway:/app/logs
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.10
            lucid-gui-network:
              ipv4_address: 172.22.0.10
          depends_on:
            lucid-mongodb:
              condition: service_healthy
            lucid-redis:
              condition: service_healthy
            lucid-auth-service:
              condition: service_started
          ports:
            - "8080:8080"
            - "8081:8081"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8080/health || exit 1"]
            <<: *health-http
          <<: *common-deploy
      
        lucid-service-mesh-controller:
          image: pickme/lucid-service-mesh-controller:latest-arm64
          container_name: lucid-service-mesh-controller
          hostname: lucid-service-mesh-controller
          environment:
            <<: *env-common
            SERVICE_MESH_CONTROLLER_PORT: "8500"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.19
          ports:
            - "8500:8500"
            - "8501:8501"
            - "8502:8502"
            - "8600:8600"
            - "8088:8088"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8500/v1/status/leader || exit 1"]
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 30s
          <<: *common-deploy
      
        lucid-blockchain-engine:
          image: pickme/lucid-blockchain-engine:latest-arm64
          container_name: lucid-blockchain-engine
          hostname: lucid-blockchain-engine
          environment:
            <<: *env-common
            BLOCKCHAIN_ENGINE_URL: "http://lucid-blockchain-engine:8084"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.15
          ports:
            - "8084:8084"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8084/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/blockchain-engine:/app/logs
          <<: *common-deploy
      
        lucid-session-anchoring:
          image: pickme/lucid-session-anchoring:latest-arm64
          container_name: lucid-session-anchoring
          hostname: lucid-session-anchoring
          environment:
            <<: *env-common
            SESSION_ANCHORING_URL: "http://lucid-session-anchoring:8085"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.16
          ports:
            - "8085:8085"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8085/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/session-anchoring:/app/logs
          <<: *common-deploy
      
        lucid-block-manager:
          image: pickme/lucid-block-manager:latest-arm64
          container_name: lucid-block-manager
          hostname: lucid-block-manager
          environment:
            <<: *env-common
            BLOCK_MANAGER_URL: "http://lucid-block-manager:8086"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.17
          ports:
            - "8086:8086"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8086/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/block-manager:/app/logs
          <<: *common-deploy
      
        lucid-data-chain:
          image: pickme/lucid-data-chain:latest-arm64
          container_name: lucid-data-chain
          hostname: lucid-data-chain
          environment:
            <<: *env-common
            DATA_CHAIN_URL: "http://lucid-data-chain:8087"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.18
          ports:
            - "8087:8087"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8087/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/data-chain:/app/logs
          <<: *common-deploy
      
        # Phase 3: Application Services
        lucid-session-pipeline:
          image: pickme/lucid-session-pipeline:latest-arm64
          container_name: lucid-session-pipeline
          hostname: lucid-session-pipeline
          environment:
            <<: *env-common
            SESSION_PIPELINE_URL: "http://lucid-session-pipeline:8087"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.20
          ports:
            - "8087:8087"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8087/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/session-pipeline:/app/logs
          <<: *common-deploy
      
        lucid-session-recorder:
          image: pickme/lucid-session-recorder:latest-arm64
          container_name: lucid-session-recorder
          hostname: lucid-session-recorder
          environment:
            <<: *env-common
            SESSION_RECORDER_URL: "http://lucid-session-recorder:8090"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.20
          ports:
            - "8090:8090"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8090/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/session-recorder:/app/logs
          <<: *common-deploy
      
        lucid-chunk-processor:
          image: pickme/lucid-chunk-processor:latest-arm64
          container_name: lucid-chunk-processor
          hostname: lucid-chunk-processor
          environment:
            <<: *env-common
            CHUNK_PROCESSOR_URL: "http://lucid-chunk-processor:8091"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.20
          ports:
            - "8091:8091"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8091/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/chunk-processor:/app/logs
          <<: *common-deploy
      
        lucid-session-storage:
          image: pickme/lucid-session-storage:latest-arm64
          container_name: lucid-session-storage
          hostname: lucid-session-storage
          environment:
            <<: *env-common
            SESSION_STORAGE_URL: "http://lucid-session-storage:8082"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.20
          ports:
            - "8082:8082"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8082/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/session-storage:/app/logs
            - /mnt/myssd/Lucid/Lucid/volumes/session-storage:/data
          <<: *common-deploy
      
        lucid-session-api:
          image: pickme/lucid-session-api:latest-arm64
          container_name: lucid-session-api
          hostname: lucid-session-api
          environment:
            <<: *env-common
            SESSION_API_URL: "http://lucid-session-api:8087"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.20
            lucid-gui-network:
              ipv4_address: 172.22.0.20
          ports:
            - "8087:8087"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8087/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/session-api:/app/logs
          <<: *common-deploy
      
        lucid-rdp-server-manager:
          image: pickme/lucid-rdp-server-manager:latest-arm64
          container_name: lucid-rdp-server-manager
          hostname: lucid-rdp-server-manager
          environment:
            <<: *env-common
            RDP_SERVER_MANAGER_URL: "http://lucid-rdp-server-manager:8081"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.21
          ports:
            - "8081:8081"
            - "8090:8090"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8081/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/rdp-server-manager:/app/logs
          <<: *common-deploy
      
        lucid-rdp-xrdp:
          image: pickme/lucid-rdp-xrdp:latest-arm64
          container_name: lucid-rdp-xrdp
          hostname: lucid-rdp-xrdp
          environment:
            <<: *env-common
            XRDP_PORT: "3389"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.22
          ports:
            - "3389:3389"
          healthcheck:
            test: ["CMD-SHELL", "nc -z 127.0.0.1 3389 || exit 1"]
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 30s
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/rdp-xrdp:/var/log/xrdp
          <<: *common-deploy
      
        lucid-rdp-controller:
          image: pickme/lucid-rdp-controller:latest-arm64
          container_name: lucid-rdp-controller
          hostname: lucid-rdp-controller
          environment:
            <<: *env-common
            RDP_CONTROLLER_URL: "http://lucid-rdp-controller:8092"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.23
          ports:
            - "8092:8092"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8092/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/rdp-controller:/app/logs
          <<: *common-deploy
      
        lucid-rdp-monitor:
          image: pickme/lucid-rdp-monitor:latest-arm64
          container_name: lucid-rdp-monitor
          hostname: lucid-rdp-monitor
          environment:
            <<: *env-common
            RDP_MONITOR_URL: "http://lucid-rdp-monitor:8093"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.24
          ports:
            - "8093:8093"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8093/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/rdp-monitor:/app/logs
          <<: *common-deploy
      
        lucid-node-management:
          image: pickme/lucid-node-management:latest-arm64
          container_name: lucid-node-management
          hostname: lucid-node-management
          environment:
            <<: *env-common
            NODE_MANAGEMENT_URL: "http://lucid-node-management:8095"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.25
            lucid-gui-network:
              ipv4_address: 172.22.0.25
          ports:
            - "8095:8095"
            - "8099:8099"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8095/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/node-management:/app/logs
          <<: *common-deploy
      
        # Phase 4: Support Services
        lucid-admin-interface:
          image: pickme/lucid-admin-interface:latest-arm64
          container_name: lucid-admin-interface
          hostname: lucid-admin-interface
          environment:
            <<: *env-common
            ADMIN_INTERFACE_URL: "http://lucid-admin-interface:8083"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.26
          ports:
            - "8083:8083"
            - "8088:8088"
            - "8100:8100"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8083/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/admin-interface:/app/logs
          <<: *common-deploy
      
        lucid-tron-client:
          image: pickme/lucid-tron-client:latest-arm64
          container_name: lucid-tron-client
          hostname: lucid-tron-client
          environment:
            <<: *env-common
            TRON_CLIENT_URL: "http://lucid-tron-client:8091"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.27
          ports:
            - "8091:8091"
            - "8101:8101"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8091/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/tron-client:/app/logs
          <<: *common-deploy
      
        lucid-payout-router:
          image: pickme/lucid-payout-router:latest-arm64
          container_name: lucid-payout-router
          hostname: lucid-payout-router
          environment:
            <<: *env-common
            PAYOUT_ROUTER_URL: "http://lucid-payout-router:8092"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.28
          ports:
            - "8092:8092"
            - "8102:8102"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8092/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/payout-router:/app/logs
          <<: *common-deploy
      
        lucid-wallet-manager:
          image: pickme/lucid-wallet-manager:latest-arm64
          container_name: lucid-wallet-manager
          hostname: lucid-wallet-manager
          environment:
            <<: *env-common
            WALLET_MANAGER_URL: "http://lucid-wallet-manager:8093"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.29
          ports:
            - "8093:8093"
            - "8103:8103"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8093/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/wallet-manager:/app/logs
          <<: *common-deploy
      
        lucid-usdt-manager:
          image: pickme/lucid-usdt-manager:latest-arm64
          container_name: lucid-usdt-manager
          hostname: lucid-usdt-manager
          environment:
            <<: *env-common
            USDT_MANAGER_URL: "http://lucid-usdt-manager:8094"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.30
          ports:
            - "8094:8094"
            - "8104:8104"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8094/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/usdt-manager:/app/logs
          <<: *common-deploy
      
        lucid-trx-staking:
          image: pickme/lucid-trx-staking:latest-arm64
          container_name: lucid-trx-staking
          hostname: lucid-trx-staking
          environment:
            <<: *env-common
            TRX_STAKING_URL: "http://lucid-trx-staking:8096"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.31
          ports:
            - "8096:8096"
            - "8105:8105"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8096/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/trx-staking:/app/logs
          <<: *common-deploy
      
        lucid-payment-gateway:
          image: pickme/lucid-payment-gateway:latest-arm64
          container_name: lucid-payment-gateway
          hostname: lucid-payment-gateway
          environment:
            <<: *env-common
            PAYMENT_GATEWAY_URL: "http://lucid-payment-gateway:8097"
          networks:
            lucid-pi-network:
              ipv4_address: 172.20.0.32
          ports:
            - "8097:8097"
            - "8106:8106"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8097/health || exit 1"]
            <<: *health-http
          volumes:
            - /mnt/myssd/Lucid/Lucid/logs/payment-gateway:/app/logs
          <<: *common-deploy
      
      networks:
        lucid-pi-network:
          driver: bridge
          ipam:
            config:
              - subnet: 172.20.0.0/16
                gateway: 172.20.0.1
        lucid-gui-network:
          driver: bridge
          ipam:
            config:
              - subnet: 172.22.0.0/16
                gateway: 172.22.0.1
      
      volumes:
        mongodb_data:
          driver: local
        redis_data:
          driver: local
        elasticsearch_data:
          driver: local
      EOF
  
  # Set proper permissions on Docker Compose file
  - chown lucid:lucid /mnt/myssd/Lucid/Lucid/docker-compose.core.yaml
  - chmod 644 /mnt/myssd/Lucid/Lucid/docker-compose.core.yaml
  
  # Final system message
  - echo "Lucid Distroless system initialized successfully on $(hostname)" | tee /mnt/myssd/Lucid/Lucid/logs/init.log
  - echo "System ready for Lucid Distroless deployment" | tee -a /mnt/myssd/Lucid/Lucid/logs/init.log
  - echo "Docker Buildx configured for multi-platform builds" | tee -a /mnt/myssd/Lucid/Lucid/logs/init.log
  - echo "PROJECT_ROOT: /mnt/myssd/Lucid/Lucid" | tee -a /mnt/myssd/Lucid/Lucid/logs/init.log

# Power state
power_state:
  delay: 0
  mode: reboot
  message: "Rebooting to complete Lucid Distroless initialization"
  condition: true