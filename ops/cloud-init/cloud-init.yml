#cloud-config
# Lucid Distroless Cloud Init Configuration for Raspberry Pi 5
# Initial system setup and Lucid Distroless deployment
# Aligned with LUCID-STRICT mode and Distroless standards

# System information
hostname: lucid-pi
manage_etc_hosts: true
locale: en_US.UTF-8
timezone: UTC

# User configuration
users:
  - name: lucid
    groups: [adm, audio, cdrom, dialout, dip, floppy, lxd, netdev, plugdev, sudo, video, docker]
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh_authorized_keys:
      - ${SSH_PUBLIC_KEY}
  - name: pickme
    groups: [adm, audio, cdrom, dialout, dip, floppy, lxd, netdev, plugdev, sudo, video, docker]
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh_authorized_keys:
      - ${SSH_PUBLIC_KEY}

# Package installation
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - software-properties-common
  - git
  - vim
  - htop
  - iotop
  - nethogs
  - tcpdump
  - wireshark-common
  - fail2ban
  - ufw
  - chrony
  - rsync
  - unzip
  - wget
  - jq
  - python3-pip
  - python3-venv
  - build-essential
  - cmake
  - pkg-config
  - docker-compose-plugin
  - docker-buildx-plugin
  - containerd.io

# Repositories
apt:
  sources:
    docker:
      source: "deb [arch=arm64] https://download.docker.com/linux/ubuntu $RELEASE stable"
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88

# Write files
write_files:
  # Docker daemon configuration for Distroless
  - path: /etc/docker/daemon.json
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2",
        "default-address-pools": [
          {
            "base": "172.21.0.0/16",
            "size": 24
          }
        ],
        "live-restore": true,
        "userland-proxy": false,
        "experimental": false,
        "metrics-addr": "0.0.0.0:9323",
        "metrics-interval": "30s",
        "insecure-registries": [],
        "registry-mirrors": [],
        "exec-opts": ["native.cgroupdriver=systemd"],
        "bip": "172.21.0.1/16"
      }
    owner: root:root
    permissions: '0644'

  # Systemd service for Lucid Distroless System
  - path: /etc/systemd/system/lucid-distroless.service
    content: |
      [Unit]
      Description=Lucid Distroless System
      After=docker.service
      Requires=docker.service
      
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      WorkingDirectory=/opt/lucid
      ExecStart=/usr/local/bin/lucid-distroless-start.sh
      ExecStop=/usr/local/bin/lucid-distroless-stop.sh
      TimeoutStartSec=300
      TimeoutStopSec=60
      Restart=on-failure
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target
    owner: root:root
    permissions: '0644'

  # Lucid Distroless startup script
  - path: /usr/local/bin/lucid-distroless-start.sh
    content: |
      #!/bin/bash
      set -e
      
      echo "Starting Lucid Distroless system..."
      
      # Ensure Docker is running
      systemctl start docker
      sleep 5
      
      # Login to registry
      echo "${GITHUB_TOKEN}" | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
      
      # Pull latest Distroless images
      docker-compose -f /opt/lucid/docker-compose.core.yaml pull
      
      # Start core services
      docker-compose -f /opt/lucid/docker-compose.core.yaml up -d
      
      # Wait for services to be healthy
      sleep 30
      
      # Verify services are running
      docker-compose -f /opt/lucid/docker-compose.core.yaml ps
      
      echo "Lucid Distroless system started successfully"
    owner: root:root
    permissions: '0755'

  # Lucid Distroless shutdown script
  - path: /usr/local/bin/lucid-distroless-stop.sh
    content: |
      #!/bin/bash
      set -e
      
      echo "Stopping Lucid Distroless system..."
      
      # Stop services gracefully
      docker-compose -f /opt/lucid/docker-compose.core.yaml down --timeout 30
      
      # Clean up unused containers and images
      docker system prune -f
      
      echo "Lucid Distroless system stopped"
    owner: root:root
    permissions: '0755'

  # Firewall configuration for Distroless
  - path: /etc/ufw/before.rules
    content: |
      # Lucid Distroless UFW Rules
      *filter
      :ufw-before-input - [0:0]
      :ufw-before-output - [0:0]
      :ufw-before-forward - [0:0]
      :ufw-not-local - [0:0]
      
      # Allow Tor traffic
      -A ufw-before-input -p tcp --dport 9050 -j ACCEPT
      -A ufw-before-input -p tcp --dport 9051 -j ACCEPT
      
      # Allow API Gateway
      -A ufw-before-input -p tcp --dport 8080 -j ACCEPT
      
      # Allow API Server
      -A ufw-before-input -p tcp --dport 8081 -j ACCEPT
      
      # Allow MongoDB (local only)
      -A ufw-before-input -s 172.21.0.0/16 -p tcp --dport 27017 -j ACCEPT
      
      # Allow tunnel tools
      -A ufw-before-input -p tcp --dport 7000 -j ACCEPT
      
      # Allow Docker metrics
      -A ufw-before-input -s 172.21.0.0/16 -p tcp --dport 9323 -j ACCEPT
      
      # Drop all other incoming traffic
      -A ufw-before-input -j DROP
      
      COMMIT
    owner: root:root
    permissions: '0644'

  # Fail2ban configuration for Distroless
  - path: /etc/fail2ban/jail.local
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 3
      ignoreip = 127.0.0.1/8 ::1 172.21.0.0/16
      
      [sshd]
      enabled = true
      port = ssh
      logpath = /var/log/auth.log
      maxretry = 3
      
      [docker]
      enabled = true
      port = 2376,2377,9323
      logpath = /var/log/syslog
      maxretry = 3
      
      [lucid-api]
      enabled = true
      port = 8080,8081
      logpath = /opt/lucid/logs/api.log
      maxretry = 5
      findtime = 300
    owner: root:root
    permissions: '0644'

  # Chrony configuration for Distroless
  - path: /etc/chrony/chrony.conf
    content: |
      # Lucid Distroless Chrony Configuration
      pool 0.ubuntu.pool.ntp.org iburst
      pool 1.ubuntu.pool.ntp.org iburst
      pool 2.ubuntu.pool.ntp.org iburst
      pool 3.ubuntu.pool.ntp.org iburst
      
      # Allow time updates from local network
      allow 192.168.0.0/16
      allow 172.21.0.0/16
      
      # Local stratum
      local stratum 10
      
      # Logging
      logdir /var/log/chrony
      log measurements statistics tracking
      
      # Security
      cmdallow 127.0.0.1
      cmdallow ::1
    owner: root:root
    permissions: '0644'

# Run commands
runcmd:
  # Update system
  - apt-get update
  - apt-get upgrade -y
  
  # Install Docker with proper repository setup
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  
  # Configure Docker for Distroless
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker lucid
  - usermod -aG docker pickme
  
  # Set up Docker Buildx for multi-platform builds
  - docker buildx create --name lucid-pi --use --driver docker-container --driver-opt network=host
  - docker buildx inspect --bootstrap
  
  # Create Lucid directories for Distroless
  - mkdir -p /opt/lucid
  - mkdir -p /opt/lucid/configs
  - mkdir -p /opt/lucid/logs
  - mkdir -p /opt/lucid/data
  - mkdir -p /opt/lucid/backups
  - mkdir -p /opt/lucid/deployments
  - mkdir -p /opt/lucid/distroless
  - mkdir -p /opt/lucid/volumes
  
  # Set permissions
  - chown -R lucid:lucid /opt/lucid
  - chmod 755 /opt/lucid
  - chmod 700 /opt/lucid/volumes
  
  # Configure firewall for Distroless
  - ufw --force enable
  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow ssh
  - ufw allow 8080/tcp
  - ufw allow 8081/tcp
  - ufw allow 7000/tcp
  - ufw allow 9050/tcp
  - ufw allow 9051/tcp
  
  # Configure fail2ban
  - systemctl enable fail2ban
  - systemctl start fail2ban
  
  # Configure chrony
  - systemctl enable chrony
  - systemctl start chrony
  
  # Enable Lucid Distroless service
  - systemctl enable lucid-distroless.service
  
  # Set up log rotation for Distroless
  - echo "/opt/lucid/logs/*.log { daily rotate 7 compress delaycompress missingok notifempty create 644 lucid lucid }" >> /etc/logrotate.d/lucid
  - echo "/var/log/docker.log { daily rotate 7 compress delaycompress missingok notifempty create 644 root root }" >> /etc/logrotate.d/docker
  
  # Create monitoring script for Distroless
  - cat > /usr/local/bin/lucid-distroless-monitor.sh << 'EOF'
      #!/bin/bash
      # Lucid Distroless System Monitor
      
      LOG_FILE="/opt/lucid/logs/distroless-monitor.log"
      
      echo "$(date): Checking Lucid Distroless system status..." >> "$LOG_FILE"
      
      # Check Docker status
      if ! systemctl is-active --quiet docker; then
          echo "$(date): ERROR - Docker is not running" >> "$LOG_FILE"
          systemctl restart docker
          sleep 10
      fi
      
      # Check Lucid Distroless service
      if ! systemctl is-active --quiet lucid-distroless; then
          echo "$(date): ERROR - Lucid Distroless service is not running" >> "$LOG_FILE"
          systemctl restart lucid-distroless
      fi
      
      # Check Distroless containers health
      if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "unhealthy"; then
          echo "$(date): WARNING - Some Distroless containers are unhealthy" >> "$LOG_FILE"
          docker ps --format "table {{.Names}}\t{{.Status}}" >> "$LOG_FILE"
      fi
      
      # Check disk space
      DISK_USAGE=$(df /opt/lucid | awk 'NR==2 {print $5}' | sed 's/%//')
      if [ "$DISK_USAGE" -gt 85 ]; then
          echo "$(date): WARNING - Disk usage is ${DISK_USAGE}%" >> "$LOG_FILE"
          # Clean up old Docker images if space is critical
          if [ "$DISK_USAGE" -gt 95 ]; then
              echo "$(date): CRITICAL - Cleaning up Docker images" >> "$LOG_FILE"
              docker system prune -af --volumes
          fi
      fi
      
      # Check memory usage
      MEM_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
      if [ "$MEM_USAGE" -gt 90 ]; then
          echo "$(date): WARNING - Memory usage is ${MEM_USAGE}%" >> "$LOG_FILE"
      fi
      
      # Check container resource usage
      docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" >> "$LOG_FILE"
      
      echo "$(date): Distroless system check completed" >> "$LOG_FILE"
      EOF
  
  - chmod +x /usr/local/bin/lucid-distroless-monitor.sh
  
  # Set up monitoring cron job for Distroless
  - echo "*/5 * * * * /usr/local/bin/lucid-distroless-monitor.sh" | crontab -u lucid -
  
  # Create Docker Compose file for Distroless
  - cat > /opt/lucid/docker-compose.core.yaml << 'EOF'
      # LUCID CORE SERVICES - Distroless Deployment
      # Phase 1: Core Support Services (MongoDB, Tor, API Gateway, API Server, Tools)
      
      services:
        lucid_mongo:
          image: mongo:7
          container_name: lucid_mongo
          environment:
            MONGO_INITDB_ROOT_USERNAME: lucid
            MONGO_INITDB_ROOT_PASSWORD: lucid
          volumes:
            - mongo_data:/data/db
          networks:
            - lucid_core_net
          ports:
            - "27017:27017"
          healthcheck:
            test: ["CMD-SHELL", "mongosh --quiet -u lucid -p lucid --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 }).ok' | grep -q 1"]
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 15s
          deploy:
            resources:
              limits:
                memory: 1G
                cpus: '1.0'
              reservations:
                memory: 256M
                cpus: '0.25'
      
        api-server:
          image: pickme/lucid:api-server:latest
          container_name: lucid_api
          pull_policy: always
          environment:
            API_HOST: "0.0.0.0"
            API_PORT: "8081"
            MONGO_URL: "mongodb://lucid:lucid@lucid_mongo:27017/lucid"
          networks:
            - lucid_core_net
          depends_on:
            - lucid_mongo
          ports:
            - "8081:8081"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8081/health || exit 1"]
            interval: 20s
            timeout: 5s
            retries: 5
            start_period: 15s
          deploy:
            resources:
              limits:
                memory: 1G
                cpus: '1.0'
              reservations:
                memory: 256M
                cpus: '0.25'
      
        api-gateway:
          image: pickme/lucid:api-gateway:latest
          container_name: lucid_api_gateway
          pull_policy: always
          environment:
            API_UPSTREAM: "lucid_api:8081"
            GATEWAY_PORT: "8080"
          networks:
            - lucid_core_net
          depends_on:
            - api-server
          ports:
            - "8080:8080"
          healthcheck:
            test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8080/health || exit 1"]
            interval: 20s
            timeout: 5s
            retries: 5
            start_period: 10s
          deploy:
            resources:
              limits:
                memory: 256M
                cpus: '0.5'
              reservations:
                memory: 64M
                cpus: '0.1'
      
      networks:
        lucid_core_net:
          driver: bridge
          ipam:
            config:
              - subnet: 172.21.0.0/16
      
      volumes:
        mongo_data:
      EOF
  
  # Set proper permissions on Docker Compose file
  - chown lucid:lucid /opt/lucid/docker-compose.core.yaml
  - chmod 644 /opt/lucid/docker-compose.core.yaml
  
  # Final system message
  - echo "Lucid Distroless system initialized successfully on $(hostname)" | tee /opt/lucid/logs/init.log
  - echo "System ready for Lucid Distroless deployment" | tee -a /opt/lucid/logs/init.log
  - echo "Docker Buildx configured for multi-platform builds" | tee -a /opt/lucid/logs/init.log

# Power state
power_state:
  delay: 0
  mode: reboot
  message: "Rebooting to complete Lucid Distroless initialization"
  condition: true
