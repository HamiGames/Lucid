# Authentication Service Distroless Dockerfile
# Multi-stage build for distroless compliance
# Based on: gcr.io/distroless/python3-debian12

# =============================================================================
# STAGE 1: Builder - Install dependencies and build application
# =============================================================================
FROM python:3.11-slim AS builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create Python virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Copy application code
COPY . /app
WORKDIR /app

# =============================================================================
# STAGE 2: Runtime - Distroless base with application
# =============================================================================
FROM gcr.io/distroless/python3-debian12

# Copy Python dependencies
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy application code
COPY --from=builder /app /app
WORKDIR /app

# Create necessary directories
USER 65532:65532

# Expose application port
EXPOSE 8089

# Health check script
COPY --chown=65532:65532 healthcheck.py /app/healthcheck.py

# Security labels
LABEL org.lucid.security="distroless" \
      org.lucid.base="gcr.io/distroless/python3-debian12" \
      org.lucid.user="65532:65532" \
      org.lucid.shell="false"

# Use Python to start the authentication service
ENTRYPOINT ["python", "-m", "auth.main"]
