openapi: 3.0.3
info:
  title: Lucid RDP API
  version: 0.1.0
  description: |
    Base API contract for the Lucid Remote Desktop Platform.
    Provides health checks and system metadata including blockchain integration.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://api.lucid.local
    description: Local API Gateway (dev)
  - url: http://localhost:8080
    description: API Gateway (dev)
  - url: http://localhost:8081
    description: Direct API (dev)
paths:
  /:
    get:
      summary: API root
      description: Returns basic API metadata and links.
      operationId: metaRoot
      responses:
        '200':
          description: Root metadata
          content:
            application/json:
              schema: {type: object, properties: {name: {type: string, example: lucid-api-gateway}, version: {type: string, example: 0.1.0}, endpoints: {type: object, properties: {health: {type: string, example: /health}}}}, $ref: '#/components/schemas/Root'}
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestId'
            RateLimit-Limit:
              $ref: '#/components/headers/RateLimit-Limit'
            RateLimit-Remaining:
              $ref: '#/components/headers/RateLimit-Remaining'
            RateLimit-Reset:
              $ref: '#/components/headers/RateLimit-Reset'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid request
        default:
          $ref: '#/components/responses/ErrorDefault'
      security: []
      tags: [meta]
  /health:
    get:
      summary: Health check
      description: Returns overall service health and metadata.
      operationId: metaHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema: {type: object, properties: {status: {type: string, example: ok}, service: {type: string, example: api-gateway}, time: {type: string, format: date-time, example: '2025-09-01T11:51:33Z'}, block_onion: {type: string, example: xywt53jb37vyceqrep3usgckeeq4jxtjwjlgcuqimsnmjc7ustgmimqd.onion}, block_rpc_url: {type: string, example: 'http://127.0.0.1:8545'}}, $ref: '#/components/schemas/Health'}
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestId'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid request
        default:
          $ref: '#/components/responses/ErrorDefault'
      security: []
      tags: [meta]
  /auth/login:
    post:
      operationId: authLogin
      tags: [auth]
      security: [] # public login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: Authenticated
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '401':
          $ref: '#/components/responses/Error401'
        '422':
          $ref: '#/components/responses/ErrorDefault'
        '429':
          $ref: '#/components/responses/Error429'
        default:
          $ref: '#/components/responses/ErrorDefault'
  /auth/refresh:
    post:
      operationId: authRefresh
      tags: [auth]
      security: [] # public: uses refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRefreshRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRefreshResponse'
        '401':
          $ref: '#/components/responses/Error401'
        '422':
          $ref: '#/components/responses/ErrorDefault'
        '429':
          $ref: '#/components/responses/Error429'
        default:
          $ref: '#/components/responses/ErrorDefault'
  /auth/logout:
    post:
      operationId: authLogout
      tags: [auth]
      # requires bearer; invalidates refresh token server-side
      responses:
        '204':
          description: Logged out (no content)
        '401':
          $ref: '#/components/responses/Error401'
        default:
          $ref: '#/components/responses/ErrorDefault'
  /users:
    get:
      operationId: usersList
      tags: [users]
      summary: List users (admin)
      security:
        - bearerAuth: []
          apiKeyAuth: [] # AND: both required on admin ops
      parameters:
        - in: query
          name: page
          schema: {type: integer, minimum: 1, default: 1}
        - in: query
          name: page_size
          schema: {type: integer, minimum: 1, maximum: 200, default: 50}
        - in: query
          name: search
          schema: {type: string}
      responses:
        '200':
          description: Paginated users
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestId'
            RateLimit-Limit:
              $ref: '#/components/headers/RateLimit-Limit'
            RateLimit-Remaining:
              $ref: '#/components/headers/RateLimit-Remaining'
            RateLimit-Reset:
              $ref: '#/components/headers/RateLimit-Reset'
            X-Total-Count:
              description: Total matching records.
              schema:
                type: integer
                minimum: 0
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '422':
          $ref: '#/components/responses/ErrorDefault'
        default:
          $ref: '#/components/responses/ErrorDefault'
    post:
      operationId: usersCreate
      tags: [users]
      summary: Create user (admin)
      security:
        - bearerAuth: []
          apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ErrorDefault'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '409':
          $ref: '#/components/responses/ErrorDefault'
        '422':
          $ref: '#/components/responses/ErrorDefault'
        default:
          $ref: '#/components/responses/ErrorDefault'
  /users/register:
    post:
      operationId: usersRegister
      tags: [users]
      security: [] # public self-serve registration (dev)
      summary: Self-register a user (dev)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          $ref: '#/components/responses/ErrorDefault'
        '422':
          $ref: '#/components/responses/ErrorDefault'
        default:
          $ref: '#/components/responses/ErrorDefault'
  /users/me:
    get:
      operationId: usersGetMe
      tags: [users]
      summary: Get current user
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Error401'
        default:
          $ref: '#/components/responses/ErrorDefault'
    patch:
      operationId: usersUpdateMe
      tags: [users]
      summary: Update current user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateSelf'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Error401'
        '422':
          $ref: '#/components/responses/ErrorDefault'
        default:
          $ref: '#/components/responses/ErrorDefault'
  /users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          pattern: '^[a-f0-9]{24}$' # Mongo ObjectId
    get:
      operationId: usersGetById
      tags: [users]
      summary: Get user by id (admin)
      security:
        - bearerAuth: []
          apiKeyAuth: []
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/ErrorDefault'
        default:
          $ref: '#/components/responses/ErrorDefault'
    patch:
      operationId: usersUpdateById
      tags: [users]
      summary: Update user by id (admin)
      security:
        - bearerAuth: []
          apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateAdmin'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/ErrorDefault'
        '422':
          $ref: '#/components/responses/ErrorDefault'
        default:
          $ref: '#/components/responses/ErrorDefault'
    delete:
      operationId: usersDeleteById
      tags: [users]
      summary: Delete user by id (admin)
      security:
        - bearerAuth: []
          apiKeyAuth: []
      responses:
        '204':
          description: Deleted
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/ErrorDefault'
        default:
          $ref: '#/components/responses/ErrorDefault'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key
  headers:
    RequestId:
      description: Correlates requests across gateway/API.
      schema:
        type: string
    RateLimit-Limit:
      description: Maximum requests allowed in the current window.
      schema:
        type: integer
        minimum: 1
    RateLimit-Remaining:
      description: Remaining requests in the current window.
      schema:
        type: integer
        minimum: 0
    RateLimit-Reset:
      description: Seconds until the rate-limit window resets.
      schema:
        type: integer
        minimum: 0
  responses:
    Error401:
      description: Unauthorized
      headers:
        WWW-Authenticate:
          description: Challenge; usually "Bearer".
          schema:
            type: string
            example: Bearer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Error429:
      description: Too Many Requests
      headers:
        RateLimit-Limit:
          $ref: '#/components/headers/RateLimit-Limit'
        RateLimit-Remaining:
          $ref: '#/components/headers/RateLimit-Remaining'
        RateLimit-Reset:
          $ref: '#/components/headers/RateLimit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ErrorDefault:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    # Meta
    Root:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          example: lucid-api-gateway
        version:
          type: string
          example: 0.1.0
        endpoints:
          type: object
          additionalProperties: false
          properties:
            health:
              type: string
              example: /health
    Health:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
          enum: [ok, degraded]
          example: ok
        service:
          type: string
          example: api-gateway
        time:
          type: string
          format: date-time
        block_onion:
          type: string
          pattern: '^[a-z2-7]{56}\\.onion$'
        block_rpc_url:
          type: string
          format: uri
    # Users
    User:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          pattern: '^[a-f0-9]{24}$'
          example: 5f8d0d55b54764421b7156c5
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
          default: user
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UserCreate:
      type: object
      required: [email, password, role]
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 12
        role:
          type: string
          enum: [user, admin]
    UserRegister:
      type: object
      required: [email, password]
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 12
    UserUpdateSelf:
      type: object
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
    UserUpdateAdmin:
      type: object
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
    PaginatedUsers:
      type: object
      additionalProperties: false
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total:
          type: integer
          minimum: 0
        page:
          type: integer
          minimum: 1
        page_size:
          type: integer
          minimum: 1
          maximum: 200
    # Auth
    AuthLoginRequest:
      type: object
      required: [email, password]
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 12
    AuthLoginResponse:
      type: object
      additionalProperties: false
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          minimum: 1
          example: 3600
        refresh_token:
          type: string
    AuthRefreshRequest:
      type: object
      required: [refresh_token]
      additionalProperties: false
      properties:
        refresh_token:
          type: string
    AuthRefreshResponse:
      type: object
      additionalProperties: false
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          minimum: 1
          example: 3600
    # Errors
    Error:
      type: object
      additionalProperties: false
      properties:
        error:
          type: string
          example: Invalid request
        code:
          type: string
          example: E_VALIDATION
        request_id:
          type: string
          example: 7d67f9f0-7e3a-4ad5-9a5f-0c0f5a7fa2b9
# Secure-by-default: all routes require auth unless explicitly opted out
security:
  - bearerAuth: []
  - apiKeyAuth: []
tags:
  - name: meta
    description: Health & metadata (public)
  - name: auth
    description: Authentication & token lifecycle
  - name: users
    description: User management
