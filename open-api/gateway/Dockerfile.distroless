# LUCID OPEN-API GATEWAY - SPEC-4 Open API Plane (Distroless)
# Professional NGINX gateway for Pi deployment with distroless security
# Multi-platform build for ARM64 Pi and AMD64 development
# LUCID-STRICT Mode: Enhanced security with minimal attack surface

# syntax=docker/dockerfile:1.7
FROM nginx:1.28-alpine AS openapi-gateway-builder

# Metadata for professional container management
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="Open-API Gateway service for Lucid (Distroless)" \
      org.lucid.plane="open-api" \
      org.lucid.service="openapi-gateway" \
      org.lucid.stage="2" \
      org.lucid.expose="8080"

# Install build tools and dependencies
RUN apk add --no-cache \
        curl \
        ca-certificates \
        bash \
        jq \
        netcat-openbsd \
        su-exec \
    && rm -rf /var/cache/apk/* \
    && adduser -D -s /bin/bash lucid

# Set up application directory with Pi mount path reference
WORKDIR /mnt/myssd/Lucid/open-api/gateway
RUN mkdir -p /mnt/myssd/Lucid/open-api/gateway && \
    chown -R lucid:lucid /mnt/myssd/Lucid/open-api/gateway

# Create optimized nginx configuration for OpenAPI gateway
RUN mkdir -p /etc/nginx/templates /var/cache/nginx /var/run/nginx && \
    chown -R lucid:lucid /var/cache/nginx /var/run/nginx

# Professional nginx configuration template for OpenAPI
RUN cat > /etc/nginx/templates/lucid-openapi.conf.template <<'EOF'
# Lucid Open-API Gateway â€” Dynamic upstream with Docker DNS resolution
server {
    listen ${GATEWAY_PORT};
    server_name _;
    
    client_max_body_size ${CLIENT_MAX_BODY_SIZE};
    
    # Use a variable so nginx resolves at request time; Docker DNS resolver
    set $upstream ${API_UPSTREAM};
    resolver 127.0.0.11 ipv6=off valid=10s;
    resolver_timeout 5s;
    
    # Security headers for API Gateway
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Health endpoint: proxies through to OpenAPI /health
    location /health {
        proxy_pass http://$upstream/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        access_log off;
    }
    
    # OpenAPI documentation endpoints
    location /docs {
        proxy_pass http://$upstream/docs;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /redoc {
        proxy_pass http://$upstream/redoc;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /openapi.json {
        proxy_pass http://$upstream/openapi.json;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Default: proxy everything to OpenAPI server
    location / {
        proxy_pass http://$upstream;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Gateway-Version "1.0.0";
        
        # Timeouts optimized for Pi performance
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }
    
    # Gateway status endpoint
    location /gateway/status {
        access_log off;
        return 200 '{"status":"healthy","service":"lucid-openapi-gateway","version":"1.0.0"}';
        add_header Content-Type application/json;
    }
}
EOF

# Professional entrypoint for OpenAPI gateway
RUN cat > /usr/local/bin/lucid-openapi-entrypoint.sh <<'EOF' && chmod +x /usr/local/bin/lucid-openapi-entrypoint.sh
#!/usr/bin/env bash
set -euo pipefail

# Render configuration template
echo "[openapi-gateway] Configuring NGINX for Lucid OpenAPI Gateway..."
envsubst '${API_UPSTREAM} ${CLIENT_MAX_BODY_SIZE} ${GATEWAY_PORT}' \
    < /etc/nginx/templates/lucid-openapi.conf.template \
    > /etc/nginx/conf.d/default.conf

# Validate configuration
echo "[openapi-gateway] Validating NGINX configuration..."
nginx -t

# Log startup information
echo "[openapi-gateway] Starting NGINX OpenAPI Gateway"
echo "[openapi-gateway] Upstream API: $API_UPSTREAM"
echo "[openapi-gateway] Gateway Port: $GATEWAY_PORT"
echo "[openapi-gateway] Max Body Size: $CLIENT_MAX_BODY_SIZE"

# Start NGINX
exec nginx -g 'daemon off;'
EOF

# Stage 2: Distroless runtime with NGINX
FROM gcr.io/distroless/base-debian12:latest

# Metadata for runtime container
LABEL maintainer="Lucid Development Team" \
      version="1.0.0-distroless" \
      description="Open-API Gateway service for Lucid (Distroless Runtime)" \
      org.lucid.plane="open-api" \
      org.lucid.service="openapi-gateway" \
      org.lucid.stage="2" \
      org.lucid.expose="8080"

# Copy NGINX and all dependencies
COPY --from=openapi-gateway-builder /usr/sbin/nginx /usr/sbin/nginx
COPY --from=openapi-gateway-builder /usr/share/nginx /usr/share/nginx
COPY --from=openapi-gateway-builder /etc/nginx /etc/nginx

# Copy system utilities
COPY --from=openapi-gateway-builder /usr/bin/curl /usr/bin/curl
COPY --from=openapi-gateway-builder /usr/bin/nc /usr/bin/nc
COPY --from=openapi-gateway-builder /usr/bin/jq /usr/bin/jq
COPY --from=openapi-gateway-builder /bin/bash /bin/bash
COPY --from=openapi-gateway-builder /sbin/su-exec /sbin/su-exec
COPY --from=openapi-gateway-builder /usr/bin/envsubst /usr/bin/envsubst

# Copy required dynamic libraries (architecture-specific)
COPY --from=openapi-gateway-builder /lib/*-linux-*/libc.so.6 /lib/
COPY --from=openapi-gateway-builder /lib/*-linux-*/libssl.so.3 /lib/
COPY --from=openapi-gateway-builder /lib/*-linux-*/libcrypto.so.3 /lib/
COPY --from=openapi-gateway-builder /lib/*-linux-*/libz.so.1 /lib/
COPY --from=openapi-gateway-builder /lib/*-linux-*/libpcre2-8.so.0 /lib/
COPY --from=openapi-gateway-builder /lib*/ld-linux-*.so.2 /lib64/

# Copy user and group information
COPY --from=openapi-gateway-builder /etc/passwd /etc/passwd
COPY --from=openapi-gateway-builder /etc/group /etc/group

# Copy CA certificates
COPY --from=openapi-gateway-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt

# Copy entrypoint script
COPY --from=openapi-gateway-builder --chmod=755 /usr/local/bin/lucid-openapi-entrypoint.sh /usr/local/bin/lucid-openapi-entrypoint.sh

# Create runtime directories with Pi mount structure
COPY --from=openapi-gateway-builder --chown=nginx:nginx /var/cache/nginx /var/cache/nginx
COPY --from=openapi-gateway-builder --chown=nginx:nginx /var/run/nginx /var/run/nginx
COPY --from=openapi-gateway-builder /var/log/nginx /var/log/nginx
COPY --from=openapi-gateway-builder --chown=lucid:lucid /mnt/myssd/Lucid/open-api/gateway /mnt/myssd/Lucid/open-api/gateway

# OpenAPI Gateway configuration environment
ENV API_UPSTREAM="lucid_openapi:8081" \
    CLIENT_MAX_BODY_SIZE="10m" \
    GATEWAY_PORT="8080"

# Security and runtime configuration
EXPOSE 8080
WORKDIR /mnt/myssd/Lucid/open-api/gateway

# Start as root (nginx will drop privileges)
ENTRYPOINT ["/usr/local/bin/lucid-openapi-entrypoint.sh"]