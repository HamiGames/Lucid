name: Phase 3 - Application Services Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'sessions/**'
      - 'RDP/**'
      - 'node/**'
      - 'infrastructure/containers/sessions/**'
      - 'infrastructure/containers/rdp/**'
      - 'infrastructure/containers/node/**'
      - 'scripts/registry/**'
      - '.github/workflows/build-phase3.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'sessions/**'
      - 'RDP/**'
      - 'node/**'
      - 'infrastructure/containers/sessions/**'
      - 'infrastructure/containers/rdp/**'
      - 'infrastructure/containers/node/**'
  workflow_dispatch:
    inputs:
      target_platform:
        description: 'Target platform (linux/amd64, linux/arm64)'
        required: true
        default: 'linux/amd64,linux/arm64'
        type: choice
        options:
        - linux/amd64
        - linux/arm64
        - linux/amd64,linux/arm64
      force_rebuild:
        description: 'Force rebuild all services'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  REPOSITORY: hamigames/lucid
  PHASE: phase3

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      build-all: ${{ steps.changes.outputs.build-all }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          # Check if force rebuild is requested
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "build-all=true" >> $GITHUB_OUTPUT
            echo "services=session-pipeline,session-recorder,session-processor,session-storage,session-api,rdp-server-manager,rdp-xrdp,rdp-controller,rdp-monitor,node-management" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if any Phase 3 files changed
          if git diff --name-only HEAD~1 HEAD | grep -E '^(sessions/|RDP/|node/|infrastructure/containers/(sessions|rdp|node)/)' > /dev/null; then
            echo "build-all=true" >> $GITHUB_OUTPUT
            echo "services=session-pipeline,session-recorder,session-processor,session-storage,session-api,rdp-server-manager,rdp-xrdp,rdp-controller,rdp-monitor,node-management" >> $GITHUB_OUTPUT
          else
            # Check for specific service changes
            services=""
            if git diff --name-only HEAD~1 HEAD | grep -E '^(sessions/|infrastructure/containers/sessions/)' > /dev/null; then
              services="$services,session-pipeline,session-recorder,session-processor,session-storage,session-api"
            fi
            if git diff --name-only HEAD~1 HEAD | grep -E '^(RDP/|infrastructure/containers/rdp/)' > /dev/null; then
              services="$services,rdp-server-manager,rdp-xrdp,rdp-controller,rdp-monitor"
            fi
            if git diff --name-only HEAD~1 HEAD | grep -E '^(node/|infrastructure/containers/node/)' > /dev/null; then
              services="$services,node-management"
            fi
            
            # If no specific services changed, build all
            if [ -z "$services" ]; then
              echo "build-all=true" >> $GITHUB_OUTPUT
              echo "services=session-pipeline,session-recorder,session-processor,session-storage,session-api,rdp-server-manager,rdp-xrdp,rdp-controller,rdp-monitor,node-management" >> $GITHUB_OUTPUT
            else
              echo "build-all=false" >> $GITHUB_OUTPUT
              echo "services=${services:1}" >> $GITHUB_OUTPUT
            fi
          fi

  setup-buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

  build-session-pipeline:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'session-pipeline')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build session-pipeline
        uses: docker/build-push-action@v5
        with:
          context: ./sessions
          file: ./sessions/Dockerfile.pipeline
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-pipeline:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-pipeline:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-pipeline:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=session-pipeline-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=session-pipeline-${{ matrix.platform }}

  build-session-recorder:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'session-recorder')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build session-recorder
        uses: docker/build-push-action@v5
        with:
          context: ./sessions
          file: ./sessions/Dockerfile.recorder
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-recorder:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-recorder:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-recorder:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=session-recorder-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=session-recorder-${{ matrix.platform }}

  build-session-processor:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'session-processor')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build session-processor
        uses: docker/build-push-action@v5
        with:
          context: ./sessions
          file: ./sessions/Dockerfile.processor
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-processor:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-processor:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-processor:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=session-processor-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=session-processor-${{ matrix.platform }}

  build-session-storage:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'session-storage')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build session-storage
        uses: docker/build-push-action@v5
        with:
          context: ./sessions
          file: ./sessions/Dockerfile.storage
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-storage:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-storage:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-storage:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=session-storage-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=session-storage-${{ matrix.platform }}

  build-session-api:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'session-api')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build session-api
        uses: docker/build-push-action@v5
        with:
          context: ./sessions
          file: ./sessions/Dockerfile.api
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-api:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-api:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-api:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=session-api-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=session-api-${{ matrix.platform }}

  build-rdp-server-manager:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'rdp-server-manager')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build rdp-server-manager
        uses: docker/build-push-action@v5
        with:
          context: ./RDP
          file: ./RDP/Dockerfile.server-manager
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/rdp-server-manager:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/rdp-server-manager:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/rdp-server-manager:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=rdp-server-manager-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=rdp-server-manager-${{ matrix.platform }}

  build-rdp-xrdp:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'rdp-xrdp')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build rdp-xrdp
        uses: docker/build-push-action@v5
        with:
          context: ./RDP
          file: ./RDP/Dockerfile.xrdp
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/rdp-xrdp:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/rdp-xrdp:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/rdp-xrdp:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=rdp-xrdp-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=rdp-xrdp-${{ matrix.platform }}

  build-rdp-controller:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'rdp-controller')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build rdp-controller
        uses: docker/build-push-action@v5
        with:
          context: ./RDP
          file: ./RDP/Dockerfile.controller
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/rdp-controller:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/rdp-controller:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/rdp-controller:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=rdp-controller-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=rdp-controller-${{ matrix.platform }}

  build-rdp-monitor:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'rdp-monitor')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build rdp-monitor
        uses: docker/build-push-action@v5
        with:
          context: ./RDP
          file: ./RDP/Dockerfile.monitor
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/rdp-monitor:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/rdp-monitor:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/rdp-monitor:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=rdp-monitor-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=rdp-monitor-${{ matrix.platform }}

  build-node-management:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'node-management')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build node-management
        uses: docker/build-push-action@v5
        with:
          context: ./node
          file: ./node/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/node-management:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/node-management:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/node-management:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=node-management-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=node-management-${{ matrix.platform }}

  security-scan:
    needs: [build-session-pipeline, build-session-recorder, build-session-processor, build-session-storage, build-session-api, build-rdp-server-manager, build-rdp-xrdp, build-rdp-controller, build-rdp-monitor, build-node-management]
    runs-on: ubuntu-latest
    if: always()
    strategy:
      matrix:
        service: [session-pipeline, session-recorder, session-processor, session-storage, session-api, rdp-server-manager, rdp-xrdp, rdp-controller, rdp-monitor, node-management]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  build-summary:
    needs: [detect-changes, build-session-pipeline, build-session-recorder, build-session-processor, build-session-storage, build-session-api, build-rdp-server-manager, build-rdp-xrdp, build-rdp-controller, build-rdp-monitor, build-node-management, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Phase 3 Build Summary
        run: |
          echo "## Phase 3 - Application Services Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Services Built:** ${{ needs.detect-changes.outputs.services }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type:** ${{ needs.detect-changes.outputs.build-all == 'true' && 'Full Rebuild' || 'Incremental Build' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Platforms:** ${{ github.event.inputs.target_platform || 'linux/amd64, linux/arm64' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Built Images:" >> $GITHUB_STEP_SUMMARY
          for service in $(echo "${{ needs.detect-changes.outputs.services }}" | tr ',' ' '); do
            echo "- \`${{ env.REGISTRY }}/${{ env.REPOSITORY }}/$service:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.REGISTRY }}/${{ env.REPOSITORY }}/$service:${{ env.PHASE }}-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "All images scanned with Trivy for vulnerabilities" >> $GITHUB_STEP_SUMMARY
