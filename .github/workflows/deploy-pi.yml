name: Raspberry Pi Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      pi_host:
        description: 'Raspberry Pi hostname or IP'
        required: true
        default: 'pickme@192.168.0.75'
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - update
        - rollback
        - health-check
      target_services:
        description: 'Services to deploy (comma-separated)'
        required: false
        default: 'api-gateway,blockchain-core,session-management,rdp-services,node-management,admin-interface,auth-service'
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean
      staging_environment:
        description: 'Staging environment configuration'
        required: false
        default: 'pi-staging'
        type: choice
        options:
        - pi-staging
        - pi-production
        - pi-development

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PI_HOST: ${{ github.event.inputs.pi_host || 'pickme@192.168.0.75' }}
  DEPLOYMENT_TYPE: ${{ github.event.inputs.deployment_type || 'staging' }}
  STAGING_ENVIRONMENT: ${{ github.event.inputs.staging_environment || 'pi-staging' }}
  PI_DEPLOY_DIR: /opt/lucid/staging

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    outputs:
      can_deploy: ${{ steps.checks.outputs.can_deploy }}
      services_to_deploy: ${{ steps.checks.outputs.services }}
      current_version: ${{ steps.checks.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pre-deployment validation
        id: checks
        run: |
          # Validate deployment inputs
          if [ "${{ env.DEPLOYMENT_TYPE }}" = "rollback" ]; then
            echo "can_deploy=true" >> $GITHUB_OUTPUT
            echo "services=all" >> $GITHUB_OUTPUT
            echo "current_version=previous" >> $GITHUB_OUTPUT
          elif [ "${{ env.DEPLOYMENT_TYPE }}" = "health-check" ]; then
            echo "can_deploy=false" >> $GITHUB_OUTPUT
            echo "services=none" >> $GITHUB_OUTPUT
            echo "current_version=current" >> $GITHUB_OUTPUT
          else
            # Check if we have required secrets
            if [ -z "${{ secrets.PI_SSH_KEY_B64 }}" ] || [ -z "${{ secrets.PI_USER }}" ]; then
              echo "❌ Missing required secrets: PI_SSH_KEY_B64 or PI_USER"
              echo "can_deploy=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # Determine services to deploy
            if [ -n "${{ github.event.inputs.target_services }}" ]; then
              services="${{ github.event.inputs.target_services }}"
            else
              services="gui,blockchain,rdp,node,storage,database,vm"
            fi
            
            echo "can_deploy=true" >> $GITHUB_OUTPUT
            echo "services=$services" >> $GITHUB_OUTPUT
            echo "current_version=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup SSH
        if: steps.checks.outputs.can_deploy == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PI_SSH_KEY_B64 }}" | base64 -d > ~/.ssh/pi_key
          chmod 600 ~/.ssh/pi_key
          
          # Add Pi host to known_hosts
          ssh-keyscan -H ${{ env.PI_HOST }} >> ~/.ssh/known_hosts
          
          # Test SSH connection
          echo "Testing SSH connection to ${{ env.PI_HOST }}..."
          ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.PI_USER }}@${{ env.PI_HOST }} "echo 'SSH connection successful'"

      - name: Test Pi connectivity
        if: steps.checks.outputs.can_deploy == 'true'
        run: |
          ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ env.PI_HOST }} "echo 'Pi connectivity test successful'"

  health-check-only:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    if: ${{ (github.event.inputs.deployment_type || 'full') == 'health-check' }}
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PI_SSH_KEY_B64 }}" | base64 -d > ~/.ssh/pi_key
          chmod 600 ~/.ssh/pi_key
          ssh-keyscan -H ${{ env.PI_HOST }} >> ~/.ssh/known_hosts

      - name: Run health checks
        run: |
          ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ env.PI_HOST }} << 'EOF'
            echo "=== System Health Check ==="
            echo "Uptime: $(uptime)"
            echo "Disk Usage: $(df -h)"
            echo "Memory Usage: $(free -h)"
            echo "CPU Load: $(cat /proc/loadavg)"
            
            echo "=== Docker Status ==="
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || echo "Docker not running"
            
            echo "=== Service Health ==="
            # Check if services are responding
            for service in gui blockchain rdp node storage database vm; do
              if docker ps --format "{{.Names}}" 2>/dev/null | grep -q "^lucid-${service}-"; then
                echo "✅ $service: Running"
              else
                echo "❌ $service: Not running"
              fi
            done
            
            echo "=== Network Connectivity ==="
            ping -c 3 8.8.8.8 || echo "❌ Internet connectivity failed"
            
            echo "=== Log Analysis ==="
            # Check for recent errors in logs
            docker logs lucid-gui-1 2>&1 | tail -10 || echo "No GUI logs"
            docker logs lucid-blockchain-1 2>&1 | tail -10 || echo "No blockchain logs"
          EOF

  prepare-deployment:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    if: needs.pre-deployment-checks.outputs.can_deploy == 'true' && ${{ (github.event.inputs.deployment_type || 'full') != 'health-check' }}
    outputs:
      deployment_id: ${{ steps.prepare.outputs.deployment_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PI_SSH_KEY_B64 }}" | base64 -d > ~/.ssh/pi_key
          chmod 600 ~/.ssh/pi_key
          ssh-keyscan -H ${{ env.PI_HOST }} >> ~/.ssh/known_hosts

      - name: Prepare deployment
        id: prepare
        run: |
          deployment_id="deploy-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
          echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT
          
          # Create deployment directory on Pi
          ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ env.PI_HOST }} << EOF
            mkdir -p /opt/lucid/deployments/$deployment_id
            mkdir -p /opt/lucid/backups
            echo "Deployment directory created: /opt/lucid/deployments/$deployment_id"
          EOF

      - name: Backup current deployment
        if: ${{ (github.event.inputs.deployment_type || 'full') != 'rollback' }}
        run: |
          ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ env.PI_HOST }} << 'EOF'
            # Create backup of current deployment
            if [ -d "/opt/lucid/current" ]; then
              backup_dir="/opt/lucid/backups/backup-$(date +%Y%m%d-%H%M%S)"
              mkdir -p "$backup_dir"
              cp -r /opt/lucid/current/* "$backup_dir/" 2>/dev/null || true
              echo "Backup created at: $backup_dir"
            else
              echo "No current deployment found to backup"
            fi
          EOF

  pull-images:
    runs-on: ubuntu-latest
    needs: [prepare-deployment]
    if: ${{ (github.event.inputs.deployment_type || 'full') != 'health-check' && (github.event.inputs.deployment_type || 'full') != 'rollback' }}
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PI_SSH_KEY_B64 }}" | base64 -d > ~/.ssh/pi_key
          chmod 600 ~/.ssh/pi_key
          ssh-keyscan -H ${{ env.PI_HOST }} >> ~/.ssh/known_hosts

      - name: Login to registry on Pi
        run: |
          ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ env.PI_HOST }} << EOF
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          EOF

      - name: Pull images
        run: |
          services="${{ needs.pre-deployment-checks.outputs.services_to_deploy }}"
          for service in $(echo "$services" | tr ',' ' '); do
            echo "Pulling $service image..."
            ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ env.PI_HOST }} << EOF
              docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:${{ github.sha }} || {
                echo "Failed to pull $service image, using latest"
                docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:latest
              }
            EOF
          done

  deploy-services:
    runs-on: ubuntu-latest
    needs: [prepare-deployment, pull-images]
    if: ${{ (github.event.inputs.deployment_type || 'full') != 'health-check' && (github.event.inputs.deployment_type || 'full') != 'rollback' }}
    strategy:
      matrix:
        service: ${{ fromJSON(format('[{0}]', needs.pre-deployment-checks.outputs.services_to_deploy)) }}
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PI_SSH_KEY_B64 }}" | base64 -d > ~/.ssh/pi_key
          chmod 600 ~/.ssh/pi_key
          ssh-keyscan -H ${{ env.PI_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy ${{ matrix.service }} service
        run: |
          ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ env.PI_HOST }} << EOF
            echo "Deploying ${{ matrix.service }} service..."
            
            # Stop existing service
            docker-compose -f /opt/lucid/docker-compose.yml stop lucid-${{ matrix.service }} || true
            docker-compose -f /opt/lucid/docker-compose.yml rm -f lucid-${{ matrix.service }} || true
            
            # Update docker-compose.yml with new image
            sed -i "s|image:.*lucid-${{ matrix.service }}.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}|" /opt/lucid/docker-compose.yml
            
            # Start new service
            docker-compose -f /opt/lucid/docker-compose.yml up -d lucid-${{ matrix.service }}
            
            echo "✅ ${{ matrix.service }} service deployed successfully"
          EOF

      - name: Verify ${{ matrix.service }} deployment
        run: |
          ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ env.PI_HOST }} << EOF
            # Wait for service to be ready
            timeout 60 bash -c 'until docker logs lucid-${{ matrix.service }}-1 2>&1 | grep -q "ready\|started\|listening"; do sleep 2; done' || {
              echo "❌ ${{ matrix.service }} service failed to start"
              docker logs lucid-${{ matrix.service }}-1
              exit 1
            }
            
            echo "✅ ${{ matrix.service }} service verified"
          EOF

  rollback-deployment:
    runs-on: ubuntu-latest
    needs: [prepare-deployment]
    if: ${{ (github.event.inputs.deployment_type || 'full') == 'rollback' }}
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PI_SSH_KEY_B64 }}" | base64 -d > ~/.ssh/pi_key
          chmod 600 ~/.ssh/pi_key
          ssh-keyscan -H ${{ env.PI_HOST }} >> ~/.ssh/known_hosts

      - name: Rollback deployment
        run: |
          ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ env.PI_HOST }} << 'EOF'
            echo "Rolling back deployment..."
            
            # Find the most recent backup
            latest_backup=$(ls -t /opt/lucid/backups/ 2>/dev/null | head -1)
            if [ -z "$latest_backup" ]; then
              echo "❌ No backup found for rollback"
              exit 1
            fi
            
            echo "Rolling back to: $latest_backup"
            
            # Stop all services
            docker-compose -f /opt/lucid/docker-compose.yml down || true
            
            # Restore from backup
            cp -r /opt/lucid/backups/$latest_backup/* /opt/lucid/current/ 2>/dev/null || true
            
            # Start services with previous configuration
            docker-compose -f /opt/lucid/docker-compose.yml up -d
            
            echo "✅ Rollback completed"
          EOF

  post-deployment-tests:
    runs-on: ubuntu-latest
    needs: [deploy-services, rollback-deployment]
    if: always() && (needs.deploy-services.result == 'success' || needs.rollback-deployment.result == 'success')
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PI_SSH_KEY_B64 }}" | base64 -d > ~/.ssh/pi_key
          chmod 600 ~/.ssh/pi_key
          ssh-keyscan -H ${{ env.PI_HOST }} >> ~/.ssh/known_hosts

      - name: Run post-deployment tests
        run: |
          ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ env.PI_HOST }} << 'EOF'
            echo "=== Post-Deployment Health Check ==="
            
            # Check all services are running
            services="gui blockchain rdp node storage database vm"
            failed_services=""
            
            for service in $services; do
              if docker ps --format "{{.Names}}" 2>/dev/null | grep -q "^lucid-${service}-"; then
                # Service is running, check health endpoint if available
                if docker exec lucid-${service}-1 curl -f http://localhost:8080/health 2>/dev/null; then
                  echo "✅ $service: Healthy"
                else
                  echo "⚠️ $service: Running but health check failed"
                fi
              else
                echo "❌ $service: Not running"
                failed_services="$failed_services $service"
              fi
            done
            
            if [ -n "$failed_services" ]; then
              echo "❌ Failed services: $failed_services"
              exit 1
            fi
            
            echo "✅ All services are healthy"
          EOF

      - name: Run integration tests
        run: |
          ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ env.PI_HOST }} << 'EOF'
            echo "Running post-deployment integration tests..."
            
            # Test API connectivity
            if curl -f http://localhost:8000/health; then
              echo "✅ API health check passed"
            else
              echo "❌ API health check failed"
              exit 1
            fi
            
            # Test database connectivity
            if docker exec lucid-database-1 mongosh --eval "db.runCommand('ping')" 2>/dev/null; then
              echo "✅ Database connectivity passed"
            else
              echo "❌ Database connectivity failed"
              exit 1
            fi
            
            echo "✅ Integration tests passed"
          EOF

  cleanup-old-deployments:
    runs-on: ubuntu-latest
    needs: [post-deployment-tests]
    if: always() && needs.post-deployment-tests.result == 'success'
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PI_SSH_KEY_B64 }}" | base64 -d > ~/.ssh/pi_key
          chmod 600 ~/.ssh/pi_key
          ssh-keyscan -H ${{ env.PI_HOST }} >> ~/.ssh/known_hosts

      - name: Cleanup old deployments
        run: |
          ssh -i ~/.ssh/pi_key -o StrictHostKeyChecking=no ${{ secrets.PI_USER }}@${{ env.PI_HOST }} << 'EOF'
            echo "Cleaning up old deployments..."
            
            # Keep only the last 5 deployments
            ls -t /opt/lucid/deployments/ 2>/dev/null | tail -n +6 | xargs -I {} rm -rf /opt/lucid/deployments/{} 2>/dev/null || true
            
            # Keep only the last 10 backups
            ls -t /opt/lucid/backups/ 2>/dev/null | tail -n +11 | xargs -I {} rm -rf /opt/lucid/backups/{} 2>/dev/null || true
            
            # Clean up old Docker images
            docker image prune -f
            
            echo "✅ Cleanup completed"
          EOF

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-services, rollback-deployment, post-deployment-tests, cleanup-old-deployments]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## Raspberry Pi Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Pi Host:** ${{ env.PI_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Type:** ${{ env.DEPLOYMENT_TYPE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Services:** ${{ needs.pre-deployment-checks.outputs.services_to_deploy }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.pre-deployment-checks.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-deployment Checks:** ${{ needs.pre-deployment-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Service Deployment:** ${{ needs.deploy-services.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Rollback (if applicable):** ${{ needs.rollback-deployment.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Post-deployment Tests:** ${{ needs.post-deployment-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cleanup:** ${{ needs.cleanup-old-deployments.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.post-deployment-tests.result }}" = "success" ]; then
            echo "🎉 **Deployment Successful**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment Failed**" >> $GITHUB_STEP_SUMMARY
          fi