name: Phase 4 - Support Services Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'admin/**'
      - 'payment-systems/**'
      - 'infrastructure/containers/admin/**'
      - 'infrastructure/containers/tron/**'
      - 'scripts/registry/**'
      - '.github/workflows/build-phase4.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'admin/**'
      - 'payment-systems/**'
      - 'infrastructure/containers/admin/**'
      - 'infrastructure/containers/tron/**'
  workflow_dispatch:
    inputs:
      target_platform:
        description: 'Target platform (linux/amd64, linux/arm64)'
        required: true
        default: 'linux/amd64,linux/arm64'
        type: choice
        options:
        - linux/amd64
        - linux/arm64
        - linux/amd64,linux/arm64
      force_rebuild:
        description: 'Force rebuild all services'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: pickme
  REPOSITORY: lucid
  PHASE: phase4

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      build-all: ${{ steps.changes.outputs.build-all }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          # Check if force rebuild is requested
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "build-all=true" >> $GITHUB_OUTPUT
            echo "services=admin-interface,tron-client,tron-payout-router,tron-wallet-manager,tron-usdt-manager,tron-staking,tron-payment-gateway" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if any Phase 4 files changed
          if git diff --name-only HEAD~1 HEAD | grep -E '^(admin/|payment-systems/|infrastructure/containers/(admin|tron)/)' > /dev/null; then
            echo "build-all=true" >> $GITHUB_OUTPUT
            echo "services=admin-interface,tron-client,tron-payout-router,tron-wallet-manager,tron-usdt-manager,tron-staking,tron-payment-gateway" >> $GITHUB_OUTPUT
          else
            # Check for specific service changes
            services=""
            if git diff --name-only HEAD~1 HEAD | grep -E '^(admin/|infrastructure/containers/admin/)' > /dev/null; then
              services="$services,admin-interface"
            fi
            if git diff --name-only HEAD~1 HEAD | grep -E '^(payment-systems/|infrastructure/containers/tron/)' > /dev/null; then
              services="$services,tron-client,tron-payout-router,tron-wallet-manager,tron-usdt-manager,tron-staking,tron-payment-gateway"
            fi
            
            # If no specific services changed, build all
            if [ -z "$services" ]; then
              echo "build-all=true" >> $GITHUB_OUTPUT
              echo "services=admin-interface,tron-client,tron-payout-router,tron-wallet-manager,tron-usdt-manager,tron-staking,tron-payment-gateway" >> $GITHUB_OUTPUT
            else
              echo "build-all=false" >> $GITHUB_OUTPUT
              echo "services=${services:1}" >> $GITHUB_OUTPUT
            fi
          fi

  setup-buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

  build-admin-interface:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'admin-interface')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build admin-interface
        uses: docker/build-push-action@v5
        with:
          context: ./admin
          file: ./admin/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/admin-interface:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/admin-interface:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/admin-interface:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=admin-interface-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=admin-interface-${{ matrix.platform }}

  build-tron-client:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'tron-client')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build tron-client
        uses: docker/build-push-action@v5
        with:
          context: ./payment-systems/tron
          file: ./payment-systems/tron/Dockerfile.tron-client
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-client:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-client:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-client:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=tron-client-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=tron-client-${{ matrix.platform }}

  build-tron-payout-router:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'tron-payout-router')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build tron-payout-router
        uses: docker/build-push-action@v5
        with:
          context: ./payment-systems/tron
          file: ./payment-systems/tron/Dockerfile.payout-router
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-payout-router:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-payout-router:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-payout-router:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=tron-payout-router-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=tron-payout-router-${{ matrix.platform }}

  build-tron-wallet-manager:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'tron-wallet-manager')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build tron-wallet-manager
        uses: docker/build-push-action@v5
        with:
          context: ./payment-systems/tron
          file: ./payment-systems/tron/Dockerfile.wallet-manager
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-wallet-manager:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-wallet-manager:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-wallet-manager:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=tron-wallet-manager-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=tron-wallet-manager-${{ matrix.platform }}

  build-tron-usdt-manager:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'tron-usdt-manager')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build tron-usdt-manager
        uses: docker/build-push-action@v5
        with:
          context: ./payment-systems/tron
          file: ./payment-systems/tron/Dockerfile.usdt-manager
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-usdt-manager:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-usdt-manager:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-usdt-manager:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=tron-usdt-manager-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=tron-usdt-manager-${{ matrix.platform }}

  build-tron-staking:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'tron-staking')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build tron-staking
        uses: docker/build-push-action@v5
        with:
          context: ./payment-systems/tron
          file: ./payment-systems/tron/Dockerfile.trx-staking
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-staking:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-staking:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-staking:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=tron-staking-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=tron-staking-${{ matrix.platform }}

  build-tron-payment-gateway:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'tron-payment-gateway')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build tron-payment-gateway
        uses: docker/build-push-action@v5
        with:
          context: ./payment-systems/tron
          file: ./payment-systems/tron/Dockerfile.payment-gateway
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-payment-gateway:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-payment-gateway:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/tron-payment-gateway:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=tron-payment-gateway-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=tron-payment-gateway-${{ matrix.platform }}

  security-scan:
    needs: [build-admin-interface, build-tron-client, build-tron-payout-router, build-tron-wallet-manager, build-tron-usdt-manager, build-tron-staking, build-tron-payment-gateway]
    runs-on: ubuntu-latest
    if: always()
    strategy:
      matrix:
        service: [admin-interface, tron-client, tron-payout-router, tron-wallet-manager, tron-usdt-manager, tron-staking, tron-payment-gateway]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  build-summary:
    needs: [detect-changes, build-admin-interface, build-tron-client, build-tron-payout-router, build-tron-wallet-manager, build-tron-usdt-manager, build-tron-staking, build-tron-payment-gateway, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Phase 4 Build Summary
        run: |
          echo "## Phase 4 - Support Services Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Services Built:** ${{ needs.detect-changes.outputs.services }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type:** ${{ needs.detect-changes.outputs.build-all == 'true' && 'Full Rebuild' || 'Incremental Build' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Platforms:** ${{ github.event.inputs.target_platform || 'linux/amd64, linux/arm64' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Built Images:" >> $GITHUB_STEP_SUMMARY
          for service in $(echo "${{ needs.detect-changes.outputs.services }}" | tr ',' ' '); do
            echo "- \`${{ env.REGISTRY }}/${{ env.REPOSITORY }}/$service:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.REGISTRY }}/${{ env.REPOSITORY }}/$service:${{ env.PHASE }}-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "All images scanned with Trivy for vulnerabilities" >> $GITHUB_STEP_SUMMARY
