name: Phase 1 - Foundation Services Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'auth/**'
      - 'database/**'
      - 'infrastructure/containers/auth/**'
      - 'infrastructure/containers/storage/**'
      - 'scripts/registry/**'
      - '.github/workflows/build-phase1.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'auth/**'
      - 'database/**'
      - 'infrastructure/containers/auth/**'
      - 'infrastructure/containers/storage/**'
  workflow_dispatch:
    inputs:
      target_platform:
        description: 'Target platform (linux/amd64, linux/arm64)'
        required: true
        default: 'linux/amd64,linux/arm64'
        type: choice
        options:
        - linux/amd64
        - linux/arm64
        - linux/amd64,linux/arm64
      force_rebuild:
        description: 'Force rebuild all services'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  REPOSITORY: hamigames/lucid
  PHASE: phase1

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      build-all: ${{ steps.changes.outputs.build-all }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          # Check if force rebuild is requested
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "build-all=true" >> $GITHUB_OUTPUT
            echo "services=auth-service,storage-database,mongodb,redis,elasticsearch" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if any Phase 1 files changed
          if git diff --name-only HEAD~1 HEAD | grep -E '^(auth/|database/|infrastructure/containers/(auth|storage)/|scripts/registry/)' > /dev/null; then
            echo "build-all=true" >> $GITHUB_OUTPUT
            echo "services=auth-service,storage-database,mongodb,redis,elasticsearch" >> $GITHUB_OUTPUT
          else
            # Check for specific service changes
            services=""
            if git diff --name-only HEAD~1 HEAD | grep -E '^(auth/|infrastructure/containers/auth/)' > /dev/null; then
              services="$services,auth-service"
            fi
            if git diff --name-only HEAD~1 HEAD | grep -E '^(database/|infrastructure/containers/storage/)' > /dev/null; then
              services="$services,storage-database,mongodb,redis,elasticsearch"
            fi
            
            # If no specific services changed, build all
            if [ -z "$services" ]; then
              echo "build-all=true" >> $GITHUB_OUTPUT
              echo "services=auth-service,storage-database,mongodb,redis,elasticsearch" >> $GITHUB_OUTPUT
            else
              echo "build-all=false" >> $GITHUB_OUTPUT
              echo "services=${services:1}" >> $GITHUB_OUTPUT
            fi
          fi

  setup-buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

  build-auth-service:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'auth-service')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build auth-service
        uses: docker/build-push-action@v5
        with:
          context: ./auth
          file: ./auth/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/auth-service:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/auth-service:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/auth-service:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=auth-service-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=auth-service-${{ matrix.platform }}

      - name: Verify distroless image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/auth-service:${{ github.sha }} /bin/sh -c "echo 'Auth service verification successful'" || echo "Image verification failed - this is expected for distroless images"

  build-storage-database:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'storage-database')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build storage-database
        uses: docker/build-push-action@v5
        with:
          context: ./database
          file: ./database/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/storage-database:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/storage-database:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/storage-database:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=storage-database-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=storage-database-${{ matrix.platform }}

  build-mongodb:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'mongodb')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build MongoDB
        uses: docker/build-push-action@v5
        with:
          context: ./infrastructure/containers/storage
          file: ./infrastructure/containers/storage/Dockerfile.mongodb
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/mongodb:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/mongodb:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/mongodb:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=mongodb-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=mongodb-${{ matrix.platform }}

  build-redis:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'redis')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Redis
        uses: docker/build-push-action@v5
        with:
          context: ./infrastructure/containers/storage
          file: ./infrastructure/containers/storage/Dockerfile.redis
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/redis:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/redis:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/redis:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=redis-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=redis-${{ matrix.platform }}

  build-elasticsearch:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'elasticsearch')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Elasticsearch
        uses: docker/build-push-action@v5
        with:
          context: ./infrastructure/containers/storage
          file: ./infrastructure/containers/storage/Dockerfile.elasticsearch
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/elasticsearch:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/elasticsearch:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/elasticsearch:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=elasticsearch-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=elasticsearch-${{ matrix.platform }}

  security-scan:
    needs: [build-auth-service, build-storage-database, build-mongodb, build-redis, build-elasticsearch]
    runs-on: ubuntu-latest
    if: always()
    strategy:
      matrix:
        service: [auth-service, storage-database, mongodb, redis, elasticsearch]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  build-summary:
    needs: [detect-changes, build-auth-service, build-storage-database, build-mongodb, build-redis, build-elasticsearch, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Phase 1 Build Summary
        run: |
          echo "## Phase 1 - Foundation Services Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Services Built:** ${{ needs.detect-changes.outputs.services }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type:** ${{ needs.detect-changes.outputs.build-all == 'true' && 'Full Rebuild' || 'Incremental Build' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Platforms:** ${{ github.event.inputs.target_platform || 'linux/amd64, linux/arm64' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Built Images:" >> $GITHUB_STEP_SUMMARY
          for service in $(echo "${{ needs.detect-changes.outputs.services }}" | tr ',' ' '); do
            echo "- \`${{ env.REGISTRY }}/${{ env.REPOSITORY }}/$service:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.REGISTRY }}/${{ env.REPOSITORY }}/$service:${{ env.PHASE }}-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "All images scanned with Trivy for vulnerabilities" >> $GITHUB_STEP_SUMMARY
