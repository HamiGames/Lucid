name: Integration Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - api
        - blockchain
        - rdp
        - sessions
        - storage
        - vm
        - gui
      test_environment:
        description: 'Test environment'
        required: true
        default: 'docker'
        type: choice
        options:
        - docker
        - kubernetes
        - hybrid

env:
  REGISTRY: pickme
  IMAGE_NAME: lucid
  TEST_ENV: ${{ github.event.inputs.test_environment || 'docker' }}

jobs:
  setup-test-environment:
    runs-on: ubuntu-latest
    outputs:
      test-services: ${{ steps.setup.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup test environment
        id: setup
        run: |
          # Determine which services to test based on input or changes
          test_suite="${{ github.event.inputs.test_suite }}"
          
          if [ "$test_suite" = "all" ]; then
            services="api,blockchain,rdp,sessions,storage,vm,gui"
          else
            services="$test_suite"
          fi
          
          echo "services=$services" >> $GITHUB_OUTPUT
          echo "Testing services: $services"

      - name: Pull test images
        run: |
          services="${{ steps.setup.outputs.services }}"
          for service in $(echo "$services" | tr ',' ' '); do
            echo "Pulling $service image..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:latest || true
          done

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJSON(format('[{0}]', needs.setup-test-environment.outputs.test-services)) }}
    needs: [setup-test-environment]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          
          # Install service-specific dependencies
          if [ -f "${{ matrix.service }}/requirements.txt" ]; then
            pip install -r ${{ matrix.service }}/requirements.txt
          fi

      - name: Run unit tests for ${{ matrix.service }}
        run: |
          # Run unit tests for the specific service
          if [ -d "tests/unit/${{ matrix.service }}" ]; then
            pytest tests/unit/${{ matrix.service }}/ -v --cov=${{ matrix.service }} --cov-report=xml --cov-report=html
          elif [ -d "${{ matrix.service }}/tests" ]; then
            pytest ${{ matrix.service }}/tests/ -v --cov=${{ matrix.service }} --cov-report=xml --cov-report=html
          else
            echo "No unit tests found for ${{ matrix.service }}"
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.service == 'api'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  integration-tests-api:
    runs-on: ubuntu-latest
    needs: [setup-test-environment, unit-tests]
    if: contains(needs.setup-test-environment.outputs.test-services, 'api') || github.event.inputs.test_suite == 'all'
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio httpx

      - name: Start API services
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml up -d api-gateway

      - name: Wait for services to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Run API integration tests
        run: |
          pytest tests/integration/api-integration/ -v --tb=short

      - name: Stop services
        if: always()
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml down

  integration-tests-blockchain:
    runs-on: ubuntu-latest
    needs: [setup-test-environment, unit-tests]
    if: contains(needs.setup-test-environment.outputs.test-services, 'blockchain') || github.event.inputs.test_suite == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio tronpy

      - name: Start blockchain services
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml up -d blockchain

      - name: Wait for blockchain services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8545; do sleep 2; done'

      - name: Run blockchain integration tests
        run: |
          pytest tests/integration/blockchain-integration/ -v --tb=short

      - name: Stop services
        if: always()
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml down

  integration-tests-rdp:
    runs-on: ubuntu-latest
    needs: [setup-test-environment, unit-tests]
    if: contains(needs.setup-test-environment.outputs.test-services, 'rdp') || github.event.inputs.test_suite == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio

      - name: Start RDP services
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml up -d rdp

      - name: Wait for RDP services
        run: |
          timeout 60 bash -c 'until netstat -tuln | grep :3389; do sleep 2; done'

      - name: Run RDP integration tests
        run: |
          pytest tests/integration/rdp-integration/ -v --tb=short

      - name: Stop services
        if: always()
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml down

  integration-tests-sessions:
    runs-on: ubuntu-latest
    needs: [setup-test-environment, unit-tests]
    if: contains(needs.setup-test-environment.outputs.test-services, 'sessions') || github.event.inputs.test_suite == 'all'
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pymongo

      - name: Initialize test database
        run: |
          python scripts/database/init_mongodb_schema.js

      - name: Start session services
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml up -d sessions

      - name: Wait for session services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'

      - name: Run session integration tests
        run: |
          pytest tests/integration/session-integration/ -v --tb=short

      - name: Stop services
        if: always()
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml down

  integration-tests-storage:
    runs-on: ubuntu-latest
    needs: [setup-test-environment, unit-tests]
    if: contains(needs.setup-test-environment.outputs.test-services, 'storage') || github.event.inputs.test_suite == 'all'
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pymongo

      - name: Initialize storage test database
        run: |
          python scripts/database/init_mongodb_schema.js

      - name: Start storage services
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml up -d storage

      - name: Wait for storage services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8081/health; do sleep 2; done'

      - name: Run storage integration tests
        run: |
          pytest tests/integration/storage-integration/ -v --tb=short

      - name: Stop services
        if: always()
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml down

  integration-tests-vm:
    runs-on: ubuntu-latest
    needs: [setup-test-environment, unit-tests]
    if: contains(needs.setup-test-environment.outputs.test-services, 'vm') || github.event.inputs.test_suite == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio docker

      - name: Start VM services
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml up -d vm

      - name: Wait for VM services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8082/health; do sleep 2; done'

      - name: Run VM integration tests
        run: |
          pytest tests/integration/vm-integration/ -v --tb=short

      - name: Stop services
        if: always()
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml down

  integration-tests-gui:
    runs-on: ubuntu-latest
    needs: [setup-test-environment, unit-tests]
    if: contains(needs.setup-test-environment.outputs.test-services, 'gui') || github.event.inputs.test_suite == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio tkinter

      - name: Set up virtual display
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Start GUI services
        run: |
          export DISPLAY=:99
          xvfb-run -a docker-compose -f infrastructure/compose/docker-compose.test.yml up -d gui

      - name: Wait for GUI services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8083/health; do sleep 2; done'

      - name: Run GUI integration tests
        run: |
          export DISPLAY=:99
          xvfb-run -a pytest tests/integration/gui-integration/ -v --tb=short

      - name: Stop services
        if: always()
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml down

  end-to-end-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests-api, integration-tests-blockchain, integration-tests-rdp, integration-tests-sessions, integration-tests-storage, integration-tests-vm, integration-tests-gui]
    if: always() && github.event.inputs.test_suite == 'all'
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio httpx

      - name: Start all services
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml up -d

      - name: Wait for all services to be ready
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:8000/health && curl -f http://localhost:8080/health && curl -f http://localhost:8081/health; do sleep 5; done'

      - name: Initialize test data
        run: |
          python scripts/testing/test-data-generator.py

      - name: Run end-to-end tests
        run: |
          pytest tests/integration/end-to-end/ -v --tb=short

      - name: Stop all services
        if: always()
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml down

  performance-tests:
    runs-on: ubuntu-latest
    needs: [end-to-end-tests]
    if: always() && github.event.inputs.test_suite == 'all' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-benchmark locust

      - name: Start services for performance testing
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml up -d

      - name: Wait for services
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --benchmark-only --benchmark-sort=mean

      - name: Run load tests
        run: |
          locust -f tests/performance/load-testing/locustfile.py --host=http://localhost:8000 --users=100 --spawn-rate=10 --run-time=5m --headless

      - name: Stop services
        if: always()
        run: |
          docker-compose -f infrastructure/compose/docker-compose.test.yml down

  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests-api, integration-tests-blockchain, integration-tests-rdp, integration-tests-sessions, integration-tests-storage, integration-tests-vm, integration-tests-gui, end-to-end-tests, performance-tests]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## Integration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Test Suite:** ${{ github.event.inputs.test_suite || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Environment:** ${{ env.TEST_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "**Services Tested:** ${{ needs.setup-test-environment.outputs.test-services }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests:** ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API Integration:** ${{ needs.integration-tests-api.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Blockchain Integration:** ${{ needs.integration-tests-blockchain.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **RDP Integration:** ${{ needs.integration-tests-rdp.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Sessions Integration:** ${{ needs.integration-tests-sessions.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Storage Integration:** ${{ needs.integration-tests-storage.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **VM Integration:** ${{ needs.integration-tests-vm.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GUI Integration:** ${{ needs.integration-tests-gui.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **End-to-End Tests:** ${{ needs.end-to-end-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests:** ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
