name: Phase 2 - Core Services Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - '03-api-gateway/**'
      - 'blockchain/**'
      - 'infrastructure/service-mesh/**'
      - 'infrastructure/containers/api-gateway/**'
      - 'infrastructure/containers/blockchain/**'
      - 'scripts/registry/**'
      - '.github/workflows/build-phase2.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '03-api-gateway/**'
      - 'blockchain/**'
      - 'infrastructure/service-mesh/**'
      - 'infrastructure/containers/api-gateway/**'
      - 'infrastructure/containers/blockchain/**'
  workflow_dispatch:
    inputs:
      target_platform:
        description: 'Target platform (linux/amd64, linux/arm64)'
        required: true
        default: 'linux/amd64,linux/arm64'
        type: choice
        options:
        - linux/amd64
        - linux/arm64
        - linux/amd64,linux/arm64
      force_rebuild:
        description: 'Force rebuild all services'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  REPOSITORY: hamigames/lucid
  PHASE: phase2

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      build-all: ${{ steps.changes.outputs.build-all }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          # Check if force rebuild is requested
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "build-all=true" >> $GITHUB_OUTPUT
            echo "services=api-gateway,blockchain-core,blockchain-engine,session-anchoring,block-manager,data-chain,service-mesh-controller" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if any Phase 2 files changed
          if git diff --name-only HEAD~1 HEAD | grep -E '^(03-api-gateway/|blockchain/|infrastructure/service-mesh/|infrastructure/containers/(api-gateway|blockchain)/)' > /dev/null; then
            echo "build-all=true" >> $GITHUB_OUTPUT
            echo "services=api-gateway,blockchain-core,blockchain-engine,session-anchoring,block-manager,data-chain,service-mesh-controller" >> $GITHUB_OUTPUT
          else
            # Check for specific service changes
            services=""
            if git diff --name-only HEAD~1 HEAD | grep -E '^(03-api-gateway/|infrastructure/containers/api-gateway/)' > /dev/null; then
              services="$services,api-gateway"
            fi
            if git diff --name-only HEAD~1 HEAD | grep -E '^(blockchain/|infrastructure/containers/blockchain/)' > /dev/null; then
              services="$services,blockchain-core,blockchain-engine,session-anchoring,block-manager,data-chain"
            fi
            if git diff --name-only HEAD~1 HEAD | grep -E '^(infrastructure/service-mesh/)' > /dev/null; then
              services="$services,service-mesh-controller"
            fi
            
            # If no specific services changed, build all
            if [ -z "$services" ]; then
              echo "build-all=true" >> $GITHUB_OUTPUT
              echo "services=api-gateway,blockchain-core,blockchain-engine,session-anchoring,block-manager,data-chain,service-mesh-controller" >> $GITHUB_OUTPUT
            else
              echo "build-all=false" >> $GITHUB_OUTPUT
              echo "services=${services:1}" >> $GITHUB_OUTPUT
            fi
          fi

  setup-buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

  build-api-gateway:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'api-gateway')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build api-gateway
        uses: docker/build-push-action@v5
        with:
          context: ./03-api-gateway
          file: ./03-api-gateway/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/api-gateway:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/api-gateway:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/api-gateway:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=api-gateway-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=api-gateway-${{ matrix.platform }}

      - name: Verify distroless image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/api-gateway:${{ github.sha }} /bin/sh -c "echo 'API Gateway verification successful'" || echo "Image verification failed - this is expected for distroless images"

  build-blockchain-core:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'blockchain-core')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build blockchain-core
        uses: docker/build-push-action@v5
        with:
          context: ./blockchain
          file: ./blockchain/Dockerfile.engine
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/blockchain-core:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/blockchain-core:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/blockchain-core:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=blockchain-core-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=blockchain-core-${{ matrix.platform }}

  build-blockchain-engine:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'blockchain-engine')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build blockchain-engine
        uses: docker/build-push-action@v5
        with:
          context: ./blockchain
          file: ./blockchain/Dockerfile.engine
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/blockchain-engine:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/blockchain-engine:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/blockchain-engine:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=blockchain-engine-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=blockchain-engine-${{ matrix.platform }}

  build-session-anchoring:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'session-anchoring')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build session-anchoring
        uses: docker/build-push-action@v5
        with:
          context: ./blockchain
          file: ./blockchain/Dockerfile.anchoring
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-anchoring:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-anchoring:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/session-anchoring:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=session-anchoring-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=session-anchoring-${{ matrix.platform }}

  build-block-manager:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'block-manager')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build block-manager
        uses: docker/build-push-action@v5
        with:
          context: ./blockchain
          file: ./blockchain/Dockerfile.manager
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/block-manager:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/block-manager:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/block-manager:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=block-manager-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=block-manager-${{ matrix.platform }}

  build-data-chain:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'data-chain')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build data-chain
        uses: docker/build-push-action@v5
        with:
          context: ./blockchain
          file: ./blockchain/Dockerfile.data
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/data-chain:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/data-chain:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/data-chain:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=data-chain-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=data-chain-${{ matrix.platform }}

  build-service-mesh-controller:
    needs: [detect-changes, setup-buildx]
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.services, 'service-mesh-controller')
    strategy:
      matrix:
        platform: ${{ fromJSON(format('[{0}]', github.event.inputs.target_platform || '["linux/amd64", "linux/arm64"]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build service-mesh-controller
        uses: docker/build-push-action@v5
        with:
          context: ./infrastructure/service-mesh
          file: ./infrastructure/service-mesh/Dockerfile.controller
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/service-mesh-controller:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/service-mesh-controller:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/service-mesh-controller:${{ env.PHASE }}-${{ github.sha }}
          cache-from: type=gha,scope=service-mesh-controller-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=service-mesh-controller-${{ matrix.platform }}

  security-scan:
    needs: [build-api-gateway, build-blockchain-core, build-blockchain-engine, build-session-anchoring, build-block-manager, build-data-chain, build-service-mesh-controller]
    runs-on: ubuntu-latest
    if: always()
    strategy:
      matrix:
        service: [api-gateway, blockchain-core, blockchain-engine, session-anchoring, block-manager, data-chain, service-mesh-controller]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  build-summary:
    needs: [detect-changes, build-api-gateway, build-blockchain-core, build-blockchain-engine, build-session-anchoring, build-block-manager, build-data-chain, build-service-mesh-controller, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Phase 2 Build Summary
        run: |
          echo "## Phase 2 - Core Services Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Services Built:** ${{ needs.detect-changes.outputs.services }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type:** ${{ needs.detect-changes.outputs.build-all == 'true' && 'Full Rebuild' || 'Incremental Build' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Platforms:** ${{ github.event.inputs.target_platform || 'linux/amd64, linux/arm64' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Built Images:" >> $GITHUB_STEP_SUMMARY
          for service in $(echo "${{ needs.detect-changes.outputs.services }}" | tr ',' ' '); do
            echo "- \`${{ env.REGISTRY }}/${{ env.REPOSITORY }}/$service:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.REGISTRY }}/${{ env.REPOSITORY }}/$service:${{ env.PHASE }}-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "All images scanned with Trivy for vulnerabilities" >> $GITHUB_STEP_SUMMARY
